/*
 * Companies
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Crm.Companies.Client;
using HubSpot.Crm.Companies.Client.Auth;
using HubSpot.Crm.Companies.Model;

namespace HubSpot.Crm.Companies.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a batch of companies by ID
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostCrmV3ObjectsCompaniesBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, int operationIndex = 0);

        /// <summary>
        /// Archive a batch of companies by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, int operationIndex = 0);
        /// <summary>
        /// Create a batch of companies
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInputForCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        BatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchCreateCreate(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, int operationIndex = 0);

        /// <summary>
        /// Create a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInputForCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfo(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, int operationIndex = 0);
        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        BatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Update a batch of companies
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        BatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchUpdateUpdate(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, int operationIndex = 0);

        /// <summary>
        /// Update a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfo(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive a batch of companies by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ObjectsCompaniesBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of companies by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInputForCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchCreateCreateAsync(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInputForCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfoAsync(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchUpdateUpdateAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfoAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApi : IBatchApiSync, IBatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchApi : IBatchApi
    {
        private HubSpot.Crm.Companies.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi(string basePath)
        {
            this.Configuration = HubSpot.Crm.Companies.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Companies.Client.GlobalConfiguration.Instance,
                new HubSpot.Crm.Companies.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Crm.Companies.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Companies.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Crm.Companies.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchApi(HubSpot.Crm.Companies.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Crm.Companies.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Companies.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Crm.Companies.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Companies.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Crm.Companies.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchApi(HubSpot.Crm.Companies.Client.ISynchronousClient client, HubSpot.Crm.Companies.Client.IAsynchronousClient asyncClient, HubSpot.Crm.Companies.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Crm.Companies.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Crm.Companies.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Crm.Companies.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Crm.Companies.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Crm.Companies.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive a batch of companies by ID 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostCrmV3ObjectsCompaniesBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, int operationIndex = 0)
        {
            PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfo(batchInputSimplePublicObjectId);
        }

        /// <summary>
        /// Archive a batch of companies by ID 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Crm.Companies.Client.ApiResponse<Object> PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, int operationIndex = 0)
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.Crm.Companies.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchArchiveArchive");
            }

            HubSpot.Crm.Companies.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Companies.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV3ObjectsCompaniesBatchArchiveArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/objects/companies/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of companies by ID 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ObjectsCompaniesBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfoAsync(batchInputSimplePublicObjectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of companies by ID 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Companies.Client.ApiResponse<Object>> PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.Crm.Companies.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchArchiveArchive");
            }


            HubSpot.Crm.Companies.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Companies.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV3ObjectsCompaniesBatchArchiveArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/objects/companies/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInputForCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        public BatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchCreateCreate(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, int operationIndex = 0)
        {
            HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfo(batchInputSimplePublicObjectInputForCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInputForCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        public HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfo(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, int operationIndex = 0)
        {
            // verify the required parameter 'batchInputSimplePublicObjectInputForCreate' is set
            if (batchInputSimplePublicObjectInputForCreate == null)
            {
                throw new HubSpot.Crm.Companies.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectInputForCreate' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchCreateCreate");
            }

            HubSpot.Crm.Companies.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Companies.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectInputForCreate;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV3ObjectsCompaniesBatchCreateCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInputForCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchCreateCreateAsync(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfoAsync(batchInputSimplePublicObjectInputForCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInputForCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfoAsync(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectInputForCreate' is set
            if (batchInputSimplePublicObjectInputForCreate == null)
            {
                throw new HubSpot.Crm.Companies.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectInputForCreate' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchCreateCreate");
            }


            HubSpot.Crm.Companies.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Companies.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectInputForCreate;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV3ObjectsCompaniesBatchCreateCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        public BatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        public HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.Crm.Companies.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchReadRead");
            }

            HubSpot.Crm.Companies.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Companies.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV3ObjectsCompaniesBatchReadRead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.Crm.Companies.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchReadRead");
            }


            HubSpot.Crm.Companies.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Companies.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV3ObjectsCompaniesBatchReadRead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        public BatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchUpdateUpdate(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, int operationIndex = 0)
        {
            HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfo(batchInputSimplePublicObjectBatchInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        public HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfo(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, int operationIndex = 0)
        {
            // verify the required parameter 'batchInputSimplePublicObjectBatchInput' is set
            if (batchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.Crm.Companies.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchUpdateUpdate");
            }

            HubSpot.Crm.Companies.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Companies.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectBatchInput;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV3ObjectsCompaniesBatchUpdateUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchUpdateUpdateAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfoAsync(batchInputSimplePublicObjectBatchInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.Crm.Companies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Companies.Client.ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfoAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectBatchInput' is set
            if (batchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.Crm.Companies.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchUpdateUpdate");
            }


            HubSpot.Crm.Companies.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Companies.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Companies.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectBatchInput;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV3ObjectsCompaniesBatchUpdateUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Companies.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
