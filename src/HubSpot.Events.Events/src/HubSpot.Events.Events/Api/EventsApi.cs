/*
 * HubSpot Events API
 *
 * API for accessing CRM object events.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Events.Events.Client;
using HubSpot.Events.Events.Client.Auth;
using HubSpot.Events.Events.Model;

namespace HubSpot.Events.Events.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a collection of events matching a query.
        /// </summary>
        /// <exception cref="HubSpot.Events.Events.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseExternalUnifiedEvent</returns>
        CollectionResponseExternalUnifiedEvent GetEventsV3EventsGetPage(DateTime? occurredAfter = default(DateTime?), DateTime? occurredBefore = default(DateTime?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// Returns a collection of events matching a query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Events.Events.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseExternalUnifiedEvent</returns>
        ApiResponse<CollectionResponseExternalUnifiedEvent> GetEventsV3EventsGetPageWithHttpInfo(DateTime? occurredAfter = default(DateTime?), DateTime? occurredBefore = default(DateTime?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns a collection of events matching a query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Events.Events.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseExternalUnifiedEvent</returns>
        System.Threading.Tasks.Task<CollectionResponseExternalUnifiedEvent> GetEventsV3EventsGetPageAsync(DateTime? occurredAfter = default(DateTime?), DateTime? occurredBefore = default(DateTime?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a collection of events matching a query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Events.Events.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseExternalUnifiedEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseExternalUnifiedEvent>> GetEventsV3EventsGetPageWithHttpInfoAsync(DateTime? occurredAfter = default(DateTime?), DateTime? occurredBefore = default(DateTime?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private HubSpot.Events.Events.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = HubSpot.Events.Events.Client.Configuration.MergeConfigurations(
                HubSpot.Events.Events.Client.GlobalConfiguration.Instance,
                new HubSpot.Events.Events.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Events.Events.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Events.Events.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Events.Events.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(HubSpot.Events.Events.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Events.Events.Client.Configuration.MergeConfigurations(
                HubSpot.Events.Events.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Events.Events.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Events.Events.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Events.Events.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(HubSpot.Events.Events.Client.ISynchronousClient client, HubSpot.Events.Events.Client.IAsynchronousClient asyncClient, HubSpot.Events.Events.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Events.Events.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Events.Events.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Events.Events.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Events.Events.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Events.Events.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns a collection of events matching a query. 
        /// </summary>
        /// <exception cref="HubSpot.Events.Events.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseExternalUnifiedEvent</returns>
        public CollectionResponseExternalUnifiedEvent GetEventsV3EventsGetPage(DateTime? occurredAfter = default(DateTime?), DateTime? occurredBefore = default(DateTime?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), int operationIndex = 0)
        {
            HubSpot.Events.Events.Client.ApiResponse<CollectionResponseExternalUnifiedEvent> localVarResponse = GetEventsV3EventsGetPageWithHttpInfo(occurredAfter, occurredBefore, objectType, objectId, eventType, after, before, limit, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of events matching a query. 
        /// </summary>
        /// <exception cref="HubSpot.Events.Events.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseExternalUnifiedEvent</returns>
        public HubSpot.Events.Events.Client.ApiResponse<CollectionResponseExternalUnifiedEvent> GetEventsV3EventsGetPageWithHttpInfo(DateTime? occurredAfter = default(DateTime?), DateTime? occurredBefore = default(DateTime?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), int operationIndex = 0)
        {
            HubSpot.Events.Events.Client.RequestOptions localVarRequestOptions = new HubSpot.Events.Events.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Events.Events.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Events.Events.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (occurredAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "occurredAfter", occurredAfter));
            }
            if (occurredBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "occurredBefore", occurredBefore));
            }
            if (objectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "objectType", objectType));
            }
            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "objectId", objectId));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            localVarRequestOptions.Operation = "EventsApi.GetEventsV3EventsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseExternalUnifiedEvent>("/events/v3/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsV3EventsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a collection of events matching a query. 
        /// </summary>
        /// <exception cref="HubSpot.Events.Events.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseExternalUnifiedEvent</returns>
        public async System.Threading.Tasks.Task<CollectionResponseExternalUnifiedEvent> GetEventsV3EventsGetPageAsync(DateTime? occurredAfter = default(DateTime?), DateTime? occurredBefore = default(DateTime?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Events.Events.Client.ApiResponse<CollectionResponseExternalUnifiedEvent> localVarResponse = await GetEventsV3EventsGetPageWithHttpInfoAsync(occurredAfter, occurredBefore, objectType, objectId, eventType, after, before, limit, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of events matching a query. 
        /// </summary>
        /// <exception cref="HubSpot.Events.Events.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseExternalUnifiedEvent)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Events.Events.Client.ApiResponse<CollectionResponseExternalUnifiedEvent>> GetEventsV3EventsGetPageWithHttpInfoAsync(DateTime? occurredAfter = default(DateTime?), DateTime? occurredBefore = default(DateTime?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Events.Events.Client.RequestOptions localVarRequestOptions = new HubSpot.Events.Events.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Events.Events.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Events.Events.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (occurredAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "occurredAfter", occurredAfter));
            }
            if (occurredBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "occurredBefore", occurredBefore));
            }
            if (objectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "objectType", objectType));
            }
            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "objectId", objectId));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            localVarRequestOptions.Operation = "EventsApi.GetEventsV3EventsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Events.Events.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseExternalUnifiedEvent>("/events/v3/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsV3EventsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
