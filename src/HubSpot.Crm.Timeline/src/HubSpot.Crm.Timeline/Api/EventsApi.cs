/*
 * Timeline events
 *
 * This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Crm.Timeline.Client;
using HubSpot.Crm.Timeline.Client.Auth;
using HubSpot.Crm.Timeline.Model;

namespace HubSpot.Crm.Timeline.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the detailTemplate as rendered
        /// </summary>
        /// <remarks>
        /// This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventDetail</returns>
        EventDetail GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById(string eventTemplateId, string eventId, int operationIndex = 0);

        /// <summary>
        /// Gets the detailTemplate as rendered
        /// </summary>
        /// <remarks>
        /// This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventDetail</returns>
        ApiResponse<EventDetail> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfo(string eventTemplateId, string eventId, int operationIndex = 0);
        /// <summary>
        /// Gets the event
        /// </summary>
        /// <remarks>
        /// This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventResponse</returns>
        TimelineEventResponse GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById(string eventTemplateId, string eventId, int operationIndex = 0);

        /// <summary>
        /// Gets the event
        /// </summary>
        /// <remarks>
        /// This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventResponse</returns>
        ApiResponse<TimelineEventResponse> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfo(string eventTemplateId, string eventId, int operationIndex = 0);
        /// <summary>
        /// Renders the header or detail as HTML
        /// </summary>
        /// <remarks>
        /// This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById(string eventTemplateId, string eventId, bool? detail = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Renders the header or detail as HTML
        /// </summary>
        /// <remarks>
        /// This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfo(string eventTemplateId, string eventId, bool? detail = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Creates multiple events
        /// </summary>
        /// <remarks>
        /// Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseTimelineEventResponse</returns>
        BatchResponseTimelineEventResponse PostIntegratorsTimelineV3EventsBatchCreateCreateBatch(BatchInputTimelineEvent batchInputTimelineEvent, int operationIndex = 0);

        /// <summary>
        /// Creates multiple events
        /// </summary>
        /// <remarks>
        /// Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseTimelineEventResponse</returns>
        ApiResponse<BatchResponseTimelineEventResponse> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfo(BatchInputTimelineEvent batchInputTimelineEvent, int operationIndex = 0);
        /// <summary>
        /// Create a single event
        /// </summary>
        /// <remarks>
        /// Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventResponse</returns>
        TimelineEventResponse PostIntegratorsTimelineV3EventsCreate(TimelineEvent timelineEvent, int operationIndex = 0);

        /// <summary>
        /// Create a single event
        /// </summary>
        /// <remarks>
        /// Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventResponse</returns>
        ApiResponse<TimelineEventResponse> PostIntegratorsTimelineV3EventsCreateWithHttpInfo(TimelineEvent timelineEvent, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets the detailTemplate as rendered
        /// </summary>
        /// <remarks>
        /// This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetail</returns>
        System.Threading.Tasks.Task<EventDetail> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdAsync(string eventTemplateId, string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the detailTemplate as rendered
        /// </summary>
        /// <remarks>
        /// This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDetail>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfoAsync(string eventTemplateId, string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the event
        /// </summary>
        /// <remarks>
        /// This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventResponse</returns>
        System.Threading.Tasks.Task<TimelineEventResponse> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdAsync(string eventTemplateId, string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the event
        /// </summary>
        /// <remarks>
        /// This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventResponse>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfoAsync(string eventTemplateId, string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Renders the header or detail as HTML
        /// </summary>
        /// <remarks>
        /// This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdAsync(string eventTemplateId, string eventId, bool? detail = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Renders the header or detail as HTML
        /// </summary>
        /// <remarks>
        /// This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfoAsync(string eventTemplateId, string eventId, bool? detail = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates multiple events
        /// </summary>
        /// <remarks>
        /// Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTimelineEventResponse</returns>
        System.Threading.Tasks.Task<BatchResponseTimelineEventResponse> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchAsync(BatchInputTimelineEvent batchInputTimelineEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates multiple events
        /// </summary>
        /// <remarks>
        /// Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTimelineEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseTimelineEventResponse>> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputTimelineEvent batchInputTimelineEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a single event
        /// </summary>
        /// <remarks>
        /// Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventResponse</returns>
        System.Threading.Tasks.Task<TimelineEventResponse> PostIntegratorsTimelineV3EventsCreateAsync(TimelineEvent timelineEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a single event
        /// </summary>
        /// <remarks>
        /// Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventResponse>> PostIntegratorsTimelineV3EventsCreateWithHttpInfoAsync(TimelineEvent timelineEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private HubSpot.Crm.Timeline.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = HubSpot.Crm.Timeline.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Timeline.Client.GlobalConfiguration.Instance,
                new HubSpot.Crm.Timeline.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Crm.Timeline.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Timeline.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Crm.Timeline.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(HubSpot.Crm.Timeline.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Crm.Timeline.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Timeline.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Crm.Timeline.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Timeline.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Crm.Timeline.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(HubSpot.Crm.Timeline.Client.ISynchronousClient client, HubSpot.Crm.Timeline.Client.IAsynchronousClient asyncClient, HubSpot.Crm.Timeline.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Crm.Timeline.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Crm.Timeline.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Crm.Timeline.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Crm.Timeline.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Crm.Timeline.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the detailTemplate as rendered This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventDetail</returns>
        public EventDetail GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById(string eventTemplateId, string eventId, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<EventDetail> localVarResponse = GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfo(eventTemplateId, eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the detailTemplate as rendered This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventDetail</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<EventDetail> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfo(string eventTemplateId, string eventId, int operationIndex = 0)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "EventsApi.GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EventDetail>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}/detail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the detailTemplate as rendered This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetail</returns>
        public async System.Threading.Tasks.Task<EventDetail> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdAsync(string eventTemplateId, string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<EventDetail> localVarResponse = await GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfoAsync(eventTemplateId, eventId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the detailTemplate as rendered This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetail)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<EventDetail>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfoAsync(string eventTemplateId, string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "EventsApi.GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventDetail>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}/detail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the event This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventResponse</returns>
        public TimelineEventResponse GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById(string eventTemplateId, string eventId, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventResponse> localVarResponse = GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfo(eventTemplateId, eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the event This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventResponse</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventResponse> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfo(string eventTemplateId, string eventId, int operationIndex = 0)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "EventsApi.GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimelineEventResponse>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the event This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventResponse</returns>
        public async System.Threading.Tasks.Task<TimelineEventResponse> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdAsync(string eventTemplateId, string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventResponse> localVarResponse = await GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfoAsync(eventTemplateId, eventId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the event This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventResponse>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfoAsync(string eventTemplateId, string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "EventsApi.GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimelineEventResponse>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renders the header or detail as HTML This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById(string eventTemplateId, string eventId, bool? detail = default(bool?), int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<string> localVarResponse = GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfo(eventTemplateId, eventId, detail);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renders the header or detail as HTML This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<string> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfo(string eventTemplateId, string eventId, bool? detail = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventId)); // path parameter
            if (detail != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "detail", detail));
            }

            localVarRequestOptions.Operation = "EventsApi.GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}/render", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renders the header or detail as HTML This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdAsync(string eventTemplateId, string eventId, bool? detail = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<string> localVarResponse = await GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfoAsync(eventTemplateId, eventId, detail, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renders the header or detail as HTML This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<string>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfoAsync(string eventTemplateId, string eventId, bool? detail = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventId)); // path parameter
            if (detail != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "detail", detail));
            }

            localVarRequestOptions.Operation = "EventsApi.GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}/render", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates multiple events Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseTimelineEventResponse</returns>
        public BatchResponseTimelineEventResponse PostIntegratorsTimelineV3EventsBatchCreateCreateBatch(BatchInputTimelineEvent batchInputTimelineEvent, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<BatchResponseTimelineEventResponse> localVarResponse = PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfo(batchInputTimelineEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multiple events Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseTimelineEventResponse</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<BatchResponseTimelineEventResponse> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfo(BatchInputTimelineEvent batchInputTimelineEvent, int operationIndex = 0)
        {
            // verify the required parameter 'batchInputTimelineEvent' is set
            if (batchInputTimelineEvent == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'batchInputTimelineEvent' when calling EventsApi->PostIntegratorsTimelineV3EventsBatchCreateCreateBatch");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputTimelineEvent;

            localVarRequestOptions.Operation = "EventsApi.PostIntegratorsTimelineV3EventsBatchCreateCreateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseTimelineEventResponse>("/crm/v3/timeline/events/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3EventsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates multiple events Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTimelineEventResponse</returns>
        public async System.Threading.Tasks.Task<BatchResponseTimelineEventResponse> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchAsync(BatchInputTimelineEvent batchInputTimelineEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<BatchResponseTimelineEventResponse> localVarResponse = await PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfoAsync(batchInputTimelineEvent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multiple events Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTimelineEventResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<BatchResponseTimelineEventResponse>> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputTimelineEvent batchInputTimelineEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputTimelineEvent' is set
            if (batchInputTimelineEvent == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'batchInputTimelineEvent' when calling EventsApi->PostIntegratorsTimelineV3EventsBatchCreateCreateBatch");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputTimelineEvent;

            localVarRequestOptions.Operation = "EventsApi.PostIntegratorsTimelineV3EventsBatchCreateCreateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseTimelineEventResponse>("/crm/v3/timeline/events/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3EventsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a single event Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventResponse</returns>
        public TimelineEventResponse PostIntegratorsTimelineV3EventsCreate(TimelineEvent timelineEvent, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventResponse> localVarResponse = PostIntegratorsTimelineV3EventsCreateWithHttpInfo(timelineEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a single event Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventResponse</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventResponse> PostIntegratorsTimelineV3EventsCreateWithHttpInfo(TimelineEvent timelineEvent, int operationIndex = 0)
        {
            // verify the required parameter 'timelineEvent' is set
            if (timelineEvent == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'timelineEvent' when calling EventsApi->PostIntegratorsTimelineV3EventsCreate");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timelineEvent;

            localVarRequestOptions.Operation = "EventsApi.PostIntegratorsTimelineV3EventsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TimelineEventResponse>("/crm/v3/timeline/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3EventsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a single event Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventResponse</returns>
        public async System.Threading.Tasks.Task<TimelineEventResponse> PostIntegratorsTimelineV3EventsCreateAsync(TimelineEvent timelineEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventResponse> localVarResponse = await PostIntegratorsTimelineV3EventsCreateWithHttpInfoAsync(timelineEvent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a single event Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventResponse>> PostIntegratorsTimelineV3EventsCreateWithHttpInfoAsync(TimelineEvent timelineEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timelineEvent' is set
            if (timelineEvent == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'timelineEvent' when calling EventsApi->PostIntegratorsTimelineV3EventsCreate");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timelineEvent;

            localVarRequestOptions.Operation = "EventsApi.PostIntegratorsTimelineV3EventsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TimelineEventResponse>("/crm/v3/timeline/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3EventsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
