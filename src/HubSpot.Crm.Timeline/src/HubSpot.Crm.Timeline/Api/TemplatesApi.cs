/*
 * Timeline events
 *
 * This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Crm.Timeline.Client;
using HubSpot.Crm.Timeline.Client.Auth;
using HubSpot.Crm.Timeline.Model;

namespace HubSpot.Crm.Timeline.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an event template for the app
        /// </summary>
        /// <remarks>
        /// This will delete the event template. All associated events will be removed from search results and the timeline UI.  This action can&#39;t be undone, so it&#39;s highly recommended that you stop using any associated events before deleting a template.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchive(string eventTemplateId, int appId, int operationIndex = 0);

        /// <summary>
        /// Deletes an event template for the app
        /// </summary>
        /// <remarks>
        /// This will delete the event template. All associated events will be removed from search results and the timeline UI.  This action can&#39;t be undone, so it&#39;s highly recommended that you stop using any associated events before deleting a template.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchiveWithHttpInfo(string eventTemplateId, int appId, int operationIndex = 0);
        /// <summary>
        /// Gets a specific event template for your app
        /// </summary>
        /// <remarks>
        /// View the current state of a specific template and its tokens.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventTemplate</returns>
        TimelineEventTemplate GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetById(string eventTemplateId, int appId, int operationIndex = 0);

        /// <summary>
        /// Gets a specific event template for your app
        /// </summary>
        /// <remarks>
        /// View the current state of a specific template and its tokens.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventTemplate</returns>
        ApiResponse<TimelineEventTemplate> GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetByIdWithHttpInfo(string eventTemplateId, int appId, int operationIndex = 0);
        /// <summary>
        /// List all event templates for your app
        /// </summary>
        /// <remarks>
        /// Use this to list all event templates owned by your app.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseTimelineEventTemplateNoPaging</returns>
        CollectionResponseTimelineEventTemplateNoPaging GetIntegratorsTimelineV3AppIdEventTemplatesGetAll(int appId, int operationIndex = 0);

        /// <summary>
        /// List all event templates for your app
        /// </summary>
        /// <remarks>
        /// Use this to list all event templates owned by your app.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseTimelineEventTemplateNoPaging</returns>
        ApiResponse<CollectionResponseTimelineEventTemplateNoPaging> GetIntegratorsTimelineV3AppIdEventTemplatesGetAllWithHttpInfo(int appId, int operationIndex = 0);
        /// <summary>
        /// Create an event template for your app
        /// </summary>
        /// <remarks>
        /// Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.  Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.  Each event template contains its own set of tokens and &#x60;Markdown&#x60; templates. These tokens can be associated with any CRM object properties via the &#x60;objectPropertyName&#x60; field to fully build out CRM objects.  You must create an event template before you can create events.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateCreateRequest">The new event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventTemplate</returns>
        TimelineEventTemplate PostIntegratorsTimelineV3AppIdEventTemplatesCreate(int appId, TimelineEventTemplateCreateRequest timelineEventTemplateCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create an event template for your app
        /// </summary>
        /// <remarks>
        /// Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.  Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.  Each event template contains its own set of tokens and &#x60;Markdown&#x60; templates. These tokens can be associated with any CRM object properties via the &#x60;objectPropertyName&#x60; field to fully build out CRM objects.  You must create an event template before you can create events.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateCreateRequest">The new event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventTemplate</returns>
        ApiResponse<TimelineEventTemplate> PostIntegratorsTimelineV3AppIdEventTemplatesCreateWithHttpInfo(int appId, TimelineEventTemplateCreateRequest timelineEventTemplateCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Update an existing event template
        /// </summary>
        /// <remarks>
        /// Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.  You can also update or replace all the tokens in the template here instead of doing individual API calls on the &#x60;/tokens&#x60; endpoint.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateUpdateRequest">The updated event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventTemplate</returns>
        TimelineEventTemplate PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate(string eventTemplateId, int appId, TimelineEventTemplateUpdateRequest timelineEventTemplateUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update an existing event template
        /// </summary>
        /// <remarks>
        /// Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.  You can also update or replace all the tokens in the template here instead of doing individual API calls on the &#x60;/tokens&#x60; endpoint.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateUpdateRequest">The updated event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventTemplate</returns>
        ApiResponse<TimelineEventTemplate> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdateWithHttpInfo(string eventTemplateId, int appId, TimelineEventTemplateUpdateRequest timelineEventTemplateUpdateRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an event template for the app
        /// </summary>
        /// <remarks>
        /// This will delete the event template. All associated events will be removed from search results and the timeline UI.  This action can&#39;t be undone, so it&#39;s highly recommended that you stop using any associated events before deleting a template.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchiveAsync(string eventTemplateId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an event template for the app
        /// </summary>
        /// <remarks>
        /// This will delete the event template. All associated events will be removed from search results and the timeline UI.  This action can&#39;t be undone, so it&#39;s highly recommended that you stop using any associated events before deleting a template.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchiveWithHttpInfoAsync(string eventTemplateId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a specific event template for your app
        /// </summary>
        /// <remarks>
        /// View the current state of a specific template and its tokens.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplate</returns>
        System.Threading.Tasks.Task<TimelineEventTemplate> GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetByIdAsync(string eventTemplateId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a specific event template for your app
        /// </summary>
        /// <remarks>
        /// View the current state of a specific template and its tokens.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventTemplate>> GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetByIdWithHttpInfoAsync(string eventTemplateId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all event templates for your app
        /// </summary>
        /// <remarks>
        /// Use this to list all event templates owned by your app.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseTimelineEventTemplateNoPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseTimelineEventTemplateNoPaging> GetIntegratorsTimelineV3AppIdEventTemplatesGetAllAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all event templates for your app
        /// </summary>
        /// <remarks>
        /// Use this to list all event templates owned by your app.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseTimelineEventTemplateNoPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseTimelineEventTemplateNoPaging>> GetIntegratorsTimelineV3AppIdEventTemplatesGetAllWithHttpInfoAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an event template for your app
        /// </summary>
        /// <remarks>
        /// Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.  Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.  Each event template contains its own set of tokens and &#x60;Markdown&#x60; templates. These tokens can be associated with any CRM object properties via the &#x60;objectPropertyName&#x60; field to fully build out CRM objects.  You must create an event template before you can create events.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateCreateRequest">The new event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplate</returns>
        System.Threading.Tasks.Task<TimelineEventTemplate> PostIntegratorsTimelineV3AppIdEventTemplatesCreateAsync(int appId, TimelineEventTemplateCreateRequest timelineEventTemplateCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an event template for your app
        /// </summary>
        /// <remarks>
        /// Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.  Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.  Each event template contains its own set of tokens and &#x60;Markdown&#x60; templates. These tokens can be associated with any CRM object properties via the &#x60;objectPropertyName&#x60; field to fully build out CRM objects.  You must create an event template before you can create events.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateCreateRequest">The new event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventTemplate>> PostIntegratorsTimelineV3AppIdEventTemplatesCreateWithHttpInfoAsync(int appId, TimelineEventTemplateCreateRequest timelineEventTemplateCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing event template
        /// </summary>
        /// <remarks>
        /// Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.  You can also update or replace all the tokens in the template here instead of doing individual API calls on the &#x60;/tokens&#x60; endpoint.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateUpdateRequest">The updated event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplate</returns>
        System.Threading.Tasks.Task<TimelineEventTemplate> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdateAsync(string eventTemplateId, int appId, TimelineEventTemplateUpdateRequest timelineEventTemplateUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing event template
        /// </summary>
        /// <remarks>
        /// Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.  You can also update or replace all the tokens in the template here instead of doing individual API calls on the &#x60;/tokens&#x60; endpoint.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateUpdateRequest">The updated event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventTemplate>> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdateWithHttpInfoAsync(string eventTemplateId, int appId, TimelineEventTemplateUpdateRequest timelineEventTemplateUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : ITemplatesApiSync, ITemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private HubSpot.Crm.Timeline.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(string basePath)
        {
            this.Configuration = HubSpot.Crm.Timeline.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Timeline.Client.GlobalConfiguration.Instance,
                new HubSpot.Crm.Timeline.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Crm.Timeline.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Timeline.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Crm.Timeline.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesApi(HubSpot.Crm.Timeline.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Crm.Timeline.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Timeline.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Crm.Timeline.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Timeline.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Crm.Timeline.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplatesApi(HubSpot.Crm.Timeline.Client.ISynchronousClient client, HubSpot.Crm.Timeline.Client.IAsynchronousClient asyncClient, HubSpot.Crm.Timeline.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Crm.Timeline.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Crm.Timeline.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Crm.Timeline.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Crm.Timeline.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Crm.Timeline.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes an event template for the app This will delete the event template. All associated events will be removed from search results and the timeline UI.  This action can&#39;t be undone, so it&#39;s highly recommended that you stop using any associated events before deleting a template.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchive(string eventTemplateId, int appId, int operationIndex = 0)
        {
            DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchiveWithHttpInfo(eventTemplateId, appId);
        }

        /// <summary>
        /// Deletes an event template for the app This will delete the event template. All associated events will be removed from search results and the timeline UI.  This action can&#39;t be undone, so it&#39;s highly recommended that you stop using any associated events before deleting a template.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<Object> DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchiveWithHttpInfo(string eventTemplateId, int appId, int operationIndex = 0)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TemplatesApi->DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchive");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an event template for the app This will delete the event template. All associated events will be removed from search results and the timeline UI.  This action can&#39;t be undone, so it&#39;s highly recommended that you stop using any associated events before deleting a template.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchiveAsync(string eventTemplateId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchiveWithHttpInfoAsync(eventTemplateId, appId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an event template for the app This will delete the event template. All associated events will be removed from search results and the timeline UI.  This action can&#39;t be undone, so it&#39;s highly recommended that you stop using any associated events before deleting a template.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<Object>> DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchiveWithHttpInfoAsync(string eventTemplateId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TemplatesApi->DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchive");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a specific event template for your app View the current state of a specific template and its tokens.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventTemplate</returns>
        public TimelineEventTemplate GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetById(string eventTemplateId, int appId, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> localVarResponse = GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetByIdWithHttpInfo(eventTemplateId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a specific event template for your app View the current state of a specific template and its tokens.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventTemplate</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetByIdWithHttpInfo(string eventTemplateId, int appId, int operationIndex = 0)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TemplatesApi->GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetById");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimelineEventTemplate>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a specific event template for your app View the current state of a specific template and its tokens.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplate</returns>
        public async System.Threading.Tasks.Task<TimelineEventTemplate> GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetByIdAsync(string eventTemplateId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> localVarResponse = await GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetByIdWithHttpInfoAsync(eventTemplateId, appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a specific event template for your app View the current state of a specific template and its tokens.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplate)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate>> GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetByIdWithHttpInfoAsync(string eventTemplateId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TemplatesApi->GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetById");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimelineEventTemplate>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all event templates for your app Use this to list all event templates owned by your app.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseTimelineEventTemplateNoPaging</returns>
        public CollectionResponseTimelineEventTemplateNoPaging GetIntegratorsTimelineV3AppIdEventTemplatesGetAll(int appId, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<CollectionResponseTimelineEventTemplateNoPaging> localVarResponse = GetIntegratorsTimelineV3AppIdEventTemplatesGetAllWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all event templates for your app Use this to list all event templates owned by your app.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseTimelineEventTemplateNoPaging</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<CollectionResponseTimelineEventTemplateNoPaging> GetIntegratorsTimelineV3AppIdEventTemplatesGetAllWithHttpInfo(int appId, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.GetIntegratorsTimelineV3AppIdEventTemplatesGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseTimelineEventTemplateNoPaging>("/crm/v3/timeline/{appId}/event-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3AppIdEventTemplatesGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all event templates for your app Use this to list all event templates owned by your app.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseTimelineEventTemplateNoPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseTimelineEventTemplateNoPaging> GetIntegratorsTimelineV3AppIdEventTemplatesGetAllAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<CollectionResponseTimelineEventTemplateNoPaging> localVarResponse = await GetIntegratorsTimelineV3AppIdEventTemplatesGetAllWithHttpInfoAsync(appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all event templates for your app Use this to list all event templates owned by your app.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseTimelineEventTemplateNoPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<CollectionResponseTimelineEventTemplateNoPaging>> GetIntegratorsTimelineV3AppIdEventTemplatesGetAllWithHttpInfoAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.GetIntegratorsTimelineV3AppIdEventTemplatesGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseTimelineEventTemplateNoPaging>("/crm/v3/timeline/{appId}/event-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3AppIdEventTemplatesGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an event template for your app Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.  Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.  Each event template contains its own set of tokens and &#x60;Markdown&#x60; templates. These tokens can be associated with any CRM object properties via the &#x60;objectPropertyName&#x60; field to fully build out CRM objects.  You must create an event template before you can create events.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateCreateRequest">The new event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventTemplate</returns>
        public TimelineEventTemplate PostIntegratorsTimelineV3AppIdEventTemplatesCreate(int appId, TimelineEventTemplateCreateRequest timelineEventTemplateCreateRequest, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> localVarResponse = PostIntegratorsTimelineV3AppIdEventTemplatesCreateWithHttpInfo(appId, timelineEventTemplateCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an event template for your app Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.  Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.  Each event template contains its own set of tokens and &#x60;Markdown&#x60; templates. These tokens can be associated with any CRM object properties via the &#x60;objectPropertyName&#x60; field to fully build out CRM objects.  You must create an event template before you can create events.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateCreateRequest">The new event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventTemplate</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> PostIntegratorsTimelineV3AppIdEventTemplatesCreateWithHttpInfo(int appId, TimelineEventTemplateCreateRequest timelineEventTemplateCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'timelineEventTemplateCreateRequest' is set
            if (timelineEventTemplateCreateRequest == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'timelineEventTemplateCreateRequest' when calling TemplatesApi->PostIntegratorsTimelineV3AppIdEventTemplatesCreate");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = timelineEventTemplateCreateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.PostIntegratorsTimelineV3AppIdEventTemplatesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TimelineEventTemplate>("/crm/v3/timeline/{appId}/event-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3AppIdEventTemplatesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an event template for your app Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.  Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.  Each event template contains its own set of tokens and &#x60;Markdown&#x60; templates. These tokens can be associated with any CRM object properties via the &#x60;objectPropertyName&#x60; field to fully build out CRM objects.  You must create an event template before you can create events.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateCreateRequest">The new event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplate</returns>
        public async System.Threading.Tasks.Task<TimelineEventTemplate> PostIntegratorsTimelineV3AppIdEventTemplatesCreateAsync(int appId, TimelineEventTemplateCreateRequest timelineEventTemplateCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> localVarResponse = await PostIntegratorsTimelineV3AppIdEventTemplatesCreateWithHttpInfoAsync(appId, timelineEventTemplateCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an event template for your app Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.  Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.  Each event template contains its own set of tokens and &#x60;Markdown&#x60; templates. These tokens can be associated with any CRM object properties via the &#x60;objectPropertyName&#x60; field to fully build out CRM objects.  You must create an event template before you can create events.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateCreateRequest">The new event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplate)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate>> PostIntegratorsTimelineV3AppIdEventTemplatesCreateWithHttpInfoAsync(int appId, TimelineEventTemplateCreateRequest timelineEventTemplateCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timelineEventTemplateCreateRequest' is set
            if (timelineEventTemplateCreateRequest == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'timelineEventTemplateCreateRequest' when calling TemplatesApi->PostIntegratorsTimelineV3AppIdEventTemplatesCreate");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = timelineEventTemplateCreateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.PostIntegratorsTimelineV3AppIdEventTemplatesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TimelineEventTemplate>("/crm/v3/timeline/{appId}/event-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3AppIdEventTemplatesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing event template Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.  You can also update or replace all the tokens in the template here instead of doing individual API calls on the &#x60;/tokens&#x60; endpoint.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateUpdateRequest">The updated event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimelineEventTemplate</returns>
        public TimelineEventTemplate PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate(string eventTemplateId, int appId, TimelineEventTemplateUpdateRequest timelineEventTemplateUpdateRequest, int operationIndex = 0)
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> localVarResponse = PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdateWithHttpInfo(eventTemplateId, appId, timelineEventTemplateUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing event template Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.  You can also update or replace all the tokens in the template here instead of doing individual API calls on the &#x60;/tokens&#x60; endpoint.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateUpdateRequest">The updated event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimelineEventTemplate</returns>
        public HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdateWithHttpInfo(string eventTemplateId, int appId, TimelineEventTemplateUpdateRequest timelineEventTemplateUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TemplatesApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate");
            }

            // verify the required parameter 'timelineEventTemplateUpdateRequest' is set
            if (timelineEventTemplateUpdateRequest == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'timelineEventTemplateUpdateRequest' when calling TemplatesApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate");
            }

            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = timelineEventTemplateUpdateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TimelineEventTemplate>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing event template Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.  You can also update or replace all the tokens in the template here instead of doing individual API calls on the &#x60;/tokens&#x60; endpoint.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateUpdateRequest">The updated event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplate</returns>
        public async System.Threading.Tasks.Task<TimelineEventTemplate> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdateAsync(string eventTemplateId, int appId, TimelineEventTemplateUpdateRequest timelineEventTemplateUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate> localVarResponse = await PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdateWithHttpInfoAsync(eventTemplateId, appId, timelineEventTemplateUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing event template Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.  You can also update or replace all the tokens in the template here instead of doing individual API calls on the &#x60;/tokens&#x60; endpoint.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Timeline.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateUpdateRequest">The updated event template definition.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplate)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Timeline.Client.ApiResponse<TimelineEventTemplate>> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdateWithHttpInfoAsync(string eventTemplateId, int appId, TimelineEventTemplateUpdateRequest timelineEventTemplateUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TemplatesApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate");
            }

            // verify the required parameter 'timelineEventTemplateUpdateRequest' is set
            if (timelineEventTemplateUpdateRequest == null)
            {
                throw new HubSpot.Crm.Timeline.Client.ApiException(400, "Missing required parameter 'timelineEventTemplateUpdateRequest' when calling TemplatesApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate");
            }


            HubSpot.Crm.Timeline.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Timeline.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Timeline.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = timelineEventTemplateUpdateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Timeline.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TimelineEventTemplate>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
