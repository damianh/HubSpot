/*
 * Timeline events
 *
 * This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Crm.Timeline.Client.OpenAPIDateConverter;

namespace HubSpot.Crm.Timeline.Model
{
    /// <summary>
    /// Used to create timeline events in batches.
    /// </summary>
    [DataContract(Name = "BatchInputTimelineEvent")]
    public partial class BatchInputTimelineEvent : IEquatable<BatchInputTimelineEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchInputTimelineEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchInputTimelineEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchInputTimelineEvent" /> class.
        /// </summary>
        /// <param name="inputs">A collection of timeline events we want to create. (required).</param>
        public BatchInputTimelineEvent(List<TimelineEvent> inputs = default(List<TimelineEvent>))
        {
            // to ensure "inputs" is required (not null)
            if (inputs == null)
            {
                throw new ArgumentNullException("inputs is a required property for BatchInputTimelineEvent and cannot be null");
            }
            this.Inputs = inputs;
        }

        /// <summary>
        /// A collection of timeline events we want to create.
        /// </summary>
        /// <value>A collection of timeline events we want to create.</value>
        [DataMember(Name = "inputs", IsRequired = true, EmitDefaultValue = true)]
        public List<TimelineEvent> Inputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchInputTimelineEvent {\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchInputTimelineEvent);
        }

        /// <summary>
        /// Returns true if BatchInputTimelineEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchInputTimelineEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchInputTimelineEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inputs != null)
                {
                    hashCode = (hashCode * 59) + this.Inputs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
