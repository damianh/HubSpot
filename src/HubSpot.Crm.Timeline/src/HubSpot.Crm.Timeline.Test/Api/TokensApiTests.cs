/*
 * Timeline events
 *
 * This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.Crm.Timeline.Client;
using HubSpot.Crm.Timeline.Api;
// uncomment below to import models
//using HubSpot.Crm.Timeline.Model;

namespace HubSpot.Crm.Timeline.Test.Api
{
    /// <summary>
    ///  Class for testing TokensApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TokensApiTests : IDisposable
    {
        private TokensApi instance;

        public TokensApiTests()
        {
            instance = new TokensApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TokensApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TokensApi
            //Assert.IsType<TokensApi>(instance);
        }

        /// <summary>
        /// Test DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive
        /// </summary>
        [Fact]
        public void DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventTemplateId = null;
            //string tokenName = null;
            //int appId = null;
            //instance.DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive(eventTemplateId, tokenName, appId);
        }

        /// <summary>
        /// Test PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate
        /// </summary>
        [Fact]
        public void PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventTemplateId = null;
            //int appId = null;
            //TimelineEventTemplateToken timelineEventTemplateToken = null;
            //var response = instance.PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate(eventTemplateId, appId, timelineEventTemplateToken);
            //Assert.IsType<TimelineEventTemplateToken>(response);
        }

        /// <summary>
        /// Test PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate
        /// </summary>
        [Fact]
        public void PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventTemplateId = null;
            //string tokenName = null;
            //int appId = null;
            //TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest = null;
            //var response = instance.PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate(eventTemplateId, tokenName, appId, timelineEventTemplateTokenUpdateRequest);
            //Assert.IsType<TimelineEventTemplateToken>(response);
        }
    }
}
