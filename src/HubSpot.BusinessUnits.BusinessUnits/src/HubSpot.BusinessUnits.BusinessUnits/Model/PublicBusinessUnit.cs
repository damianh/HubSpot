/*
 * Business Unit
 *
 * Retrieve Business Unit information.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.BusinessUnits.BusinessUnits.Client.OpenAPIDateConverter;

namespace HubSpot.BusinessUnits.BusinessUnits.Model
{
    /// <summary>
    /// A Business Unit
    /// </summary>
    [DataContract(Name = "PublicBusinessUnit")]
    public partial class PublicBusinessUnit : IEquatable<PublicBusinessUnit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicBusinessUnit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicBusinessUnit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicBusinessUnit" /> class.
        /// </summary>
        /// <param name="id">The Business Unit&#39;s unique ID (required).</param>
        /// <param name="name">The Business Unit&#39;s name (required).</param>
        /// <param name="logoMetadata">logoMetadata.</param>
        public PublicBusinessUnit(string id = default(string), string name = default(string), PublicBusinessUnitLogoMetadata logoMetadata = default(PublicBusinessUnitLogoMetadata))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PublicBusinessUnit and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PublicBusinessUnit and cannot be null");
            }
            this.Name = name;
            this.LogoMetadata = logoMetadata;
        }

        /// <summary>
        /// The Business Unit&#39;s unique ID
        /// </summary>
        /// <value>The Business Unit&#39;s unique ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The Business Unit&#39;s name
        /// </summary>
        /// <value>The Business Unit&#39;s name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LogoMetadata
        /// </summary>
        [DataMember(Name = "logoMetadata", EmitDefaultValue = false)]
        public PublicBusinessUnitLogoMetadata LogoMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicBusinessUnit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LogoMetadata: ").Append(LogoMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicBusinessUnit);
        }

        /// <summary>
        /// Returns true if PublicBusinessUnit instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicBusinessUnit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicBusinessUnit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LogoMetadata == input.LogoMetadata ||
                    (this.LogoMetadata != null &&
                    this.LogoMetadata.Equals(input.LogoMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.LogoMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.LogoMetadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
