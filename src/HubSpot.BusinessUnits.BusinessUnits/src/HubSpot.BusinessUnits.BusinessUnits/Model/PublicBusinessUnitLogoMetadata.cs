/*
 * Business Unit
 *
 * Retrieve Business Unit information.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.BusinessUnits.BusinessUnits.Client.OpenAPIDateConverter;

namespace HubSpot.BusinessUnits.BusinessUnits.Model
{
    /// <summary>
    /// A Business Unit&#39;s logo metadata
    /// </summary>
    [DataContract(Name = "PublicBusinessUnitLogoMetadata")]
    public partial class PublicBusinessUnitLogoMetadata : IEquatable<PublicBusinessUnitLogoMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicBusinessUnitLogoMetadata" /> class.
        /// </summary>
        /// <param name="logoUrl">The logo&#39;s url.</param>
        /// <param name="logoAltText">The logo&#39;s alt text.</param>
        /// <param name="resizedUrl">The logo&#39;s resized url.</param>
        public PublicBusinessUnitLogoMetadata(string logoUrl = default(string), string logoAltText = default(string), string resizedUrl = default(string))
        {
            this.LogoUrl = logoUrl;
            this.LogoAltText = logoAltText;
            this.ResizedUrl = resizedUrl;
        }

        /// <summary>
        /// The logo&#39;s url
        /// </summary>
        /// <value>The logo&#39;s url</value>
        [DataMember(Name = "logoUrl", EmitDefaultValue = false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// The logo&#39;s alt text
        /// </summary>
        /// <value>The logo&#39;s alt text</value>
        [DataMember(Name = "logoAltText", EmitDefaultValue = false)]
        public string LogoAltText { get; set; }

        /// <summary>
        /// The logo&#39;s resized url
        /// </summary>
        /// <value>The logo&#39;s resized url</value>
        [DataMember(Name = "resizedUrl", EmitDefaultValue = false)]
        public string ResizedUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicBusinessUnitLogoMetadata {\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  LogoAltText: ").Append(LogoAltText).Append("\n");
            sb.Append("  ResizedUrl: ").Append(ResizedUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicBusinessUnitLogoMetadata);
        }

        /// <summary>
        /// Returns true if PublicBusinessUnitLogoMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicBusinessUnitLogoMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicBusinessUnitLogoMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.LogoAltText == input.LogoAltText ||
                    (this.LogoAltText != null &&
                    this.LogoAltText.Equals(input.LogoAltText))
                ) && 
                (
                    this.ResizedUrl == input.ResizedUrl ||
                    (this.ResizedUrl != null &&
                    this.ResizedUrl.Equals(input.ResizedUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.LogoAltText != null)
                {
                    hashCode = (hashCode * 59) + this.LogoAltText.GetHashCode();
                }
                if (this.ResizedUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ResizedUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
