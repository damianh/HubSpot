/*
 * CMS Audit Logs
 *
 * Use this endpoint to query audit logs of CMS changes that occurred on your HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Cms.AuditLogs.Client;
using HubSpot.Cms.AuditLogs.Client.Auth;
using HubSpot.Cms.AuditLogs.Model;

namespace HubSpot.Cms.AuditLogs.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Query audit logs
        /// </summary>
        /// <remarks>
        /// Returns audit logs based on filters.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.AuditLogs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Comma separated list of object ids to filter by. (optional)</param>
        /// <param name="userId">Comma separated list of user ids to filter by. (optional)</param>
        /// <param name="after">Timestamp after which audit logs will be returned (optional)</param>
        /// <param name="before">Timestamp before which audit logs will be returned (optional)</param>
        /// <param name="sort">The sort direction for the audit logs. (Can only sort by timestamp). (optional)</param>
        /// <param name="eventType">Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). (optional)</param>
        /// <param name="limit">The number of logs to return. (optional)</param>
        /// <param name="objectType">Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponsePublicAuditLog</returns>
        CollectionResponsePublicAuditLog GetCmsV3AuditLogsGetPage(List<string> objectId = default(List<string>), List<string> userId = default(List<string>), string after = default(string), string before = default(string), List<string> sort = default(List<string>), List<string> eventType = default(List<string>), int? limit = default(int?), List<string> objectType = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// Query audit logs
        /// </summary>
        /// <remarks>
        /// Returns audit logs based on filters.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.AuditLogs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Comma separated list of object ids to filter by. (optional)</param>
        /// <param name="userId">Comma separated list of user ids to filter by. (optional)</param>
        /// <param name="after">Timestamp after which audit logs will be returned (optional)</param>
        /// <param name="before">Timestamp before which audit logs will be returned (optional)</param>
        /// <param name="sort">The sort direction for the audit logs. (Can only sort by timestamp). (optional)</param>
        /// <param name="eventType">Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). (optional)</param>
        /// <param name="limit">The number of logs to return. (optional)</param>
        /// <param name="objectType">Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponsePublicAuditLog</returns>
        ApiResponse<CollectionResponsePublicAuditLog> GetCmsV3AuditLogsGetPageWithHttpInfo(List<string> objectId = default(List<string>), List<string> userId = default(List<string>), string after = default(string), string before = default(string), List<string> sort = default(List<string>), List<string> eventType = default(List<string>), int? limit = default(int?), List<string> objectType = default(List<string>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Query audit logs
        /// </summary>
        /// <remarks>
        /// Returns audit logs based on filters.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.AuditLogs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Comma separated list of object ids to filter by. (optional)</param>
        /// <param name="userId">Comma separated list of user ids to filter by. (optional)</param>
        /// <param name="after">Timestamp after which audit logs will be returned (optional)</param>
        /// <param name="before">Timestamp before which audit logs will be returned (optional)</param>
        /// <param name="sort">The sort direction for the audit logs. (Can only sort by timestamp). (optional)</param>
        /// <param name="eventType">Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). (optional)</param>
        /// <param name="limit">The number of logs to return. (optional)</param>
        /// <param name="objectType">Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePublicAuditLog</returns>
        System.Threading.Tasks.Task<CollectionResponsePublicAuditLog> GetCmsV3AuditLogsGetPageAsync(List<string> objectId = default(List<string>), List<string> userId = default(List<string>), string after = default(string), string before = default(string), List<string> sort = default(List<string>), List<string> eventType = default(List<string>), int? limit = default(int?), List<string> objectType = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query audit logs
        /// </summary>
        /// <remarks>
        /// Returns audit logs based on filters.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.AuditLogs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Comma separated list of object ids to filter by. (optional)</param>
        /// <param name="userId">Comma separated list of user ids to filter by. (optional)</param>
        /// <param name="after">Timestamp after which audit logs will be returned (optional)</param>
        /// <param name="before">Timestamp before which audit logs will be returned (optional)</param>
        /// <param name="sort">The sort direction for the audit logs. (Can only sort by timestamp). (optional)</param>
        /// <param name="eventType">Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). (optional)</param>
        /// <param name="limit">The number of logs to return. (optional)</param>
        /// <param name="objectType">Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePublicAuditLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponsePublicAuditLog>> GetCmsV3AuditLogsGetPageWithHttpInfoAsync(List<string> objectId = default(List<string>), List<string> userId = default(List<string>), string after = default(string), string before = default(string), List<string> sort = default(List<string>), List<string> eventType = default(List<string>), int? limit = default(int?), List<string> objectType = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogsApi : IAuditLogsApiSync, IAuditLogsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditLogsApi : IAuditLogsApi
    {
        private HubSpot.Cms.AuditLogs.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogsApi(string basePath)
        {
            this.Configuration = HubSpot.Cms.AuditLogs.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.AuditLogs.Client.GlobalConfiguration.Instance,
                new HubSpot.Cms.AuditLogs.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Cms.AuditLogs.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.AuditLogs.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Cms.AuditLogs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditLogsApi(HubSpot.Cms.AuditLogs.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Cms.AuditLogs.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.AuditLogs.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Cms.AuditLogs.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.AuditLogs.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Cms.AuditLogs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuditLogsApi(HubSpot.Cms.AuditLogs.Client.ISynchronousClient client, HubSpot.Cms.AuditLogs.Client.IAsynchronousClient asyncClient, HubSpot.Cms.AuditLogs.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Cms.AuditLogs.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Cms.AuditLogs.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Cms.AuditLogs.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Cms.AuditLogs.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Cms.AuditLogs.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Query audit logs Returns audit logs based on filters.
        /// </summary>
        /// <exception cref="HubSpot.Cms.AuditLogs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Comma separated list of object ids to filter by. (optional)</param>
        /// <param name="userId">Comma separated list of user ids to filter by. (optional)</param>
        /// <param name="after">Timestamp after which audit logs will be returned (optional)</param>
        /// <param name="before">Timestamp before which audit logs will be returned (optional)</param>
        /// <param name="sort">The sort direction for the audit logs. (Can only sort by timestamp). (optional)</param>
        /// <param name="eventType">Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). (optional)</param>
        /// <param name="limit">The number of logs to return. (optional)</param>
        /// <param name="objectType">Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponsePublicAuditLog</returns>
        public CollectionResponsePublicAuditLog GetCmsV3AuditLogsGetPage(List<string> objectId = default(List<string>), List<string> userId = default(List<string>), string after = default(string), string before = default(string), List<string> sort = default(List<string>), List<string> eventType = default(List<string>), int? limit = default(int?), List<string> objectType = default(List<string>), int operationIndex = 0)
        {
            HubSpot.Cms.AuditLogs.Client.ApiResponse<CollectionResponsePublicAuditLog> localVarResponse = GetCmsV3AuditLogsGetPageWithHttpInfo(objectId, userId, after, before, sort, eventType, limit, objectType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query audit logs Returns audit logs based on filters.
        /// </summary>
        /// <exception cref="HubSpot.Cms.AuditLogs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Comma separated list of object ids to filter by. (optional)</param>
        /// <param name="userId">Comma separated list of user ids to filter by. (optional)</param>
        /// <param name="after">Timestamp after which audit logs will be returned (optional)</param>
        /// <param name="before">Timestamp before which audit logs will be returned (optional)</param>
        /// <param name="sort">The sort direction for the audit logs. (Can only sort by timestamp). (optional)</param>
        /// <param name="eventType">Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). (optional)</param>
        /// <param name="limit">The number of logs to return. (optional)</param>
        /// <param name="objectType">Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponsePublicAuditLog</returns>
        public HubSpot.Cms.AuditLogs.Client.ApiResponse<CollectionResponsePublicAuditLog> GetCmsV3AuditLogsGetPageWithHttpInfo(List<string> objectId = default(List<string>), List<string> userId = default(List<string>), string after = default(string), string before = default(string), List<string> sort = default(List<string>), List<string> eventType = default(List<string>), int? limit = default(int?), List<string> objectType = default(List<string>), int operationIndex = 0)
        {
            HubSpot.Cms.AuditLogs.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.AuditLogs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.AuditLogs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.AuditLogs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "objectId", objectId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "userId", userId));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "eventType", eventType));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (objectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "objectType", objectType));
            }

            localVarRequestOptions.Operation = "AuditLogsApi.GetCmsV3AuditLogsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponsePublicAuditLog>("/cms/v3/audit-logs/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3AuditLogsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query audit logs Returns audit logs based on filters.
        /// </summary>
        /// <exception cref="HubSpot.Cms.AuditLogs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Comma separated list of object ids to filter by. (optional)</param>
        /// <param name="userId">Comma separated list of user ids to filter by. (optional)</param>
        /// <param name="after">Timestamp after which audit logs will be returned (optional)</param>
        /// <param name="before">Timestamp before which audit logs will be returned (optional)</param>
        /// <param name="sort">The sort direction for the audit logs. (Can only sort by timestamp). (optional)</param>
        /// <param name="eventType">Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). (optional)</param>
        /// <param name="limit">The number of logs to return. (optional)</param>
        /// <param name="objectType">Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePublicAuditLog</returns>
        public async System.Threading.Tasks.Task<CollectionResponsePublicAuditLog> GetCmsV3AuditLogsGetPageAsync(List<string> objectId = default(List<string>), List<string> userId = default(List<string>), string after = default(string), string before = default(string), List<string> sort = default(List<string>), List<string> eventType = default(List<string>), int? limit = default(int?), List<string> objectType = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.AuditLogs.Client.ApiResponse<CollectionResponsePublicAuditLog> localVarResponse = await GetCmsV3AuditLogsGetPageWithHttpInfoAsync(objectId, userId, after, before, sort, eventType, limit, objectType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query audit logs Returns audit logs based on filters.
        /// </summary>
        /// <exception cref="HubSpot.Cms.AuditLogs.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Comma separated list of object ids to filter by. (optional)</param>
        /// <param name="userId">Comma separated list of user ids to filter by. (optional)</param>
        /// <param name="after">Timestamp after which audit logs will be returned (optional)</param>
        /// <param name="before">Timestamp before which audit logs will be returned (optional)</param>
        /// <param name="sort">The sort direction for the audit logs. (Can only sort by timestamp). (optional)</param>
        /// <param name="eventType">Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). (optional)</param>
        /// <param name="limit">The number of logs to return. (optional)</param>
        /// <param name="objectType">Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePublicAuditLog)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.AuditLogs.Client.ApiResponse<CollectionResponsePublicAuditLog>> GetCmsV3AuditLogsGetPageWithHttpInfoAsync(List<string> objectId = default(List<string>), List<string> userId = default(List<string>), string after = default(string), string before = default(string), List<string> sort = default(List<string>), List<string> eventType = default(List<string>), int? limit = default(int?), List<string> objectType = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Cms.AuditLogs.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.AuditLogs.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.AuditLogs.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.AuditLogs.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "objectId", objectId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "userId", userId));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "eventType", eventType));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (objectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("multi", "objectType", objectType));
            }

            localVarRequestOptions.Operation = "AuditLogsApi.GetCmsV3AuditLogsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.AuditLogs.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponsePublicAuditLog>("/cms/v3/audit-logs/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3AuditLogsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
