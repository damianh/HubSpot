/*
 * Subscriptions
 *
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.CommunicationPreferences.CommunicationsStatus.Client;
using HubSpot.CommunicationPreferences.CommunicationsStatus.Api;
// uncomment below to import models
//using HubSpot.CommunicationPreferences.CommunicationsStatus.Model;

namespace HubSpot.CommunicationPreferences.CommunicationsStatus.Test.Api
{
    /// <summary>
    ///  Class for testing StatusApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class StatusApiTests : IDisposable
    {
        private StatusApi instance;

        public StatusApiTests()
        {
            instance = new StatusApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of StatusApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' StatusApi
            //Assert.IsType<StatusApi>(instance);
        }

        /// <summary>
        /// Test GetCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatus
        /// </summary>
        [Fact]
        public void GetCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailAddress = null;
            //var response = instance.GetCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatus(emailAddress);
            //Assert.IsType<PublicSubscriptionStatusesResponse>(response);
        }

        /// <summary>
        /// Test PostCommunicationPreferencesV3SubscribeSubscribe
        /// </summary>
        [Fact]
        public void PostCommunicationPreferencesV3SubscribeSubscribeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest = null;
            //var response = instance.PostCommunicationPreferencesV3SubscribeSubscribe(publicUpdateSubscriptionStatusRequest);
            //Assert.IsType<PublicSubscriptionStatus>(response);
        }

        /// <summary>
        /// Test PostCommunicationPreferencesV3UnsubscribeUnsubscribe
        /// </summary>
        [Fact]
        public void PostCommunicationPreferencesV3UnsubscribeUnsubscribeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest = null;
            //var response = instance.PostCommunicationPreferencesV3UnsubscribeUnsubscribe(publicUpdateSubscriptionStatusRequest);
            //Assert.IsType<PublicSubscriptionStatus>(response);
        }
    }
}
