/*
 * Properties
 *
 * All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Crm.Properties.Client.OpenAPIDateConverter;

namespace HubSpot.Crm.Properties.Model
{
    /// <summary>
    /// BatchReadInputPropertyName
    /// </summary>
    [DataContract(Name = "BatchReadInputPropertyName")]
    public partial class BatchReadInputPropertyName : IEquatable<BatchReadInputPropertyName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchReadInputPropertyName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchReadInputPropertyName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchReadInputPropertyName" /> class.
        /// </summary>
        /// <param name="archived">archived (required).</param>
        /// <param name="inputs">inputs (required).</param>
        public BatchReadInputPropertyName(bool archived = default(bool), List<PropertyName> inputs = default(List<PropertyName>))
        {
            this.Archived = archived;
            // to ensure "inputs" is required (not null)
            if (inputs == null)
            {
                throw new ArgumentNullException("inputs is a required property for BatchReadInputPropertyName and cannot be null");
            }
            this.Inputs = inputs;
        }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name = "archived", IsRequired = true, EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", IsRequired = true, EmitDefaultValue = true)]
        public List<PropertyName> Inputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchReadInputPropertyName {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchReadInputPropertyName);
        }

        /// <summary>
        /// Returns true if BatchReadInputPropertyName instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchReadInputPropertyName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchReadInputPropertyName input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Archived == input.Archived ||
                    this.Archived.Equals(input.Archived)
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Archived.GetHashCode();
                if (this.Inputs != null)
                {
                    hashCode = (hashCode * 59) + this.Inputs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
