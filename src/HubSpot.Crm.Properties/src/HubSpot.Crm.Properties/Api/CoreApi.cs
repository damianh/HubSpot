/*
 * Properties
 *
 * All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Crm.Properties.Client;
using HubSpot.Crm.Properties.Client.Auth;
using HubSpot.Crm.Properties.Model;

namespace HubSpot.Crm.Properties.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a property
        /// </summary>
        /// <remarks>
        /// Move a property identified by {propertyName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCrmV3PropertiesObjectTypePropertyNameArchive(string objectType, string propertyName, int operationIndex = 0);

        /// <summary>
        /// Archive a property
        /// </summary>
        /// <remarks>
        /// Move a property identified by {propertyName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfo(string objectType, string propertyName, int operationIndex = 0);
        /// <summary>
        /// Read all properties
        /// </summary>
        /// <remarks>
        /// Read all existing properties for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponsePropertyNoPaging</returns>
        CollectionResponsePropertyNoPaging GetCrmV3PropertiesObjectTypeGetAll(string objectType, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0);

        /// <summary>
        /// Read all properties
        /// </summary>
        /// <remarks>
        /// Read all existing properties for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponsePropertyNoPaging</returns>
        ApiResponse<CollectionResponsePropertyNoPaging> GetCrmV3PropertiesObjectTypeGetAllWithHttpInfo(string objectType, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0);
        /// <summary>
        /// Read a property
        /// </summary>
        /// <remarks>
        /// Read a property identified by {propertyName}.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Property</returns>
        Property GetCrmV3PropertiesObjectTypePropertyNameGetByName(string objectType, string propertyName, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0);

        /// <summary>
        /// Read a property
        /// </summary>
        /// <remarks>
        /// Read a property identified by {propertyName}.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Property</returns>
        ApiResponse<Property> GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfo(string objectType, string propertyName, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0);
        /// <summary>
        /// Update a property
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Property</returns>
        Property PatchCrmV3PropertiesObjectTypePropertyNameUpdate(string objectType, string propertyName, PropertyUpdate propertyUpdate, int operationIndex = 0);

        /// <summary>
        /// Update a property
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Property</returns>
        ApiResponse<Property> PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfo(string objectType, string propertyName, PropertyUpdate propertyUpdate, int operationIndex = 0);
        /// <summary>
        /// Create a property
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property for the specified object type.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Property</returns>
        Property PostCrmV3PropertiesObjectTypeCreate(string objectType, PropertyCreate propertyCreate, int operationIndex = 0);

        /// <summary>
        /// Create a property
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property for the specified object type.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Property</returns>
        ApiResponse<Property> PostCrmV3PropertiesObjectTypeCreateWithHttpInfo(string objectType, PropertyCreate propertyCreate, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive a property
        /// </summary>
        /// <remarks>
        /// Move a property identified by {propertyName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3PropertiesObjectTypePropertyNameArchiveAsync(string objectType, string propertyName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a property
        /// </summary>
        /// <remarks>
        /// Move a property identified by {propertyName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfoAsync(string objectType, string propertyName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read all properties
        /// </summary>
        /// <remarks>
        /// Read all existing properties for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePropertyNoPaging</returns>
        System.Threading.Tasks.Task<CollectionResponsePropertyNoPaging> GetCrmV3PropertiesObjectTypeGetAllAsync(string objectType, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read all properties
        /// </summary>
        /// <remarks>
        /// Read all existing properties for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePropertyNoPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponsePropertyNoPaging>> GetCrmV3PropertiesObjectTypeGetAllWithHttpInfoAsync(string objectType, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a property
        /// </summary>
        /// <remarks>
        /// Read a property identified by {propertyName}.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Property</returns>
        System.Threading.Tasks.Task<Property> GetCrmV3PropertiesObjectTypePropertyNameGetByNameAsync(string objectType, string propertyName, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a property
        /// </summary>
        /// <remarks>
        /// Read a property identified by {propertyName}.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Property)</returns>
        System.Threading.Tasks.Task<ApiResponse<Property>> GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfoAsync(string objectType, string propertyName, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a property
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Property</returns>
        System.Threading.Tasks.Task<Property> PatchCrmV3PropertiesObjectTypePropertyNameUpdateAsync(string objectType, string propertyName, PropertyUpdate propertyUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a property
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Property)</returns>
        System.Threading.Tasks.Task<ApiResponse<Property>> PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfoAsync(string objectType, string propertyName, PropertyUpdate propertyUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a property
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property for the specified object type.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Property</returns>
        System.Threading.Tasks.Task<Property> PostCrmV3PropertiesObjectTypeCreateAsync(string objectType, PropertyCreate propertyCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a property
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property for the specified object type.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Property)</returns>
        System.Threading.Tasks.Task<ApiResponse<Property>> PostCrmV3PropertiesObjectTypeCreateWithHttpInfoAsync(string objectType, PropertyCreate propertyCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApi : ICoreApiSync, ICoreApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CoreApi : ICoreApi
    {
        private HubSpot.Crm.Properties.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi(string basePath)
        {
            this.Configuration = HubSpot.Crm.Properties.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Properties.Client.GlobalConfiguration.Instance,
                new HubSpot.Crm.Properties.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Crm.Properties.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Properties.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Crm.Properties.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CoreApi(HubSpot.Crm.Properties.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Crm.Properties.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Properties.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Crm.Properties.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Properties.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Crm.Properties.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CoreApi(HubSpot.Crm.Properties.Client.ISynchronousClient client, HubSpot.Crm.Properties.Client.IAsynchronousClient asyncClient, HubSpot.Crm.Properties.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Crm.Properties.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Crm.Properties.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Crm.Properties.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Crm.Properties.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Crm.Properties.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive a property Move a property identified by {propertyName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCrmV3PropertiesObjectTypePropertyNameArchive(string objectType, string propertyName, int operationIndex = 0)
        {
            DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfo(objectType, propertyName);
        }

        /// <summary>
        /// Archive a property Move a property identified by {propertyName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Crm.Properties.Client.ApiResponse<Object> DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfo(string objectType, string propertyName, int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmV3PropertiesObjectTypePropertyNameArchive");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->DeleteCrmV3PropertiesObjectTypePropertyNameArchive");
            }

            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(propertyName)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.DeleteCrmV3PropertiesObjectTypePropertyNameArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PropertiesObjectTypePropertyNameArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a property Move a property identified by {propertyName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3PropertiesObjectTypePropertyNameArchiveAsync(string objectType, string propertyName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfoAsync(objectType, propertyName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a property Move a property identified by {propertyName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Properties.Client.ApiResponse<Object>> DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfoAsync(string objectType, string propertyName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmV3PropertiesObjectTypePropertyNameArchive");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->DeleteCrmV3PropertiesObjectTypePropertyNameArchive");
            }


            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(propertyName)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.DeleteCrmV3PropertiesObjectTypePropertyNameArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PropertiesObjectTypePropertyNameArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read all properties Read all existing properties for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponsePropertyNoPaging</returns>
        public CollectionResponsePropertyNoPaging GetCrmV3PropertiesObjectTypeGetAll(string objectType, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0)
        {
            HubSpot.Crm.Properties.Client.ApiResponse<CollectionResponsePropertyNoPaging> localVarResponse = GetCrmV3PropertiesObjectTypeGetAllWithHttpInfo(objectType, archived, properties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read all properties Read all existing properties for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponsePropertyNoPaging</returns>
        public HubSpot.Crm.Properties.Client.ApiResponse<CollectionResponsePropertyNoPaging> GetCrmV3PropertiesObjectTypeGetAllWithHttpInfo(string objectType, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmV3PropertiesObjectTypeGetAll");
            }

            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "properties", properties));
            }

            localVarRequestOptions.Operation = "CoreApi.GetCrmV3PropertiesObjectTypeGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponsePropertyNoPaging>("/crm/v3/properties/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read all properties Read all existing properties for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePropertyNoPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponsePropertyNoPaging> GetCrmV3PropertiesObjectTypeGetAllAsync(string objectType, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Properties.Client.ApiResponse<CollectionResponsePropertyNoPaging> localVarResponse = await GetCrmV3PropertiesObjectTypeGetAllWithHttpInfoAsync(objectType, archived, properties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read all properties Read all existing properties for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePropertyNoPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Properties.Client.ApiResponse<CollectionResponsePropertyNoPaging>> GetCrmV3PropertiesObjectTypeGetAllWithHttpInfoAsync(string objectType, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmV3PropertiesObjectTypeGetAll");
            }


            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "properties", properties));
            }

            localVarRequestOptions.Operation = "CoreApi.GetCrmV3PropertiesObjectTypeGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponsePropertyNoPaging>("/crm/v3/properties/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a property Read a property identified by {propertyName}.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Property</returns>
        public Property GetCrmV3PropertiesObjectTypePropertyNameGetByName(string objectType, string propertyName, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0)
        {
            HubSpot.Crm.Properties.Client.ApiResponse<Property> localVarResponse = GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfo(objectType, propertyName, archived, properties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a property Read a property identified by {propertyName}.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Property</returns>
        public HubSpot.Crm.Properties.Client.ApiResponse<Property> GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfo(string objectType, string propertyName, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmV3PropertiesObjectTypePropertyNameGetByName");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->GetCrmV3PropertiesObjectTypePropertyNameGetByName");
            }

            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "properties", properties));
            }

            localVarRequestOptions.Operation = "CoreApi.GetCrmV3PropertiesObjectTypePropertyNameGetByName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Property>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypePropertyNameGetByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a property Read a property identified by {propertyName}.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Property</returns>
        public async System.Threading.Tasks.Task<Property> GetCrmV3PropertiesObjectTypePropertyNameGetByNameAsync(string objectType, string propertyName, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Properties.Client.ApiResponse<Property> localVarResponse = await GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfoAsync(objectType, propertyName, archived, properties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a property Read a property identified by {propertyName}.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Property)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Properties.Client.ApiResponse<Property>> GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfoAsync(string objectType, string propertyName, bool? archived = default(bool?), string properties = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmV3PropertiesObjectTypePropertyNameGetByName");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->GetCrmV3PropertiesObjectTypePropertyNameGetByName");
            }


            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "properties", properties));
            }

            localVarRequestOptions.Operation = "CoreApi.GetCrmV3PropertiesObjectTypePropertyNameGetByName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Property>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypePropertyNameGetByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a property Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Property</returns>
        public Property PatchCrmV3PropertiesObjectTypePropertyNameUpdate(string objectType, string propertyName, PropertyUpdate propertyUpdate, int operationIndex = 0)
        {
            HubSpot.Crm.Properties.Client.ApiResponse<Property> localVarResponse = PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfo(objectType, propertyName, propertyUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a property Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Property</returns>
        public HubSpot.Crm.Properties.Client.ApiResponse<Property> PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfo(string objectType, string propertyName, PropertyUpdate propertyUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            // verify the required parameter 'propertyUpdate' is set
            if (propertyUpdate == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyUpdate' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            localVarRequestOptions.Data = propertyUpdate;

            localVarRequestOptions.Operation = "CoreApi.PatchCrmV3PropertiesObjectTypePropertyNameUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Property>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PropertiesObjectTypePropertyNameUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a property Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Property</returns>
        public async System.Threading.Tasks.Task<Property> PatchCrmV3PropertiesObjectTypePropertyNameUpdateAsync(string objectType, string propertyName, PropertyUpdate propertyUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Properties.Client.ApiResponse<Property> localVarResponse = await PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfoAsync(objectType, propertyName, propertyUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a property Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Property)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Properties.Client.ApiResponse<Property>> PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfoAsync(string objectType, string propertyName, PropertyUpdate propertyUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            // verify the required parameter 'propertyUpdate' is set
            if (propertyUpdate == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyUpdate' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }


            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            localVarRequestOptions.Data = propertyUpdate;

            localVarRequestOptions.Operation = "CoreApi.PatchCrmV3PropertiesObjectTypePropertyNameUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Property>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PropertiesObjectTypePropertyNameUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a property Create and return a copy of a new property for the specified object type.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Property</returns>
        public Property PostCrmV3PropertiesObjectTypeCreate(string objectType, PropertyCreate propertyCreate, int operationIndex = 0)
        {
            HubSpot.Crm.Properties.Client.ApiResponse<Property> localVarResponse = PostCrmV3PropertiesObjectTypeCreateWithHttpInfo(objectType, propertyCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a property Create and return a copy of a new property for the specified object type.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Property</returns>
        public HubSpot.Crm.Properties.Client.ApiResponse<Property> PostCrmV3PropertiesObjectTypeCreateWithHttpInfo(string objectType, PropertyCreate propertyCreate, int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PostCrmV3PropertiesObjectTypeCreate");
            }

            // verify the required parameter 'propertyCreate' is set
            if (propertyCreate == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyCreate' when calling CoreApi->PostCrmV3PropertiesObjectTypeCreate");
            }

            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = propertyCreate;

            localVarRequestOptions.Operation = "CoreApi.PostCrmV3PropertiesObjectTypeCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Property>("/crm/v3/properties/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a property Create and return a copy of a new property for the specified object type.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Property</returns>
        public async System.Threading.Tasks.Task<Property> PostCrmV3PropertiesObjectTypeCreateAsync(string objectType, PropertyCreate propertyCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Properties.Client.ApiResponse<Property> localVarResponse = await PostCrmV3PropertiesObjectTypeCreateWithHttpInfoAsync(objectType, propertyCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a property Create and return a copy of a new property for the specified object type.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Properties.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Property)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Properties.Client.ApiResponse<Property>> PostCrmV3PropertiesObjectTypeCreateWithHttpInfoAsync(string objectType, PropertyCreate propertyCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PostCrmV3PropertiesObjectTypeCreate");
            }

            // verify the required parameter 'propertyCreate' is set
            if (propertyCreate == null)
            {
                throw new HubSpot.Crm.Properties.Client.ApiException(400, "Missing required parameter 'propertyCreate' when calling CoreApi->PostCrmV3PropertiesObjectTypeCreate");
            }


            HubSpot.Crm.Properties.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Properties.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Properties.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Properties.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = propertyCreate;

            localVarRequestOptions.Operation = "CoreApi.PostCrmV3PropertiesObjectTypeCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Properties.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Property>("/crm/v3/properties/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
