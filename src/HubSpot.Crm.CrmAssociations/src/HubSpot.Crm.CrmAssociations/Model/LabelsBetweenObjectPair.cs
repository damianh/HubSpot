/*
 * CrmPublicAssociationsServiceV4
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Crm.CrmAssociations.Client.OpenAPIDateConverter;

namespace HubSpot.Crm.CrmAssociations.Model
{
    /// <summary>
    /// LabelsBetweenObjectPair
    /// </summary>
    [DataContract(Name = "LabelsBetweenObjectPair")]
    public partial class LabelsBetweenObjectPair : IEquatable<LabelsBetweenObjectPair>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsBetweenObjectPair" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LabelsBetweenObjectPair() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelsBetweenObjectPair" /> class.
        /// </summary>
        /// <param name="fromObjectTypeId">fromObjectTypeId (required).</param>
        /// <param name="fromObjectId">fromObjectId (required).</param>
        /// <param name="toObjectTypeId">toObjectTypeId (required).</param>
        /// <param name="toObjectId">toObjectId (required).</param>
        /// <param name="labels">labels (required).</param>
        public LabelsBetweenObjectPair(string fromObjectTypeId = default(string), int fromObjectId = default(int), string toObjectTypeId = default(string), int toObjectId = default(int), List<string> labels = default(List<string>))
        {
            // to ensure "fromObjectTypeId" is required (not null)
            if (fromObjectTypeId == null)
            {
                throw new ArgumentNullException("fromObjectTypeId is a required property for LabelsBetweenObjectPair and cannot be null");
            }
            this.FromObjectTypeId = fromObjectTypeId;
            this.FromObjectId = fromObjectId;
            // to ensure "toObjectTypeId" is required (not null)
            if (toObjectTypeId == null)
            {
                throw new ArgumentNullException("toObjectTypeId is a required property for LabelsBetweenObjectPair and cannot be null");
            }
            this.ToObjectTypeId = toObjectTypeId;
            this.ToObjectId = toObjectId;
            // to ensure "labels" is required (not null)
            if (labels == null)
            {
                throw new ArgumentNullException("labels is a required property for LabelsBetweenObjectPair and cannot be null");
            }
            this.Labels = labels;
        }

        /// <summary>
        /// Gets or Sets FromObjectTypeId
        /// </summary>
        [DataMember(Name = "fromObjectTypeId", IsRequired = true, EmitDefaultValue = true)]
        public string FromObjectTypeId { get; set; }

        /// <summary>
        /// Gets or Sets FromObjectId
        /// </summary>
        [DataMember(Name = "fromObjectId", IsRequired = true, EmitDefaultValue = true)]
        public int FromObjectId { get; set; }

        /// <summary>
        /// Gets or Sets ToObjectTypeId
        /// </summary>
        [DataMember(Name = "toObjectTypeId", IsRequired = true, EmitDefaultValue = true)]
        public string ToObjectTypeId { get; set; }

        /// <summary>
        /// Gets or Sets ToObjectId
        /// </summary>
        [DataMember(Name = "toObjectId", IsRequired = true, EmitDefaultValue = true)]
        public int ToObjectId { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Labels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LabelsBetweenObjectPair {\n");
            sb.Append("  FromObjectTypeId: ").Append(FromObjectTypeId).Append("\n");
            sb.Append("  FromObjectId: ").Append(FromObjectId).Append("\n");
            sb.Append("  ToObjectTypeId: ").Append(ToObjectTypeId).Append("\n");
            sb.Append("  ToObjectId: ").Append(ToObjectId).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LabelsBetweenObjectPair);
        }

        /// <summary>
        /// Returns true if LabelsBetweenObjectPair instances are equal
        /// </summary>
        /// <param name="input">Instance of LabelsBetweenObjectPair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LabelsBetweenObjectPair input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FromObjectTypeId == input.FromObjectTypeId ||
                    (this.FromObjectTypeId != null &&
                    this.FromObjectTypeId.Equals(input.FromObjectTypeId))
                ) && 
                (
                    this.FromObjectId == input.FromObjectId ||
                    this.FromObjectId.Equals(input.FromObjectId)
                ) && 
                (
                    this.ToObjectTypeId == input.ToObjectTypeId ||
                    (this.ToObjectTypeId != null &&
                    this.ToObjectTypeId.Equals(input.ToObjectTypeId))
                ) && 
                (
                    this.ToObjectId == input.ToObjectId ||
                    this.ToObjectId.Equals(input.ToObjectId)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromObjectTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.FromObjectTypeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FromObjectId.GetHashCode();
                if (this.ToObjectTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.ToObjectTypeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ToObjectId.GetHashCode();
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
