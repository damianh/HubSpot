/*
 * CrmPublicAssociationsServiceV4
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Crm.CrmAssociations.Client.OpenAPIDateConverter;

namespace HubSpot.Crm.CrmAssociations.Model
{
    /// <summary>
    /// MultiAssociatedObjectWithLabel
    /// </summary>
    [DataContract(Name = "MultiAssociatedObjectWithLabel")]
    public partial class MultiAssociatedObjectWithLabel : IEquatable<MultiAssociatedObjectWithLabel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiAssociatedObjectWithLabel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MultiAssociatedObjectWithLabel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiAssociatedObjectWithLabel" /> class.
        /// </summary>
        /// <param name="toObjectId">toObjectId (required).</param>
        /// <param name="associationTypes">associationTypes (required).</param>
        public MultiAssociatedObjectWithLabel(int toObjectId = default(int), List<AssociationSpecWithLabel> associationTypes = default(List<AssociationSpecWithLabel>))
        {
            this.ToObjectId = toObjectId;
            // to ensure "associationTypes" is required (not null)
            if (associationTypes == null)
            {
                throw new ArgumentNullException("associationTypes is a required property for MultiAssociatedObjectWithLabel and cannot be null");
            }
            this.AssociationTypes = associationTypes;
        }

        /// <summary>
        /// Gets or Sets ToObjectId
        /// </summary>
        [DataMember(Name = "toObjectId", IsRequired = true, EmitDefaultValue = true)]
        public int ToObjectId { get; set; }

        /// <summary>
        /// Gets or Sets AssociationTypes
        /// </summary>
        [DataMember(Name = "associationTypes", IsRequired = true, EmitDefaultValue = true)]
        public List<AssociationSpecWithLabel> AssociationTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiAssociatedObjectWithLabel {\n");
            sb.Append("  ToObjectId: ").Append(ToObjectId).Append("\n");
            sb.Append("  AssociationTypes: ").Append(AssociationTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultiAssociatedObjectWithLabel);
        }

        /// <summary>
        /// Returns true if MultiAssociatedObjectWithLabel instances are equal
        /// </summary>
        /// <param name="input">Instance of MultiAssociatedObjectWithLabel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultiAssociatedObjectWithLabel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ToObjectId == input.ToObjectId ||
                    this.ToObjectId.Equals(input.ToObjectId)
                ) && 
                (
                    this.AssociationTypes == input.AssociationTypes ||
                    this.AssociationTypes != null &&
                    input.AssociationTypes != null &&
                    this.AssociationTypes.SequenceEqual(input.AssociationTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ToObjectId.GetHashCode();
                if (this.AssociationTypes != null)
                {
                    hashCode = (hashCode * 59) + this.AssociationTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
