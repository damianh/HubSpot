/*
 * CrmPublicAssociationsServiceV4
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Crm.CrmAssociations.Client;
using HubSpot.Crm.CrmAssociations.Client.Auth;
using HubSpot.Crm.CrmAssociations.Model;

namespace HubSpot.Crm.CrmAssociations.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Batch delete associations for objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiArchive"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiArchive batchInputPublicAssociationMultiArchive, int operationIndex = 0);

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Batch delete associations for objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiArchive"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiArchive batchInputPublicAssociationMultiArchive, int operationIndex = 0);
        /// <summary>
        ///  Create Default Associations
        /// </summary>
        /// <remarks>
        /// Create the default (most generic) association type between two object types
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicDefaultAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponsePublicDefaultAssociation</returns>
        BatchResponsePublicDefaultAssociation PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault(string fromObjectType, string toObjectType, BatchInputPublicDefaultAssociationMultiPost batchInputPublicDefaultAssociationMultiPost, int operationIndex = 0);

        /// <summary>
        ///  Create Default Associations
        /// </summary>
        /// <remarks>
        /// Create the default (most generic) association type between two object types
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicDefaultAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponsePublicDefaultAssociation</returns>
        ApiResponse<BatchResponsePublicDefaultAssociation> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefaultWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicDefaultAssociationMultiPost batchInputPublicDefaultAssociationMultiPost, int operationIndex = 0);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Batch create associations for objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseLabelsBetweenObjectPair</returns>
        BatchResponseLabelsBetweenObjectPair PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Batch create associations for objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseLabelsBetweenObjectPair</returns>
        ApiResponse<BatchResponseLabelsBetweenObjectPair> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0);
        /// <summary>
        /// Delete Specific Labels
        /// </summary>
        /// <remarks>
        /// Batch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0);

        /// <summary>
        /// Delete Specific Labels
        /// </summary>
        /// <remarks>
        /// Batch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabelsWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0);
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Batch read associations for objects to specific object type. The &#39;after&#39; field in a returned paging object  can be added alongside the &#39;id&#39; to retrieve the next page of associations from that objectId. The &#39;link&#39; field is deprecated and should be ignored. 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicFetchAssociationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponsePublicAssociationMultiWithLabel</returns>
        BatchResponsePublicAssociationMultiWithLabel PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage(string fromObjectType, string toObjectType, BatchInputPublicFetchAssociationsBatchRequest batchInputPublicFetchAssociationsBatchRequest, int operationIndex = 0);

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Batch read associations for objects to specific object type. The &#39;after&#39; field in a returned paging object  can be added alongside the &#39;id&#39; to retrieve the next page of associations from that objectId. The &#39;link&#39; field is deprecated and should be ignored. 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicFetchAssociationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponsePublicAssociationMultiWithLabel</returns>
        ApiResponse<BatchResponsePublicAssociationMultiWithLabel> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPageWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicFetchAssociationsBatchRequest batchInputPublicFetchAssociationsBatchRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Batch delete associations for objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiArchive"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiArchive batchInputPublicAssociationMultiArchive, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Batch delete associations for objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiArchive"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiArchive batchInputPublicAssociationMultiArchive, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///  Create Default Associations
        /// </summary>
        /// <remarks>
        /// Create the default (most generic) association type between two object types
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicDefaultAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponsePublicDefaultAssociation</returns>
        System.Threading.Tasks.Task<BatchResponsePublicDefaultAssociation> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefaultAsync(string fromObjectType, string toObjectType, BatchInputPublicDefaultAssociationMultiPost batchInputPublicDefaultAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///  Create Default Associations
        /// </summary>
        /// <remarks>
        /// Create the default (most generic) association type between two object types
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicDefaultAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponsePublicDefaultAssociation)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponsePublicDefaultAssociation>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefaultWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicDefaultAssociationMultiPost batchInputPublicDefaultAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Batch create associations for objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseLabelsBetweenObjectPair</returns>
        System.Threading.Tasks.Task<BatchResponseLabelsBetweenObjectPair> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreateAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Batch create associations for objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseLabelsBetweenObjectPair)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseLabelsBetweenObjectPair>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Specific Labels
        /// </summary>
        /// <remarks>
        /// Batch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabelsAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Specific Labels
        /// </summary>
        /// <remarks>
        /// Batch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabelsWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Batch read associations for objects to specific object type. The &#39;after&#39; field in a returned paging object  can be added alongside the &#39;id&#39; to retrieve the next page of associations from that objectId. The &#39;link&#39; field is deprecated and should be ignored. 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicFetchAssociationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponsePublicAssociationMultiWithLabel</returns>
        System.Threading.Tasks.Task<BatchResponsePublicAssociationMultiWithLabel> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPageAsync(string fromObjectType, string toObjectType, BatchInputPublicFetchAssociationsBatchRequest batchInputPublicFetchAssociationsBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Batch read associations for objects to specific object type. The &#39;after&#39; field in a returned paging object  can be added alongside the &#39;id&#39; to retrieve the next page of associations from that objectId. The &#39;link&#39; field is deprecated and should be ignored. 
        /// </remarks>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicFetchAssociationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponsePublicAssociationMultiWithLabel)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponsePublicAssociationMultiWithLabel>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPageWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicFetchAssociationsBatchRequest batchInputPublicFetchAssociationsBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApi : IBatchApiSync, IBatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchApi : IBatchApi
    {
        private HubSpot.Crm.CrmAssociations.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi(string basePath)
        {
            this.Configuration = HubSpot.Crm.CrmAssociations.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.CrmAssociations.Client.GlobalConfiguration.Instance,
                new HubSpot.Crm.CrmAssociations.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Crm.CrmAssociations.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.CrmAssociations.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Crm.CrmAssociations.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchApi(HubSpot.Crm.CrmAssociations.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Crm.CrmAssociations.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.CrmAssociations.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Crm.CrmAssociations.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.CrmAssociations.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Crm.CrmAssociations.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchApi(HubSpot.Crm.CrmAssociations.Client.ISynchronousClient client, HubSpot.Crm.CrmAssociations.Client.IAsynchronousClient asyncClient, HubSpot.Crm.CrmAssociations.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Crm.CrmAssociations.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Crm.CrmAssociations.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Crm.CrmAssociations.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Crm.CrmAssociations.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Crm.CrmAssociations.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Batch delete associations for objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiArchive"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiArchive batchInputPublicAssociationMultiArchive, int operationIndex = 0)
        {
            PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiArchive);
        }

        /// <summary>
        /// Delete Batch delete associations for objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiArchive"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Crm.CrmAssociations.Client.ApiResponse<Object> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiArchive batchInputPublicAssociationMultiArchive, int operationIndex = 0)
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'batchInputPublicAssociationMultiArchive' is set
            if (batchInputPublicAssociationMultiArchive == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicAssociationMultiArchive' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }

            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociationMultiArchive;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Batch delete associations for objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiArchive"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiArchive batchInputPublicAssociationMultiArchive, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfoAsync(fromObjectType, toObjectType, batchInputPublicAssociationMultiArchive, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Batch delete associations for objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiArchive"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.CrmAssociations.Client.ApiResponse<Object>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiArchive batchInputPublicAssociationMultiArchive, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'batchInputPublicAssociationMultiArchive' is set
            if (batchInputPublicAssociationMultiArchive == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicAssociationMultiArchive' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }


            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociationMultiArchive;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create Default Associations Create the default (most generic) association type between two object types
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicDefaultAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponsePublicDefaultAssociation</returns>
        public BatchResponsePublicDefaultAssociation PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault(string fromObjectType, string toObjectType, BatchInputPublicDefaultAssociationMultiPost batchInputPublicDefaultAssociationMultiPost, int operationIndex = 0)
        {
            HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponsePublicDefaultAssociation> localVarResponse = PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefaultWithHttpInfo(fromObjectType, toObjectType, batchInputPublicDefaultAssociationMultiPost);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Default Associations Create the default (most generic) association type between two object types
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicDefaultAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponsePublicDefaultAssociation</returns>
        public HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponsePublicDefaultAssociation> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefaultWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicDefaultAssociationMultiPost batchInputPublicDefaultAssociationMultiPost, int operationIndex = 0)
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault");
            }

            // verify the required parameter 'batchInputPublicDefaultAssociationMultiPost' is set
            if (batchInputPublicDefaultAssociationMultiPost == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicDefaultAssociationMultiPost' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault");
            }

            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicDefaultAssociationMultiPost;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponsePublicDefaultAssociation>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/associate/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create Default Associations Create the default (most generic) association type between two object types
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicDefaultAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponsePublicDefaultAssociation</returns>
        public async System.Threading.Tasks.Task<BatchResponsePublicDefaultAssociation> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefaultAsync(string fromObjectType, string toObjectType, BatchInputPublicDefaultAssociationMultiPost batchInputPublicDefaultAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponsePublicDefaultAssociation> localVarResponse = await PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefaultWithHttpInfoAsync(fromObjectType, toObjectType, batchInputPublicDefaultAssociationMultiPost, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Default Associations Create the default (most generic) association type between two object types
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicDefaultAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponsePublicDefaultAssociation)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponsePublicDefaultAssociation>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefaultWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicDefaultAssociationMultiPost batchInputPublicDefaultAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault");
            }

            // verify the required parameter 'batchInputPublicDefaultAssociationMultiPost' is set
            if (batchInputPublicDefaultAssociationMultiPost == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicDefaultAssociationMultiPost' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault");
            }


            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicDefaultAssociationMultiPost;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponsePublicDefaultAssociation>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/associate/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchAssociateDefaultCreateDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Batch create associations for objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseLabelsBetweenObjectPair</returns>
        public BatchResponseLabelsBetweenObjectPair PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0)
        {
            HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponseLabelsBetweenObjectPair> localVarResponse = PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Batch create associations for objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseLabelsBetweenObjectPair</returns>
        public HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponseLabelsBetweenObjectPair> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0)
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'batchInputPublicAssociationMultiPost' is set
            if (batchInputPublicAssociationMultiPost == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicAssociationMultiPost' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }

            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociationMultiPost;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseLabelsBetweenObjectPair>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Batch create associations for objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseLabelsBetweenObjectPair</returns>
        public async System.Threading.Tasks.Task<BatchResponseLabelsBetweenObjectPair> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreateAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponseLabelsBetweenObjectPair> localVarResponse = await PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfoAsync(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Batch create associations for objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseLabelsBetweenObjectPair)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponseLabelsBetweenObjectPair>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'batchInputPublicAssociationMultiPost' is set
            if (batchInputPublicAssociationMultiPost == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicAssociationMultiPost' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }


            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociationMultiPost;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseLabelsBetweenObjectPair>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Specific Labels Batch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0)
        {
            PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabelsWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost);
        }

        /// <summary>
        /// Delete Specific Labels Batch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Crm.CrmAssociations.Client.ApiResponse<Object> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabelsWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0)
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels");
            }

            // verify the required parameter 'batchInputPublicAssociationMultiPost' is set
            if (batchInputPublicAssociationMultiPost == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicAssociationMultiPost' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels");
            }

            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociationMultiPost;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/labels/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Specific Labels Batch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabelsAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabelsWithHttpInfoAsync(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Specific Labels Batch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociationMultiPost"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.CrmAssociations.Client.ApiResponse<Object>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabelsWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociationMultiPost batchInputPublicAssociationMultiPost, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels");
            }

            // verify the required parameter 'batchInputPublicAssociationMultiPost' is set
            if (batchInputPublicAssociationMultiPost == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicAssociationMultiPost' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels");
            }


            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociationMultiPost;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/labels/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchLabelsArchiveArchiveLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Batch read associations for objects to specific object type. The &#39;after&#39; field in a returned paging object  can be added alongside the &#39;id&#39; to retrieve the next page of associations from that objectId. The &#39;link&#39; field is deprecated and should be ignored. 
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicFetchAssociationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponsePublicAssociationMultiWithLabel</returns>
        public BatchResponsePublicAssociationMultiWithLabel PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage(string fromObjectType, string toObjectType, BatchInputPublicFetchAssociationsBatchRequest batchInputPublicFetchAssociationsBatchRequest, int operationIndex = 0)
        {
            HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponsePublicAssociationMultiWithLabel> localVarResponse = PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPageWithHttpInfo(fromObjectType, toObjectType, batchInputPublicFetchAssociationsBatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Batch read associations for objects to specific object type. The &#39;after&#39; field in a returned paging object  can be added alongside the &#39;id&#39; to retrieve the next page of associations from that objectId. The &#39;link&#39; field is deprecated and should be ignored. 
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicFetchAssociationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponsePublicAssociationMultiWithLabel</returns>
        public HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponsePublicAssociationMultiWithLabel> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPageWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicFetchAssociationsBatchRequest batchInputPublicFetchAssociationsBatchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage");
            }

            // verify the required parameter 'batchInputPublicFetchAssociationsBatchRequest' is set
            if (batchInputPublicFetchAssociationsBatchRequest == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicFetchAssociationsBatchRequest' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage");
            }

            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicFetchAssociationsBatchRequest;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponsePublicAssociationMultiWithLabel>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Batch read associations for objects to specific object type. The &#39;after&#39; field in a returned paging object  can be added alongside the &#39;id&#39; to retrieve the next page of associations from that objectId. The &#39;link&#39; field is deprecated and should be ignored. 
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicFetchAssociationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponsePublicAssociationMultiWithLabel</returns>
        public async System.Threading.Tasks.Task<BatchResponsePublicAssociationMultiWithLabel> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPageAsync(string fromObjectType, string toObjectType, BatchInputPublicFetchAssociationsBatchRequest batchInputPublicFetchAssociationsBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponsePublicAssociationMultiWithLabel> localVarResponse = await PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPageWithHttpInfoAsync(fromObjectType, toObjectType, batchInputPublicFetchAssociationsBatchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Batch read associations for objects to specific object type. The &#39;after&#39; field in a returned paging object  can be added alongside the &#39;id&#39; to retrieve the next page of associations from that objectId. The &#39;link&#39; field is deprecated and should be ignored. 
        /// </summary>
        /// <exception cref="HubSpot.Crm.CrmAssociations.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicFetchAssociationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponsePublicAssociationMultiWithLabel)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.CrmAssociations.Client.ApiResponse<BatchResponsePublicAssociationMultiWithLabel>> PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPageWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicFetchAssociationsBatchRequest batchInputPublicFetchAssociationsBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage");
            }

            // verify the required parameter 'batchInputPublicFetchAssociationsBatchRequest' is set
            if (batchInputPublicFetchAssociationsBatchRequest == null)
            {
                throw new HubSpot.Crm.CrmAssociations.Client.ApiException(400, "Missing required parameter 'batchInputPublicFetchAssociationsBatchRequest' when calling BatchApi->PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage");
            }


            HubSpot.Crm.CrmAssociations.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.CrmAssociations.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.CrmAssociations.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicFetchAssociationsBatchRequest;

            localVarRequestOptions.Operation = "BatchApi.PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.CrmAssociations.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponsePublicAssociationMultiWithLabel>("/crm/v4/associations/{fromObjectType}/{toObjectType}/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV4AssociationsFromObjectTypeToObjectTypeBatchReadGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
