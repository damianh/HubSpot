/*
 * URL redirects
 *
 * URL redirect operations
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Cms.UrlRedirects.Client;
using HubSpot.Cms.UrlRedirects.Client.Auth;
using HubSpot.Cms.UrlRedirects.Model;

namespace HubSpot.Cms.UrlRedirects.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a redirect
        /// </summary>
        /// <remarks>
        /// Delete one existing redirect, so it is no longer mapped.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCmsV3UrlRedirectsUrlRedirectIdArchive(string urlRedirectId, int operationIndex = 0);

        /// <summary>
        /// Delete a redirect
        /// </summary>
        /// <remarks>
        /// Delete one existing redirect, so it is no longer mapped.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfo(string urlRedirectId, int operationIndex = 0);
        /// <summary>
        /// Get current redirects
        /// </summary>
        /// <remarks>
        /// Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseWithTotalUrlMappingForwardPaging</returns>
        CollectionResponseWithTotalUrlMappingForwardPaging GetCmsV3UrlRedirectsGetPage(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get current redirects
        /// </summary>
        /// <remarks>
        /// Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalUrlMappingForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalUrlMappingForwardPaging> GetCmsV3UrlRedirectsGetPageWithHttpInfo(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get details for a redirect
        /// </summary>
        /// <remarks>
        /// Returns the details for a single existing URL redirect by ID.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlMapping</returns>
        UrlMapping GetCmsV3UrlRedirectsUrlRedirectIdGetById(string urlRedirectId, int operationIndex = 0);

        /// <summary>
        /// Get details for a redirect
        /// </summary>
        /// <remarks>
        /// Returns the details for a single existing URL redirect by ID.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        ApiResponse<UrlMapping> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfo(string urlRedirectId, int operationIndex = 0);
        /// <summary>
        /// Update a redirect
        /// </summary>
        /// <remarks>
        /// Updates the settings for an existing URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlMapping</returns>
        UrlMapping PatchCmsV3UrlRedirectsUrlRedirectIdUpdate(string urlRedirectId, UrlMapping urlMapping, int operationIndex = 0);

        /// <summary>
        /// Update a redirect
        /// </summary>
        /// <remarks>
        /// Updates the settings for an existing URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        ApiResponse<UrlMapping> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfo(string urlRedirectId, UrlMapping urlMapping, int operationIndex = 0);
        /// <summary>
        /// Create a redirect
        /// </summary>
        /// <remarks>
        /// Creates and configures a new URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlMapping</returns>
        UrlMapping PostCmsV3UrlRedirectsCreate(UrlMappingCreateRequestBody urlMappingCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create a redirect
        /// </summary>
        /// <remarks>
        /// Creates and configures a new URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        ApiResponse<UrlMapping> PostCmsV3UrlRedirectsCreateWithHttpInfo(UrlMappingCreateRequestBody urlMappingCreateRequestBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a redirect
        /// </summary>
        /// <remarks>
        /// Delete one existing redirect, so it is no longer mapped.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveAsync(string urlRedirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a redirect
        /// </summary>
        /// <remarks>
        /// Delete one existing redirect, so it is no longer mapped.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfoAsync(string urlRedirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get current redirects
        /// </summary>
        /// <remarks>
        /// Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalUrlMappingForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalUrlMappingForwardPaging> GetCmsV3UrlRedirectsGetPageAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get current redirects
        /// </summary>
        /// <remarks>
        /// Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalUrlMappingForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalUrlMappingForwardPaging>> GetCmsV3UrlRedirectsGetPageWithHttpInfoAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details for a redirect
        /// </summary>
        /// <remarks>
        /// Returns the details for a single existing URL redirect by ID.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        System.Threading.Tasks.Task<UrlMapping> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdAsync(string urlRedirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details for a redirect
        /// </summary>
        /// <remarks>
        /// Returns the details for a single existing URL redirect by ID.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlMapping>> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfoAsync(string urlRedirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a redirect
        /// </summary>
        /// <remarks>
        /// Updates the settings for an existing URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        System.Threading.Tasks.Task<UrlMapping> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateAsync(string urlRedirectId, UrlMapping urlMapping, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a redirect
        /// </summary>
        /// <remarks>
        /// Updates the settings for an existing URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlMapping>> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfoAsync(string urlRedirectId, UrlMapping urlMapping, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a redirect
        /// </summary>
        /// <remarks>
        /// Creates and configures a new URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        System.Threading.Tasks.Task<UrlMapping> PostCmsV3UrlRedirectsCreateAsync(UrlMappingCreateRequestBody urlMappingCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a redirect
        /// </summary>
        /// <remarks>
        /// Creates and configures a new URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlMapping>> PostCmsV3UrlRedirectsCreateWithHttpInfoAsync(UrlMappingCreateRequestBody urlMappingCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApi : IRedirectsApiSync, IRedirectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RedirectsApi : IRedirectsApi
    {
        private HubSpot.Cms.UrlRedirects.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedirectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedirectsApi(string basePath)
        {
            this.Configuration = HubSpot.Cms.UrlRedirects.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.UrlRedirects.Client.GlobalConfiguration.Instance,
                new HubSpot.Cms.UrlRedirects.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Cms.UrlRedirects.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.UrlRedirects.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Cms.UrlRedirects.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RedirectsApi(HubSpot.Cms.UrlRedirects.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Cms.UrlRedirects.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.UrlRedirects.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Cms.UrlRedirects.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.UrlRedirects.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Cms.UrlRedirects.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RedirectsApi(HubSpot.Cms.UrlRedirects.Client.ISynchronousClient client, HubSpot.Cms.UrlRedirects.Client.IAsynchronousClient asyncClient, HubSpot.Cms.UrlRedirects.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Cms.UrlRedirects.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Cms.UrlRedirects.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Cms.UrlRedirects.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Cms.UrlRedirects.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Cms.UrlRedirects.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a redirect Delete one existing redirect, so it is no longer mapped.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCmsV3UrlRedirectsUrlRedirectIdArchive(string urlRedirectId, int operationIndex = 0)
        {
            DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfo(urlRedirectId);
        }

        /// <summary>
        /// Delete a redirect Delete one existing redirect, so it is no longer mapped.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Cms.UrlRedirects.Client.ApiResponse<Object> DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfo(string urlRedirectId, int operationIndex = 0)
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->DeleteCmsV3UrlRedirectsUrlRedirectIdArchive");
            }

            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter

            localVarRequestOptions.Operation = "RedirectsApi.DeleteCmsV3UrlRedirectsUrlRedirectIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3UrlRedirectsUrlRedirectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a redirect Delete one existing redirect, so it is no longer mapped.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveAsync(string urlRedirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfoAsync(urlRedirectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a redirect Delete one existing redirect, so it is no longer mapped.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.UrlRedirects.Client.ApiResponse<Object>> DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfoAsync(string urlRedirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->DeleteCmsV3UrlRedirectsUrlRedirectIdArchive");
            }


            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter

            localVarRequestOptions.Operation = "RedirectsApi.DeleteCmsV3UrlRedirectsUrlRedirectIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3UrlRedirectsUrlRedirectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current redirects Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseWithTotalUrlMappingForwardPaging</returns>
        public CollectionResponseWithTotalUrlMappingForwardPaging GetCmsV3UrlRedirectsGetPage(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.UrlRedirects.Client.ApiResponse<CollectionResponseWithTotalUrlMappingForwardPaging> localVarResponse = GetCmsV3UrlRedirectsGetPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current redirects Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalUrlMappingForwardPaging</returns>
        public HubSpot.Cms.UrlRedirects.Client.ApiResponse<CollectionResponseWithTotalUrlMappingForwardPaging> GetCmsV3UrlRedirectsGetPageWithHttpInfo(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "RedirectsApi.GetCmsV3UrlRedirectsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalUrlMappingForwardPaging>("/cms/v3/url-redirects/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3UrlRedirectsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current redirects Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalUrlMappingForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalUrlMappingForwardPaging> GetCmsV3UrlRedirectsGetPageAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.UrlRedirects.Client.ApiResponse<CollectionResponseWithTotalUrlMappingForwardPaging> localVarResponse = await GetCmsV3UrlRedirectsGetPageWithHttpInfoAsync(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current redirects Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalUrlMappingForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.UrlRedirects.Client.ApiResponse<CollectionResponseWithTotalUrlMappingForwardPaging>> GetCmsV3UrlRedirectsGetPageWithHttpInfoAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "RedirectsApi.GetCmsV3UrlRedirectsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalUrlMappingForwardPaging>("/cms/v3/url-redirects/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3UrlRedirectsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for a redirect Returns the details for a single existing URL redirect by ID.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlMapping</returns>
        public UrlMapping GetCmsV3UrlRedirectsUrlRedirectIdGetById(string urlRedirectId, int operationIndex = 0)
        {
            HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> localVarResponse = GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfo(urlRedirectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a redirect Returns the details for a single existing URL redirect by ID.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        public HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfo(string urlRedirectId, int operationIndex = 0)
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->GetCmsV3UrlRedirectsUrlRedirectIdGetById");
            }

            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter

            localVarRequestOptions.Operation = "RedirectsApi.GetCmsV3UrlRedirectsUrlRedirectIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UrlMapping>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3UrlRedirectsUrlRedirectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for a redirect Returns the details for a single existing URL redirect by ID.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        public async System.Threading.Tasks.Task<UrlMapping> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdAsync(string urlRedirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> localVarResponse = await GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfoAsync(urlRedirectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a redirect Returns the details for a single existing URL redirect by ID.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping>> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfoAsync(string urlRedirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->GetCmsV3UrlRedirectsUrlRedirectIdGetById");
            }


            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter

            localVarRequestOptions.Operation = "RedirectsApi.GetCmsV3UrlRedirectsUrlRedirectIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UrlMapping>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3UrlRedirectsUrlRedirectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a redirect Updates the settings for an existing URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlMapping</returns>
        public UrlMapping PatchCmsV3UrlRedirectsUrlRedirectIdUpdate(string urlRedirectId, UrlMapping urlMapping, int operationIndex = 0)
        {
            HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> localVarResponse = PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfo(urlRedirectId, urlMapping);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a redirect Updates the settings for an existing URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        public HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfo(string urlRedirectId, UrlMapping urlMapping, int operationIndex = 0)
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->PatchCmsV3UrlRedirectsUrlRedirectIdUpdate");
            }

            // verify the required parameter 'urlMapping' is set
            if (urlMapping == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlMapping' when calling RedirectsApi->PatchCmsV3UrlRedirectsUrlRedirectIdUpdate");
            }

            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter
            localVarRequestOptions.Data = urlMapping;

            localVarRequestOptions.Operation = "RedirectsApi.PatchCmsV3UrlRedirectsUrlRedirectIdUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UrlMapping>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3UrlRedirectsUrlRedirectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a redirect Updates the settings for an existing URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        public async System.Threading.Tasks.Task<UrlMapping> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateAsync(string urlRedirectId, UrlMapping urlMapping, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> localVarResponse = await PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfoAsync(urlRedirectId, urlMapping, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a redirect Updates the settings for an existing URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping>> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfoAsync(string urlRedirectId, UrlMapping urlMapping, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->PatchCmsV3UrlRedirectsUrlRedirectIdUpdate");
            }

            // verify the required parameter 'urlMapping' is set
            if (urlMapping == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlMapping' when calling RedirectsApi->PatchCmsV3UrlRedirectsUrlRedirectIdUpdate");
            }


            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter
            localVarRequestOptions.Data = urlMapping;

            localVarRequestOptions.Operation = "RedirectsApi.PatchCmsV3UrlRedirectsUrlRedirectIdUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UrlMapping>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3UrlRedirectsUrlRedirectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a redirect Creates and configures a new URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UrlMapping</returns>
        public UrlMapping PostCmsV3UrlRedirectsCreate(UrlMappingCreateRequestBody urlMappingCreateRequestBody, int operationIndex = 0)
        {
            HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> localVarResponse = PostCmsV3UrlRedirectsCreateWithHttpInfo(urlMappingCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a redirect Creates and configures a new URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        public HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> PostCmsV3UrlRedirectsCreateWithHttpInfo(UrlMappingCreateRequestBody urlMappingCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'urlMappingCreateRequestBody' is set
            if (urlMappingCreateRequestBody == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlMappingCreateRequestBody' when calling RedirectsApi->PostCmsV3UrlRedirectsCreate");
            }

            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = urlMappingCreateRequestBody;

            localVarRequestOptions.Operation = "RedirectsApi.PostCmsV3UrlRedirectsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlMapping>("/cms/v3/url-redirects/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3UrlRedirectsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a redirect Creates and configures a new URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        public async System.Threading.Tasks.Task<UrlMapping> PostCmsV3UrlRedirectsCreateAsync(UrlMappingCreateRequestBody urlMappingCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping> localVarResponse = await PostCmsV3UrlRedirectsCreateWithHttpInfoAsync(urlMappingCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a redirect Creates and configures a new URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.Cms.UrlRedirects.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.UrlRedirects.Client.ApiResponse<UrlMapping>> PostCmsV3UrlRedirectsCreateWithHttpInfoAsync(UrlMappingCreateRequestBody urlMappingCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlMappingCreateRequestBody' is set
            if (urlMappingCreateRequestBody == null)
            {
                throw new HubSpot.Cms.UrlRedirects.Client.ApiException(400, "Missing required parameter 'urlMappingCreateRequestBody' when calling RedirectsApi->PostCmsV3UrlRedirectsCreate");
            }


            HubSpot.Cms.UrlRedirects.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.UrlRedirects.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.UrlRedirects.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = urlMappingCreateRequestBody;

            localVarRequestOptions.Operation = "RedirectsApi.PostCmsV3UrlRedirectsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.UrlRedirects.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlMapping>("/cms/v3/url-redirects/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3UrlRedirectsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
