/*
 * CRM Imports
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Crm.Imports.Client;
using HubSpot.Crm.Imports.Client.Auth;
using HubSpot.Crm.Imports.Model;

namespace HubSpot.Crm.Imports.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get active imports
        /// </summary>
        /// <remarks>
        /// Returns a paged list of active imports for this account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponsePublicImportResponse</returns>
        CollectionResponsePublicImportResponse GetCrmV3ImportsGetPage(string after = default(string), string before = default(string), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get active imports
        /// </summary>
        /// <remarks>
        /// Returns a paged list of active imports for this account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponsePublicImportResponse</returns>
        ApiResponse<CollectionResponsePublicImportResponse> GetCrmV3ImportsGetPageWithHttpInfo(string after = default(string), string before = default(string), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get the information on any import
        /// </summary>
        /// <remarks>
        /// A complete summary of an import record, including any updates.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicImportResponse</returns>
        PublicImportResponse GetCrmV3ImportsImportIdGetById(long importId, int operationIndex = 0);

        /// <summary>
        /// Get the information on any import
        /// </summary>
        /// <remarks>
        /// A complete summary of an import record, including any updates.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicImportResponse</returns>
        ApiResponse<PublicImportResponse> GetCrmV3ImportsImportIdGetByIdWithHttpInfo(long importId, int operationIndex = 0);
        /// <summary>
        /// Start a new import
        /// </summary>
        /// <remarks>
        /// Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicImportResponse</returns>
        PublicImportResponse PostCrmV3ImportsCreate(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), int operationIndex = 0);

        /// <summary>
        /// Start a new import
        /// </summary>
        /// <remarks>
        /// Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicImportResponse</returns>
        ApiResponse<PublicImportResponse> PostCrmV3ImportsCreateWithHttpInfo(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), int operationIndex = 0);
        /// <summary>
        /// Cancel an active import
        /// </summary>
        /// <remarks>
        /// This allows a developer to cancel an active import.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionResponse</returns>
        ActionResponse PostCrmV3ImportsImportIdCancelCancel(long importId, int operationIndex = 0);

        /// <summary>
        /// Cancel an active import
        /// </summary>
        /// <remarks>
        /// This allows a developer to cancel an active import.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> PostCrmV3ImportsImportIdCancelCancelWithHttpInfo(long importId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get active imports
        /// </summary>
        /// <remarks>
        /// Returns a paged list of active imports for this account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePublicImportResponse</returns>
        System.Threading.Tasks.Task<CollectionResponsePublicImportResponse> GetCrmV3ImportsGetPageAsync(string after = default(string), string before = default(string), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get active imports
        /// </summary>
        /// <remarks>
        /// Returns a paged list of active imports for this account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePublicImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponsePublicImportResponse>> GetCrmV3ImportsGetPageWithHttpInfoAsync(string after = default(string), string before = default(string), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the information on any import
        /// </summary>
        /// <remarks>
        /// A complete summary of an import record, including any updates.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicImportResponse</returns>
        System.Threading.Tasks.Task<PublicImportResponse> GetCrmV3ImportsImportIdGetByIdAsync(long importId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the information on any import
        /// </summary>
        /// <remarks>
        /// A complete summary of an import record, including any updates.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicImportResponse>> GetCrmV3ImportsImportIdGetByIdWithHttpInfoAsync(long importId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a new import
        /// </summary>
        /// <remarks>
        /// Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicImportResponse</returns>
        System.Threading.Tasks.Task<PublicImportResponse> PostCrmV3ImportsCreateAsync(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new import
        /// </summary>
        /// <remarks>
        /// Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicImportResponse>> PostCrmV3ImportsCreateWithHttpInfoAsync(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel an active import
        /// </summary>
        /// <remarks>
        /// This allows a developer to cancel an active import.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> PostCrmV3ImportsImportIdCancelCancelAsync(long importId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an active import
        /// </summary>
        /// <remarks>
        /// This allows a developer to cancel an active import.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> PostCrmV3ImportsImportIdCancelCancelWithHttpInfoAsync(long importId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApi : ICoreApiSync, ICoreApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CoreApi : ICoreApi
    {
        private HubSpot.Crm.Imports.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi(string basePath)
        {
            this.Configuration = HubSpot.Crm.Imports.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Imports.Client.GlobalConfiguration.Instance,
                new HubSpot.Crm.Imports.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Crm.Imports.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Imports.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Crm.Imports.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CoreApi(HubSpot.Crm.Imports.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Crm.Imports.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Imports.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Crm.Imports.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Imports.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Crm.Imports.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CoreApi(HubSpot.Crm.Imports.Client.ISynchronousClient client, HubSpot.Crm.Imports.Client.IAsynchronousClient asyncClient, HubSpot.Crm.Imports.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Crm.Imports.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Crm.Imports.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Crm.Imports.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Crm.Imports.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Crm.Imports.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get active imports Returns a paged list of active imports for this account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponsePublicImportResponse</returns>
        public CollectionResponsePublicImportResponse GetCrmV3ImportsGetPage(string after = default(string), string before = default(string), int? limit = default(int?), int operationIndex = 0)
        {
            HubSpot.Crm.Imports.Client.ApiResponse<CollectionResponsePublicImportResponse> localVarResponse = GetCrmV3ImportsGetPageWithHttpInfo(after, before, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get active imports Returns a paged list of active imports for this account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponsePublicImportResponse</returns>
        public HubSpot.Crm.Imports.Client.ApiResponse<CollectionResponsePublicImportResponse> GetCrmV3ImportsGetPageWithHttpInfo(string after = default(string), string before = default(string), int? limit = default(int?), int operationIndex = 0)
        {
            HubSpot.Crm.Imports.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Imports.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "CoreApi.GetCrmV3ImportsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponsePublicImportResponse>("/crm/v3/imports/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ImportsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get active imports Returns a paged list of active imports for this account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePublicImportResponse</returns>
        public async System.Threading.Tasks.Task<CollectionResponsePublicImportResponse> GetCrmV3ImportsGetPageAsync(string after = default(string), string before = default(string), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Imports.Client.ApiResponse<CollectionResponsePublicImportResponse> localVarResponse = await GetCrmV3ImportsGetPageWithHttpInfoAsync(after, before, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get active imports Returns a paged list of active imports for this account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePublicImportResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Imports.Client.ApiResponse<CollectionResponsePublicImportResponse>> GetCrmV3ImportsGetPageWithHttpInfoAsync(string after = default(string), string before = default(string), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Crm.Imports.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Imports.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "CoreApi.GetCrmV3ImportsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponsePublicImportResponse>("/crm/v3/imports/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ImportsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the information on any import A complete summary of an import record, including any updates.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicImportResponse</returns>
        public PublicImportResponse GetCrmV3ImportsImportIdGetById(long importId, int operationIndex = 0)
        {
            HubSpot.Crm.Imports.Client.ApiResponse<PublicImportResponse> localVarResponse = GetCrmV3ImportsImportIdGetByIdWithHttpInfo(importId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the information on any import A complete summary of an import record, including any updates.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicImportResponse</returns>
        public HubSpot.Crm.Imports.Client.ApiResponse<PublicImportResponse> GetCrmV3ImportsImportIdGetByIdWithHttpInfo(long importId, int operationIndex = 0)
        {
            HubSpot.Crm.Imports.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Imports.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("importId", HubSpot.Crm.Imports.Client.ClientUtils.ParameterToString(importId)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.GetCrmV3ImportsImportIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PublicImportResponse>("/crm/v3/imports/{importId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ImportsImportIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the information on any import A complete summary of an import record, including any updates.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicImportResponse</returns>
        public async System.Threading.Tasks.Task<PublicImportResponse> GetCrmV3ImportsImportIdGetByIdAsync(long importId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Imports.Client.ApiResponse<PublicImportResponse> localVarResponse = await GetCrmV3ImportsImportIdGetByIdWithHttpInfoAsync(importId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the information on any import A complete summary of an import record, including any updates.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicImportResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Imports.Client.ApiResponse<PublicImportResponse>> GetCrmV3ImportsImportIdGetByIdWithHttpInfoAsync(long importId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Crm.Imports.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Imports.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("importId", HubSpot.Crm.Imports.Client.ClientUtils.ParameterToString(importId)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.GetCrmV3ImportsImportIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PublicImportResponse>("/crm/v3/imports/{importId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ImportsImportIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new import Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicImportResponse</returns>
        public PublicImportResponse PostCrmV3ImportsCreate(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), int operationIndex = 0)
        {
            HubSpot.Crm.Imports.Client.ApiResponse<PublicImportResponse> localVarResponse = PostCrmV3ImportsCreateWithHttpInfo(files, importRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new import Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicImportResponse</returns>
        public HubSpot.Crm.Imports.Client.ApiResponse<PublicImportResponse> PostCrmV3ImportsCreateWithHttpInfo(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), int operationIndex = 0)
        {
            HubSpot.Crm.Imports.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Imports.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (files != null)
            {
                localVarRequestOptions.FileParameters.Add("files", files);
            }
            if (importRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("importRequest", HubSpot.Crm.Imports.Client.ClientUtils.ParameterToString(importRequest)); // form parameter
            }

            localVarRequestOptions.Operation = "CoreApi.PostCrmV3ImportsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PublicImportResponse>("/crm/v3/imports/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ImportsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new import Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicImportResponse</returns>
        public async System.Threading.Tasks.Task<PublicImportResponse> PostCrmV3ImportsCreateAsync(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Imports.Client.ApiResponse<PublicImportResponse> localVarResponse = await PostCrmV3ImportsCreateWithHttpInfoAsync(files, importRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new import Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicImportResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Imports.Client.ApiResponse<PublicImportResponse>> PostCrmV3ImportsCreateWithHttpInfoAsync(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Crm.Imports.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Imports.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (files != null)
            {
                localVarRequestOptions.FileParameters.Add("files", files);
            }
            if (importRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("importRequest", HubSpot.Crm.Imports.Client.ClientUtils.ParameterToString(importRequest)); // form parameter
            }

            localVarRequestOptions.Operation = "CoreApi.PostCrmV3ImportsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PublicImportResponse>("/crm/v3/imports/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ImportsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an active import This allows a developer to cancel an active import.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse PostCrmV3ImportsImportIdCancelCancel(long importId, int operationIndex = 0)
        {
            HubSpot.Crm.Imports.Client.ApiResponse<ActionResponse> localVarResponse = PostCrmV3ImportsImportIdCancelCancelWithHttpInfo(importId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an active import This allows a developer to cancel an active import.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public HubSpot.Crm.Imports.Client.ApiResponse<ActionResponse> PostCrmV3ImportsImportIdCancelCancelWithHttpInfo(long importId, int operationIndex = 0)
        {
            HubSpot.Crm.Imports.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Imports.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("importId", HubSpot.Crm.Imports.Client.ClientUtils.ParameterToString(importId)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.PostCrmV3ImportsImportIdCancelCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionResponse>("/crm/v3/imports/{importId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ImportsImportIdCancelCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an active import This allows a developer to cancel an active import.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> PostCrmV3ImportsImportIdCancelCancelAsync(long importId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Imports.Client.ApiResponse<ActionResponse> localVarResponse = await PostCrmV3ImportsImportIdCancelCancelWithHttpInfoAsync(importId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an active import This allows a developer to cancel an active import.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Imports.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Imports.Client.ApiResponse<ActionResponse>> PostCrmV3ImportsImportIdCancelCancelWithHttpInfoAsync(long importId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Crm.Imports.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Imports.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Imports.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("importId", HubSpot.Crm.Imports.Client.ClientUtils.ParameterToString(importId)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.PostCrmV3ImportsImportIdCancelCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Imports.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionResponse>("/crm/v3/imports/{importId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ImportsImportIdCancelCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
