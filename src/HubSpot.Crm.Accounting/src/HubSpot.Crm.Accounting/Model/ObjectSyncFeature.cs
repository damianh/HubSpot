/*
 * Accounting Extension
 *
 * These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot 
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Crm.Accounting.Client.OpenAPIDateConverter;

namespace HubSpot.Crm.Accounting.Model
{
    /// <summary>
    /// ObjectSyncFeature
    /// </summary>
    [DataContract(Name = "ObjectSyncFeature")]
    public partial class ObjectSyncFeature : IEquatable<ObjectSyncFeature>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectSyncFeature" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ObjectSyncFeature() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectSyncFeature" /> class.
        /// </summary>
        /// <param name="toHubSpot">Indicates if syncing the object type from the external accounting system into HubSpot is supported. (required).</param>
        public ObjectSyncFeature(bool toHubSpot = default(bool))
        {
            this.ToHubSpot = toHubSpot;
        }

        /// <summary>
        /// Indicates if syncing the object type from the external accounting system into HubSpot is supported.
        /// </summary>
        /// <value>Indicates if syncing the object type from the external accounting system into HubSpot is supported.</value>
        [DataMember(Name = "toHubSpot", IsRequired = true, EmitDefaultValue = true)]
        public bool ToHubSpot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ObjectSyncFeature {\n");
            sb.Append("  ToHubSpot: ").Append(ToHubSpot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectSyncFeature);
        }

        /// <summary>
        /// Returns true if ObjectSyncFeature instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectSyncFeature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectSyncFeature input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ToHubSpot == input.ToHubSpot ||
                    this.ToHubSpot.Equals(input.ToHubSpot)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ToHubSpot.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
