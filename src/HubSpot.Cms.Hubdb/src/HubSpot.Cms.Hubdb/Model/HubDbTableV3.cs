/*
 * HubDB endpoints
 *
 * HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Cms.Hubdb.Client.OpenAPIDateConverter;

namespace HubSpot.Cms.Hubdb.Model
{
    /// <summary>
    /// Model for HubDB table
    /// </summary>
    [DataContract(Name = "HubDbTableV3")]
    public partial class HubDbTableV3 : IEquatable<HubDbTableV3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HubDbTableV3" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HubDbTableV3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HubDbTableV3" /> class.
        /// </summary>
        /// <param name="id">Id of the table.</param>
        /// <param name="name">Name of the table (required).</param>
        /// <param name="label">Label of the table (required).</param>
        /// <param name="columns">List of columns in the table.</param>
        /// <param name="published">published.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="columnCount">Number of columns including deleted.</param>
        /// <param name="rowCount">Number of rows in the table.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="useForPages">Specifies whether the table can be used for creation of dynamic pages.</param>
        /// <param name="allowChildTables">Specifies whether child tables can be created.</param>
        /// <param name="enableChildTablePages">Specifies creation of multi-level dynamic pages using child tables.</param>
        /// <param name="isOrderedManually">isOrderedManually.</param>
        /// <param name="dynamicMetaTags">Specifies the key value pairs of the metadata fields with the associated column ids.</param>
        /// <param name="allowPublicApiAccess">Specifies whether the table can be read by public without authorization.</param>
        /// <param name="createdAt">Timestamp at which the table is created.</param>
        /// <param name="publishedAt">Timestamp at which the table is published recently.</param>
        /// <param name="updatedAt">Timestamp at which the table is updated recently.</param>
        public HubDbTableV3(string id = default(string), string name = default(string), string label = default(string), List<Column> columns = default(List<Column>), bool published = default(bool), bool deleted = default(bool), int columnCount = default(int), int rowCount = default(int), SimpleUser createdBy = default(SimpleUser), SimpleUser updatedBy = default(SimpleUser), bool useForPages = default(bool), bool allowChildTables = default(bool), bool enableChildTablePages = default(bool), bool isOrderedManually = default(bool), Dictionary<string, int> dynamicMetaTags = default(Dictionary<string, int>), bool allowPublicApiAccess = default(bool), DateTime createdAt = default(DateTime), DateTime publishedAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for HubDbTableV3 and cannot be null");
            }
            this.Name = name;
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for HubDbTableV3 and cannot be null");
            }
            this.Label = label;
            this.Id = id;
            this.Columns = columns;
            this.Published = published;
            this.Deleted = deleted;
            this.ColumnCount = columnCount;
            this.RowCount = rowCount;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.UseForPages = useForPages;
            this.AllowChildTables = allowChildTables;
            this.EnableChildTablePages = enableChildTablePages;
            this.IsOrderedManually = isOrderedManually;
            this.DynamicMetaTags = dynamicMetaTags;
            this.AllowPublicApiAccess = allowPublicApiAccess;
            this.CreatedAt = createdAt;
            this.PublishedAt = publishedAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Id of the table
        /// </summary>
        /// <value>Id of the table</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the table
        /// </summary>
        /// <value>Name of the table</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Label of the table
        /// </summary>
        /// <value>Label of the table</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// List of columns in the table
        /// </summary>
        /// <value>List of columns in the table</value>
        [DataMember(Name = "columns", EmitDefaultValue = false)]
        public List<Column> Columns { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Number of columns including deleted
        /// </summary>
        /// <value>Number of columns including deleted</value>
        [DataMember(Name = "columnCount", EmitDefaultValue = false)]
        public int ColumnCount { get; set; }

        /// <summary>
        /// Number of rows in the table
        /// </summary>
        /// <value>Number of rows in the table</value>
        [DataMember(Name = "rowCount", EmitDefaultValue = false)]
        public int RowCount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public SimpleUser CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = false)]
        public SimpleUser UpdatedBy { get; set; }

        /// <summary>
        /// Specifies whether the table can be used for creation of dynamic pages
        /// </summary>
        /// <value>Specifies whether the table can be used for creation of dynamic pages</value>
        [DataMember(Name = "useForPages", EmitDefaultValue = true)]
        public bool UseForPages { get; set; }

        /// <summary>
        /// Specifies whether child tables can be created
        /// </summary>
        /// <value>Specifies whether child tables can be created</value>
        [DataMember(Name = "allowChildTables", EmitDefaultValue = true)]
        public bool AllowChildTables { get; set; }

        /// <summary>
        /// Specifies creation of multi-level dynamic pages using child tables
        /// </summary>
        /// <value>Specifies creation of multi-level dynamic pages using child tables</value>
        [DataMember(Name = "enableChildTablePages", EmitDefaultValue = true)]
        public bool EnableChildTablePages { get; set; }

        /// <summary>
        /// Gets or Sets IsOrderedManually
        /// </summary>
        [DataMember(Name = "isOrderedManually", EmitDefaultValue = true)]
        public bool IsOrderedManually { get; set; }

        /// <summary>
        /// Specifies the key value pairs of the metadata fields with the associated column ids
        /// </summary>
        /// <value>Specifies the key value pairs of the metadata fields with the associated column ids</value>
        [DataMember(Name = "dynamicMetaTags", EmitDefaultValue = false)]
        public Dictionary<string, int> DynamicMetaTags { get; set; }

        /// <summary>
        /// Specifies whether the table can be read by public without authorization
        /// </summary>
        /// <value>Specifies whether the table can be read by public without authorization</value>
        [DataMember(Name = "allowPublicApiAccess", EmitDefaultValue = true)]
        public bool AllowPublicApiAccess { get; set; }

        /// <summary>
        /// Timestamp at which the table is created
        /// </summary>
        /// <value>Timestamp at which the table is created</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Timestamp at which the table is published recently
        /// </summary>
        /// <value>Timestamp at which the table is published recently</value>
        [DataMember(Name = "publishedAt", EmitDefaultValue = false)]
        public DateTime PublishedAt { get; set; }

        /// <summary>
        /// Timestamp at which the table is updated recently
        /// </summary>
        /// <value>Timestamp at which the table is updated recently</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HubDbTableV3 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  ColumnCount: ").Append(ColumnCount).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UseForPages: ").Append(UseForPages).Append("\n");
            sb.Append("  AllowChildTables: ").Append(AllowChildTables).Append("\n");
            sb.Append("  EnableChildTablePages: ").Append(EnableChildTablePages).Append("\n");
            sb.Append("  IsOrderedManually: ").Append(IsOrderedManually).Append("\n");
            sb.Append("  DynamicMetaTags: ").Append(DynamicMetaTags).Append("\n");
            sb.Append("  AllowPublicApiAccess: ").Append(AllowPublicApiAccess).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HubDbTableV3);
        }

        /// <summary>
        /// Returns true if HubDbTableV3 instances are equal
        /// </summary>
        /// <param name="input">Instance of HubDbTableV3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HubDbTableV3 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Published == input.Published ||
                    this.Published.Equals(input.Published)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.ColumnCount == input.ColumnCount ||
                    this.ColumnCount.Equals(input.ColumnCount)
                ) && 
                (
                    this.RowCount == input.RowCount ||
                    this.RowCount.Equals(input.RowCount)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UseForPages == input.UseForPages ||
                    this.UseForPages.Equals(input.UseForPages)
                ) && 
                (
                    this.AllowChildTables == input.AllowChildTables ||
                    this.AllowChildTables.Equals(input.AllowChildTables)
                ) && 
                (
                    this.EnableChildTablePages == input.EnableChildTablePages ||
                    this.EnableChildTablePages.Equals(input.EnableChildTablePages)
                ) && 
                (
                    this.IsOrderedManually == input.IsOrderedManually ||
                    this.IsOrderedManually.Equals(input.IsOrderedManually)
                ) && 
                (
                    this.DynamicMetaTags == input.DynamicMetaTags ||
                    this.DynamicMetaTags != null &&
                    input.DynamicMetaTags != null &&
                    this.DynamicMetaTags.SequenceEqual(input.DynamicMetaTags)
                ) && 
                (
                    this.AllowPublicApiAccess == input.AllowPublicApiAccess ||
                    this.AllowPublicApiAccess.Equals(input.AllowPublicApiAccess)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.PublishedAt == input.PublishedAt ||
                    (this.PublishedAt != null &&
                    this.PublishedAt.Equals(input.PublishedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Columns != null)
                {
                    hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Published.GetHashCode();
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                hashCode = (hashCode * 59) + this.ColumnCount.GetHashCode();
                hashCode = (hashCode * 59) + this.RowCount.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseForPages.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowChildTables.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableChildTablePages.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOrderedManually.GetHashCode();
                if (this.DynamicMetaTags != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicMetaTags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowPublicApiAccess.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.PublishedAt != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
