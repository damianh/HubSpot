/*
 * HubDB endpoints
 *
 * HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Cms.Hubdb.Client.OpenAPIDateConverter;

namespace HubSpot.Cms.Hubdb.Model
{
    /// <summary>
    /// HubDbTableRowV3BatchUpdateRequest
    /// </summary>
    [DataContract(Name = "HubDbTableRowV3BatchUpdateRequest")]
    public partial class HubDbTableRowV3BatchUpdateRequest : IEquatable<HubDbTableRowV3BatchUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HubDbTableRowV3BatchUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HubDbTableRowV3BatchUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HubDbTableRowV3BatchUpdateRequest" /> class.
        /// </summary>
        /// <param name="path">Specifies the value for &#x60;hs_path&#x60; column, which will be used as slug in the dynamic pages.</param>
        /// <param name="name">Specifies the value for &#x60;hs_name&#x60; column, which will be used as title in the dynamic pages.</param>
        /// <param name="childTableId">Specifies the value for the column child table id.</param>
        /// <param name="values">List of key value pairs with the column name and column value (required).</param>
        /// <param name="displayIndex">displayIndex.</param>
        /// <param name="id">The id of the table row (required).</param>
        public HubDbTableRowV3BatchUpdateRequest(string path = default(string), string name = default(string), int childTableId = default(int), Dictionary<string, Object> values = default(Dictionary<string, Object>), int displayIndex = default(int), long id = default(long))
        {
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for HubDbTableRowV3BatchUpdateRequest and cannot be null");
            }
            this.Values = values;
            this.Id = id;
            this.Path = path;
            this.Name = name;
            this.ChildTableId = childTableId;
            this.DisplayIndex = displayIndex;
        }

        /// <summary>
        /// Specifies the value for &#x60;hs_path&#x60; column, which will be used as slug in the dynamic pages
        /// </summary>
        /// <value>Specifies the value for &#x60;hs_path&#x60; column, which will be used as slug in the dynamic pages</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Specifies the value for &#x60;hs_name&#x60; column, which will be used as title in the dynamic pages
        /// </summary>
        /// <value>Specifies the value for &#x60;hs_name&#x60; column, which will be used as title in the dynamic pages</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the value for the column child table id
        /// </summary>
        /// <value>Specifies the value for the column child table id</value>
        [DataMember(Name = "childTableId", EmitDefaultValue = false)]
        public int ChildTableId { get; set; }

        /// <summary>
        /// List of key value pairs with the column name and column value
        /// </summary>
        /// <value>List of key value pairs with the column name and column value</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Values { get; set; }

        /// <summary>
        /// Gets or Sets DisplayIndex
        /// </summary>
        [DataMember(Name = "displayIndex", EmitDefaultValue = false)]
        public int DisplayIndex { get; set; }

        /// <summary>
        /// The id of the table row
        /// </summary>
        /// <value>The id of the table row</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HubDbTableRowV3BatchUpdateRequest {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ChildTableId: ").Append(ChildTableId).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  DisplayIndex: ").Append(DisplayIndex).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HubDbTableRowV3BatchUpdateRequest);
        }

        /// <summary>
        /// Returns true if HubDbTableRowV3BatchUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of HubDbTableRowV3BatchUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HubDbTableRowV3BatchUpdateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ChildTableId == input.ChildTableId ||
                    this.ChildTableId.Equals(input.ChildTableId)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.DisplayIndex == input.DisplayIndex ||
                    this.DisplayIndex.Equals(input.DisplayIndex)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChildTableId.GetHashCode();
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
