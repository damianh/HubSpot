/*
 * HubDB endpoints
 *
 * HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Cms.Hubdb.Client;
using HubSpot.Cms.Hubdb.Client.Auth;
using HubSpot.Cms.Hubdb.Model;

namespace HubSpot.Cms.Hubdb.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsBatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a set of rows
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0);

        /// <summary>
        /// Get a set of rows
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRowsWithHttpInfo(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0);
        /// <summary>
        /// Clone rows in batch
        /// </summary>
        /// <remarks>
        /// Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0);

        /// <summary>
        /// Clone rows in batch
        /// </summary>
        /// <remarks>
        /// Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0);
        /// <summary>
        /// Create rows in batch
        /// </summary>
        /// <remarks>
        /// Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, int operationIndex = 0);

        /// <summary>
        /// Create rows in batch
        /// </summary>
        /// <remarks>
        /// Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, int operationIndex = 0);
        /// <summary>
        /// Permanently deletes rows
        /// </summary>
        /// <remarks>
        /// Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0);

        /// <summary>
        /// Permanently deletes rows
        /// </summary>
        /// <remarks>
        /// Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0);
        /// <summary>
        /// Get a set of rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0);

        /// <summary>
        /// Get a set of rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0);
        /// <summary>
        /// Replace rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Replace rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Update rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsBatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a set of rows
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRowsAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a set of rows
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clone rows in batch
        /// </summary>
        /// <remarks>
        /// Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRowsAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clone rows in batch
        /// </summary>
        /// <remarks>
        /// Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create rows in batch
        /// </summary>
        /// <remarks>
        /// Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create rows in batch
        /// </summary>
        /// <remarks>
        /// Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Permanently deletes rows
        /// </summary>
        /// <remarks>
        /// Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRowsAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Permanently deletes rows
        /// </summary>
        /// <remarks>
        /// Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a set of rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRowsAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a set of rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsBatchApi : IRowsBatchApiSync, IRowsBatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RowsBatchApi : IRowsBatchApi
    {
        private HubSpot.Cms.Hubdb.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsBatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RowsBatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsBatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RowsBatchApi(string basePath)
        {
            this.Configuration = HubSpot.Cms.Hubdb.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.Hubdb.Client.GlobalConfiguration.Instance,
                new HubSpot.Cms.Hubdb.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Cms.Hubdb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.Hubdb.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Cms.Hubdb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsBatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RowsBatchApi(HubSpot.Cms.Hubdb.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Cms.Hubdb.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.Hubdb.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Cms.Hubdb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.Hubdb.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Cms.Hubdb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsBatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RowsBatchApi(HubSpot.Cms.Hubdb.Client.ISynchronousClient client, HubSpot.Cms.Hubdb.Client.IAsynchronousClient asyncClient, HubSpot.Cms.Hubdb.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Cms.Hubdb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Cms.Hubdb.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Cms.Hubdb.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Cms.Hubdb.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Cms.Hubdb.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a set of rows Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0)
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRowsWithHttpInfo(tableIdOrName, batchInputString);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a set of rows Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRowsWithHttpInfo(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows");
            }

            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows");
            }

            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a set of rows Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRowsAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRowsWithHttpInfoAsync(tableIdOrName, batchInputString, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a set of rows Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows");
            }

            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows");
            }


            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadReadTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone rows in batch Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0)
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRowsWithHttpInfo(tableIdOrName, batchInputString);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone rows in batch Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows");
            }

            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows");
            }

            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone rows in batch Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRowsAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRowsWithHttpInfoAsync(tableIdOrName, batchInputString, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone rows in batch Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">The JSON array of row ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows");
            }

            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows");
            }


            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneCloneDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create rows in batch Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, int operationIndex = 0)
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create rows in batch Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, int operationIndex = 0)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3Request' is set
            if (batchInputHubDbTableRowV3Request == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3Request' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows");
            }

            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3Request;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create rows in batch Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRowsWithHttpInfoAsync(tableIdOrName, batchInputHubDbTableRowV3Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create rows in batch Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3Request' is set
            if (batchInputHubDbTableRowV3Request == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3Request' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows");
            }


            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3Request;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateCreateDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently deletes rows Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0)
        {
            PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRowsWithHttpInfo(tableIdOrName, batchInputString);
        }

        /// <summary>
        /// Permanently deletes rows Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Cms.Hubdb.Client.ApiResponse<Object> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows");
            }

            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows");
            }

            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently deletes rows Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRowsAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRowsWithHttpInfoAsync(tableIdOrName, batchInputString, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Permanently deletes rows Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Hubdb.Client.ApiResponse<Object>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows");
            }

            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows");
            }


            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgePurgeDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a set of rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0)
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRowsWithHttpInfo(tableIdOrName, batchInputString);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a set of rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows");
            }

            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows");
            }

            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a set of rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRowsAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRowsWithHttpInfoAsync(tableIdOrName, batchInputString, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a set of rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputString">JSON array of row ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows");
            }

            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows");
            }


            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadReadDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace rows in batch in draft table Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0)
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace rows in batch in draft table Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3BatchUpdateRequest' is set
            if (batchInputHubDbTableRowV3BatchUpdateRequest == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3BatchUpdateRequest' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows");
            }

            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3BatchUpdateRequest;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace rows in batch in draft table Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRowsWithHttpInfoAsync(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace rows in batch in draft table Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3BatchUpdateRequest' is set
            if (batchInputHubDbTableRowV3BatchUpdateRequest == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3BatchUpdateRequest' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows");
            }


            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3BatchUpdateRequest;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceReplaceDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update rows in batch in draft table Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0)
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update rows in batch in draft table Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3BatchUpdateRequest' is set
            if (batchInputHubDbTableRowV3BatchUpdateRequest == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3BatchUpdateRequest' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows");
            }

            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3BatchUpdateRequest;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update rows in batch in draft table Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRowsWithHttpInfoAsync(tableIdOrName, batchInputHubDbTableRowV3BatchUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update rows in batch in draft table Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Hubdb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3BatchUpdateRequest">JSON array of row objects.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Hubdb.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3BatchUpdateRequest batchInputHubDbTableRowV3BatchUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3BatchUpdateRequest' is set
            if (batchInputHubDbTableRowV3BatchUpdateRequest == null)
            {
                throw new HubSpot.Cms.Hubdb.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3BatchUpdateRequest' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows");
            }


            HubSpot.Cms.Hubdb.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Hubdb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Hubdb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3BatchUpdateRequest;

            localVarRequestOptions.Operation = "RowsBatchApi.PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Hubdb.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateUpdateDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
