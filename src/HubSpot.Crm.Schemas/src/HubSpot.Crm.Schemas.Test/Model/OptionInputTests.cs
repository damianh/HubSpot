/*
 * Schemas
 *
 * The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object's type, properties, and associations. The schema can be uniquely identified by its **object type ID**.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using HubSpot.Crm.Schemas.Model;
using HubSpot.Crm.Schemas.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace HubSpot.Crm.Schemas.Test.Model
{
    /// <summary>
    ///  Class for testing OptionInput
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class OptionInputTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for OptionInput
        //private OptionInput instance;

        public OptionInputTests()
        {
            // TODO uncomment below to create an instance of OptionInput
            //instance = new OptionInput();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OptionInput
        /// </summary>
        [Fact]
        public void OptionInputInstanceTest()
        {
            // TODO uncomment below to test "IsType" OptionInput
            //Assert.IsType<OptionInput>(instance);
        }


        /// <summary>
        /// Test the property 'Label'
        /// </summary>
        [Fact]
        public void LabelTest()
        {
            // TODO unit test for the property 'Label'
        }
        /// <summary>
        /// Test the property 'Value'
        /// </summary>
        [Fact]
        public void ValueTest()
        {
            // TODO unit test for the property 'Value'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'DisplayOrder'
        /// </summary>
        [Fact]
        public void DisplayOrderTest()
        {
            // TODO unit test for the property 'DisplayOrder'
        }
        /// <summary>
        /// Test the property 'Hidden'
        /// </summary>
        [Fact]
        public void HiddenTest()
        {
            // TODO unit test for the property 'Hidden'
        }

    }

}
