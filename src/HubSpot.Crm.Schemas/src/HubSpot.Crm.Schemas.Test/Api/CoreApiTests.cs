/*
 * Schemas
 *
 * The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object's type, properties, and associations. The schema can be uniquely identified by its **object type ID**.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.Crm.Schemas.Client;
using HubSpot.Crm.Schemas.Api;
// uncomment below to import models
//using HubSpot.Crm.Schemas.Model;

namespace HubSpot.Crm.Schemas.Test.Api
{
    /// <summary>
    ///  Class for testing CoreApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CoreApiTests : IDisposable
    {
        private CoreApi instance;

        public CoreApiTests()
        {
            instance = new CoreApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CoreApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CoreApi
            //Assert.IsType<CoreApi>(instance);
        }

        /// <summary>
        /// Test DeleteCrmObjectSchemasV3SchemasObjectTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //bool? archived = null;
            //instance.DeleteCrmObjectSchemasV3SchemasObjectTypeArchive(objectType, archived);
        }

        /// <summary>
        /// Test DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation
        /// </summary>
        [Fact]
        public void DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string associationIdentifier = null;
            //instance.DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation(objectType, associationIdentifier);
        }

        /// <summary>
        /// Test GetCrmObjectSchemasV3SchemasGetAll
        /// </summary>
        [Fact]
        public void GetCrmObjectSchemasV3SchemasGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? archived = null;
            //var response = instance.GetCrmObjectSchemasV3SchemasGetAll(archived);
            //Assert.IsType<CollectionResponseObjectSchemaNoPaging>(response);
        }

        /// <summary>
        /// Test GetCrmObjectSchemasV3SchemasObjectTypeGetById
        /// </summary>
        [Fact]
        public void GetCrmObjectSchemasV3SchemasObjectTypeGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //var response = instance.GetCrmObjectSchemasV3SchemasObjectTypeGetById(objectType);
            //Assert.IsType<ObjectSchema>(response);
        }

        /// <summary>
        /// Test PatchCrmObjectSchemasV3SchemasObjectTypeUpdate
        /// </summary>
        [Fact]
        public void PatchCrmObjectSchemasV3SchemasObjectTypeUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //ObjectTypeDefinitionPatch objectTypeDefinitionPatch = null;
            //var response = instance.PatchCrmObjectSchemasV3SchemasObjectTypeUpdate(objectType, objectTypeDefinitionPatch);
            //Assert.IsType<ObjectTypeDefinition>(response);
        }

        /// <summary>
        /// Test PostCrmObjectSchemasV3SchemasCreate
        /// </summary>
        [Fact]
        public void PostCrmObjectSchemasV3SchemasCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ObjectSchemaEgg objectSchemaEgg = null;
            //var response = instance.PostCrmObjectSchemasV3SchemasCreate(objectSchemaEgg);
            //Assert.IsType<ObjectSchema>(response);
        }

        /// <summary>
        /// Test PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation
        /// </summary>
        [Fact]
        public void PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //AssociationDefinitionEgg associationDefinitionEgg = null;
            //var response = instance.PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation(objectType, associationDefinitionEgg);
            //Assert.IsType<AssociationDefinition>(response);
        }
    }
}
