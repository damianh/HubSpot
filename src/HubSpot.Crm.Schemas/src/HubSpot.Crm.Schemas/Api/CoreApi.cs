/*
 * Schemas
 *
 * The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object's type, properties, and associations. The schema can be uniquely identified by its **object type ID**.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Crm.Schemas.Client;
using HubSpot.Crm.Schemas.Client.Auth;
using HubSpot.Crm.Schemas.Model;

namespace HubSpot.Crm.Schemas.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCrmObjectSchemasV3SchemasObjectTypeArchive(string objectType, bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfo(string objectType, bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove an association
        /// </summary>
        /// <remarks>
        /// Removes an existing association from a schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation(string objectType, string associationIdentifier, int operationIndex = 0);

        /// <summary>
        /// Remove an association
        /// </summary>
        /// <remarks>
        /// Removes an existing association from a schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfo(string objectType, string associationIdentifier, int operationIndex = 0);
        /// <summary>
        /// Get all schemas
        /// </summary>
        /// <remarks>
        /// Returns all object schemas that have been defined for your account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseObjectSchemaNoPaging</returns>
        CollectionResponseObjectSchemaNoPaging GetCrmObjectSchemasV3SchemasGetAll(bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get all schemas
        /// </summary>
        /// <remarks>
        /// Returns all object schemas that have been defined for your account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseObjectSchemaNoPaging</returns>
        ApiResponse<CollectionResponseObjectSchemaNoPaging> GetCrmObjectSchemasV3SchemasGetAllWithHttpInfo(bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get an existing schema
        /// </summary>
        /// <remarks>
        /// Returns an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectSchema</returns>
        ObjectSchema GetCrmObjectSchemasV3SchemasObjectTypeGetById(string objectType, int operationIndex = 0);

        /// <summary>
        /// Get an existing schema
        /// </summary>
        /// <remarks>
        /// Returns an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectSchema</returns>
        ApiResponse<ObjectSchema> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfo(string objectType, int operationIndex = 0);
        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Update the details for an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectTypeDefinition</returns>
        ObjectTypeDefinition PatchCrmObjectSchemasV3SchemasObjectTypeUpdate(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, int operationIndex = 0);

        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Update the details for an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectTypeDefinition</returns>
        ApiResponse<ObjectTypeDefinition> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfo(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, int operationIndex = 0);
        /// <summary>
        /// Create a new schema
        /// </summary>
        /// <remarks>
        /// Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectSchema</returns>
        ObjectSchema PostCrmObjectSchemasV3SchemasCreate(ObjectSchemaEgg objectSchemaEgg, int operationIndex = 0);

        /// <summary>
        /// Create a new schema
        /// </summary>
        /// <remarks>
        /// Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectSchema</returns>
        ApiResponse<ObjectSchema> PostCrmObjectSchemasV3SchemasCreateWithHttpInfo(ObjectSchemaEgg objectSchemaEgg, int operationIndex = 0);
        /// <summary>
        /// Create an association
        /// </summary>
        /// <remarks>
        /// Defines a new association between the primary schema&#39;s object type and other object types.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssociationDefinition</returns>
        AssociationDefinition PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation(string objectType, AssociationDefinitionEgg associationDefinitionEgg, int operationIndex = 0);

        /// <summary>
        /// Create an association
        /// </summary>
        /// <remarks>
        /// Defines a new association between the primary schema&#39;s object type and other object types.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssociationDefinition</returns>
        ApiResponse<AssociationDefinition> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfo(string objectType, AssociationDefinitionEgg associationDefinitionEgg, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveAsync(string objectType, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfoAsync(string objectType, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an association
        /// </summary>
        /// <remarks>
        /// Removes an existing association from a schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationAsync(string objectType, string associationIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association
        /// </summary>
        /// <remarks>
        /// Removes an existing association from a schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfoAsync(string objectType, string associationIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all schemas
        /// </summary>
        /// <remarks>
        /// Returns all object schemas that have been defined for your account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseObjectSchemaNoPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseObjectSchemaNoPaging> GetCrmObjectSchemasV3SchemasGetAllAsync(bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all schemas
        /// </summary>
        /// <remarks>
        /// Returns all object schemas that have been defined for your account.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseObjectSchemaNoPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseObjectSchemaNoPaging>> GetCrmObjectSchemasV3SchemasGetAllWithHttpInfoAsync(bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an existing schema
        /// </summary>
        /// <remarks>
        /// Returns an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectSchema</returns>
        System.Threading.Tasks.Task<ObjectSchema> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdAsync(string objectType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an existing schema
        /// </summary>
        /// <remarks>
        /// Returns an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectSchema>> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfoAsync(string objectType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Update the details for an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectTypeDefinition</returns>
        System.Threading.Tasks.Task<ObjectTypeDefinition> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateAsync(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Update the details for an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectTypeDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectTypeDefinition>> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfoAsync(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new schema
        /// </summary>
        /// <remarks>
        /// Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectSchema</returns>
        System.Threading.Tasks.Task<ObjectSchema> PostCrmObjectSchemasV3SchemasCreateAsync(ObjectSchemaEgg objectSchemaEgg, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new schema
        /// </summary>
        /// <remarks>
        /// Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectSchema>> PostCrmObjectSchemasV3SchemasCreateWithHttpInfoAsync(ObjectSchemaEgg objectSchemaEgg, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an association
        /// </summary>
        /// <remarks>
        /// Defines a new association between the primary schema&#39;s object type and other object types.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssociationDefinition</returns>
        System.Threading.Tasks.Task<AssociationDefinition> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationAsync(string objectType, AssociationDefinitionEgg associationDefinitionEgg, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an association
        /// </summary>
        /// <remarks>
        /// Defines a new association between the primary schema&#39;s object type and other object types.
        /// </remarks>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssociationDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssociationDefinition>> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfoAsync(string objectType, AssociationDefinitionEgg associationDefinitionEgg, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApi : ICoreApiSync, ICoreApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CoreApi : ICoreApi
    {
        private HubSpot.Crm.Schemas.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi(string basePath)
        {
            this.Configuration = HubSpot.Crm.Schemas.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Schemas.Client.GlobalConfiguration.Instance,
                new HubSpot.Crm.Schemas.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Crm.Schemas.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Schemas.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Crm.Schemas.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CoreApi(HubSpot.Crm.Schemas.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Crm.Schemas.Client.Configuration.MergeConfigurations(
                HubSpot.Crm.Schemas.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Crm.Schemas.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Crm.Schemas.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Crm.Schemas.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CoreApi(HubSpot.Crm.Schemas.Client.ISynchronousClient client, HubSpot.Crm.Schemas.Client.IAsynchronousClient asyncClient, HubSpot.Crm.Schemas.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Crm.Schemas.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Crm.Schemas.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Crm.Schemas.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Crm.Schemas.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Crm.Schemas.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a schema Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCrmObjectSchemasV3SchemasObjectTypeArchive(string objectType, bool? archived = default(bool?), int operationIndex = 0)
        {
            DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfo(objectType, archived);
        }

        /// <summary>
        /// Delete a schema Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Crm.Schemas.Client.ApiResponse<Object> DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfo(string objectType, bool? archived = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeArchive");
            }

            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "CoreApi.DeleteCrmObjectSchemasV3SchemasObjectTypeArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmObjectSchemasV3SchemasObjectTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a schema Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveAsync(string objectType, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfoAsync(objectType, archived, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a schema Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Schemas.Client.ApiResponse<Object>> DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfoAsync(string objectType, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeArchive");
            }


            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "CoreApi.DeleteCrmObjectSchemasV3SchemasObjectTypeArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmObjectSchemasV3SchemasObjectTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association Removes an existing association from a schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation(string objectType, string associationIdentifier, int operationIndex = 0)
        {
            DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfo(objectType, associationIdentifier);
        }

        /// <summary>
        /// Remove an association Removes an existing association from a schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Crm.Schemas.Client.ApiResponse<Object> DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfo(string objectType, string associationIdentifier, int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation");
            }

            // verify the required parameter 'associationIdentifier' is set
            if (associationIdentifier == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'associationIdentifier' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation");
            }

            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationIdentifier", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(associationIdentifier)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/schemas/{objectType}/associations/{associationIdentifier}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association Removes an existing association from a schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationAsync(string objectType, string associationIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfoAsync(objectType, associationIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association Removes an existing association from a schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Schemas.Client.ApiResponse<Object>> DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfoAsync(string objectType, string associationIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation");
            }

            // verify the required parameter 'associationIdentifier' is set
            if (associationIdentifier == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'associationIdentifier' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation");
            }


            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationIdentifier", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(associationIdentifier)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/schemas/{objectType}/associations/{associationIdentifier}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all schemas Returns all object schemas that have been defined for your account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseObjectSchemaNoPaging</returns>
        public CollectionResponseObjectSchemaNoPaging GetCrmObjectSchemasV3SchemasGetAll(bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<CollectionResponseObjectSchemaNoPaging> localVarResponse = GetCrmObjectSchemasV3SchemasGetAllWithHttpInfo(archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all schemas Returns all object schemas that have been defined for your account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseObjectSchemaNoPaging</returns>
        public HubSpot.Crm.Schemas.Client.ApiResponse<CollectionResponseObjectSchemaNoPaging> GetCrmObjectSchemasV3SchemasGetAllWithHttpInfo(bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "CoreApi.GetCrmObjectSchemasV3SchemasGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseObjectSchemaNoPaging>("/crm/v3/schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmObjectSchemasV3SchemasGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all schemas Returns all object schemas that have been defined for your account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseObjectSchemaNoPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseObjectSchemaNoPaging> GetCrmObjectSchemasV3SchemasGetAllAsync(bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<CollectionResponseObjectSchemaNoPaging> localVarResponse = await GetCrmObjectSchemasV3SchemasGetAllWithHttpInfoAsync(archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all schemas Returns all object schemas that have been defined for your account.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseObjectSchemaNoPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Schemas.Client.ApiResponse<CollectionResponseObjectSchemaNoPaging>> GetCrmObjectSchemasV3SchemasGetAllWithHttpInfoAsync(bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "CoreApi.GetCrmObjectSchemasV3SchemasGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseObjectSchemaNoPaging>("/crm/v3/schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmObjectSchemasV3SchemasGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an existing schema Returns an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectSchema</returns>
        public ObjectSchema GetCrmObjectSchemasV3SchemasObjectTypeGetById(string objectType, int operationIndex = 0)
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<ObjectSchema> localVarResponse = GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfo(objectType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing schema Returns an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectSchema</returns>
        public HubSpot.Crm.Schemas.Client.ApiResponse<ObjectSchema> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfo(string objectType, int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmObjectSchemasV3SchemasObjectTypeGetById");
            }

            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.GetCrmObjectSchemasV3SchemasObjectTypeGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectSchema>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmObjectSchemasV3SchemasObjectTypeGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an existing schema Returns an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectSchema</returns>
        public async System.Threading.Tasks.Task<ObjectSchema> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdAsync(string objectType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<ObjectSchema> localVarResponse = await GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfoAsync(objectType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing schema Returns an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectSchema)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Schemas.Client.ApiResponse<ObjectSchema>> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfoAsync(string objectType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmObjectSchemasV3SchemasObjectTypeGetById");
            }


            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter

            localVarRequestOptions.Operation = "CoreApi.GetCrmObjectSchemasV3SchemasObjectTypeGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectSchema>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmObjectSchemasV3SchemasObjectTypeGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a schema Update the details for an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectTypeDefinition</returns>
        public ObjectTypeDefinition PatchCrmObjectSchemasV3SchemasObjectTypeUpdate(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, int operationIndex = 0)
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<ObjectTypeDefinition> localVarResponse = PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfo(objectType, objectTypeDefinitionPatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a schema Update the details for an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectTypeDefinition</returns>
        public HubSpot.Crm.Schemas.Client.ApiResponse<ObjectTypeDefinition> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfo(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PatchCrmObjectSchemasV3SchemasObjectTypeUpdate");
            }

            // verify the required parameter 'objectTypeDefinitionPatch' is set
            if (objectTypeDefinitionPatch == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectTypeDefinitionPatch' when calling CoreApi->PatchCrmObjectSchemasV3SchemasObjectTypeUpdate");
            }

            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectTypeDefinitionPatch;

            localVarRequestOptions.Operation = "CoreApi.PatchCrmObjectSchemasV3SchemasObjectTypeUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ObjectTypeDefinition>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmObjectSchemasV3SchemasObjectTypeUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a schema Update the details for an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectTypeDefinition</returns>
        public async System.Threading.Tasks.Task<ObjectTypeDefinition> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateAsync(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<ObjectTypeDefinition> localVarResponse = await PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfoAsync(objectType, objectTypeDefinitionPatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a schema Update the details for an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectTypeDefinition)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Schemas.Client.ApiResponse<ObjectTypeDefinition>> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfoAsync(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PatchCrmObjectSchemasV3SchemasObjectTypeUpdate");
            }

            // verify the required parameter 'objectTypeDefinitionPatch' is set
            if (objectTypeDefinitionPatch == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectTypeDefinitionPatch' when calling CoreApi->PatchCrmObjectSchemasV3SchemasObjectTypeUpdate");
            }


            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectTypeDefinitionPatch;

            localVarRequestOptions.Operation = "CoreApi.PatchCrmObjectSchemasV3SchemasObjectTypeUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ObjectTypeDefinition>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmObjectSchemasV3SchemasObjectTypeUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new schema Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectSchema</returns>
        public ObjectSchema PostCrmObjectSchemasV3SchemasCreate(ObjectSchemaEgg objectSchemaEgg, int operationIndex = 0)
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<ObjectSchema> localVarResponse = PostCrmObjectSchemasV3SchemasCreateWithHttpInfo(objectSchemaEgg);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new schema Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectSchema</returns>
        public HubSpot.Crm.Schemas.Client.ApiResponse<ObjectSchema> PostCrmObjectSchemasV3SchemasCreateWithHttpInfo(ObjectSchemaEgg objectSchemaEgg, int operationIndex = 0)
        {
            // verify the required parameter 'objectSchemaEgg' is set
            if (objectSchemaEgg == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectSchemaEgg' when calling CoreApi->PostCrmObjectSchemasV3SchemasCreate");
            }

            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = objectSchemaEgg;

            localVarRequestOptions.Operation = "CoreApi.PostCrmObjectSchemasV3SchemasCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectSchema>("/crm/v3/schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmObjectSchemasV3SchemasCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new schema Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectSchema</returns>
        public async System.Threading.Tasks.Task<ObjectSchema> PostCrmObjectSchemasV3SchemasCreateAsync(ObjectSchemaEgg objectSchemaEgg, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<ObjectSchema> localVarResponse = await PostCrmObjectSchemasV3SchemasCreateWithHttpInfoAsync(objectSchemaEgg, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new schema Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectSchema)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Schemas.Client.ApiResponse<ObjectSchema>> PostCrmObjectSchemasV3SchemasCreateWithHttpInfoAsync(ObjectSchemaEgg objectSchemaEgg, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectSchemaEgg' is set
            if (objectSchemaEgg == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectSchemaEgg' when calling CoreApi->PostCrmObjectSchemasV3SchemasCreate");
            }


            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = objectSchemaEgg;

            localVarRequestOptions.Operation = "CoreApi.PostCrmObjectSchemasV3SchemasCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectSchema>("/crm/v3/schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmObjectSchemasV3SchemasCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an association Defines a new association between the primary schema&#39;s object type and other object types.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssociationDefinition</returns>
        public AssociationDefinition PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation(string objectType, AssociationDefinitionEgg associationDefinitionEgg, int operationIndex = 0)
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<AssociationDefinition> localVarResponse = PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfo(objectType, associationDefinitionEgg);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an association Defines a new association between the primary schema&#39;s object type and other object types.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssociationDefinition</returns>
        public HubSpot.Crm.Schemas.Client.ApiResponse<AssociationDefinition> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfo(string objectType, AssociationDefinitionEgg associationDefinitionEgg, int operationIndex = 0)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation");
            }

            // verify the required parameter 'associationDefinitionEgg' is set
            if (associationDefinitionEgg == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'associationDefinitionEgg' when calling CoreApi->PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation");
            }

            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = associationDefinitionEgg;

            localVarRequestOptions.Operation = "CoreApi.PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssociationDefinition>("/crm/v3/schemas/{objectType}/associations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an association Defines a new association between the primary schema&#39;s object type and other object types.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssociationDefinition</returns>
        public async System.Threading.Tasks.Task<AssociationDefinition> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationAsync(string objectType, AssociationDefinitionEgg associationDefinitionEgg, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Crm.Schemas.Client.ApiResponse<AssociationDefinition> localVarResponse = await PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfoAsync(objectType, associationDefinitionEgg, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an association Defines a new association between the primary schema&#39;s object type and other object types.
        /// </summary>
        /// <exception cref="HubSpot.Crm.Schemas.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssociationDefinition)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Crm.Schemas.Client.ApiResponse<AssociationDefinition>> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfoAsync(string objectType, AssociationDefinitionEgg associationDefinitionEgg, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation");
            }

            // verify the required parameter 'associationDefinitionEgg' is set
            if (associationDefinitionEgg == null)
            {
                throw new HubSpot.Crm.Schemas.Client.ApiException(400, "Missing required parameter 'associationDefinitionEgg' when calling CoreApi->PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation");
            }


            HubSpot.Crm.Schemas.Client.RequestOptions localVarRequestOptions = new HubSpot.Crm.Schemas.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Crm.Schemas.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = associationDefinitionEgg;

            localVarRequestOptions.Operation = "CoreApi.PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Crm.Schemas.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssociationDefinition>("/crm/v3/schemas/{objectType}/associations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
