/*
 * CRM Objects
 *
 * CRM objects such as companies, contacts, deals, line items, products, tickets, and quotes are standard objects in HubSpotâ€™s CRM. These core building blocks support custom properties, store critical information, and play a central role in the HubSpot application.  ## Supported Object Types  This API provides access to collections of CRM objects, which return a map of property names to values. Each object type has its own set of default properties, which can be found by exploring the [CRM Object Properties API](https://developers.hubspot.com/docs/methods/crm-properties/crm-properties-overview).  |Object Type |Properties returned by default | |- -|- -| | `companies` | `name`, `domain` | | `contacts` | `firstname`, `lastname`, `email` | | `deals` | `dealname`, `amount`, `closedate`, `pipeline`, `dealstage` | | `products` | `name`, `description`, `price` | | `tickets` | `content`, `hs_pipeline`, `hs_pipeline_stage`, `hs_ticket_category`, `hs_ticket_priority`, `subject` |  Find a list of all properties for an object type using the [CRM Object Properties](https://developers.hubspot.com/docs/methods/crm-properties/get-properties) API. e.g. `GET https://api.hubapi.com/properties/v2/companies/properties`. Change the properties returned in the response using the `properties` array in the request body.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.Crm.Objects.Client;
using HubSpot.Crm.Objects.Api;
// uncomment below to import models
//using HubSpot.Crm.Objects.Model;

namespace HubSpot.Crm.Objects.Test.Api
{
    /// <summary>
    ///  Class for testing BasicApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BasicApiTests : IDisposable
    {
        private BasicApi instance;

        public BasicApiTests()
        {
            instance = new BasicApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BasicApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BasicApi
            //Assert.IsType<BasicApi>(instance);
        }

        /// <summary>
        /// Test DeleteCrmV3ObjectsObjectTypeObjectIdArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ObjectsObjectTypeObjectIdArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string objectId = null;
            //instance.DeleteCrmV3ObjectsObjectTypeObjectIdArchive(objectType, objectId);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsObjectTypeGetPage
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsObjectTypeGetPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //int? limit = null;
            //string after = null;
            //List<string> properties = null;
            //List<string> propertiesWithHistory = null;
            //List<string> associations = null;
            //bool? archived = null;
            //var response = instance.GetCrmV3ObjectsObjectTypeGetPage(objectType, limit, after, properties, propertiesWithHistory, associations, archived);
            //Assert.IsType<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsObjectTypeObjectIdGetById
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsObjectTypeObjectIdGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string objectId = null;
            //List<string> properties = null;
            //List<string> propertiesWithHistory = null;
            //List<string> associations = null;
            //bool? archived = null;
            //string idProperty = null;
            //var response = instance.GetCrmV3ObjectsObjectTypeObjectIdGetById(objectType, objectId, properties, propertiesWithHistory, associations, archived, idProperty);
            //Assert.IsType<SimplePublicObjectWithAssociations>(response);
        }

        /// <summary>
        /// Test PatchCrmV3ObjectsObjectTypeObjectIdUpdate
        /// </summary>
        [Fact]
        public void PatchCrmV3ObjectsObjectTypeObjectIdUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string objectId = null;
            //SimplePublicObjectInput simplePublicObjectInput = null;
            //string idProperty = null;
            //var response = instance.PatchCrmV3ObjectsObjectTypeObjectIdUpdate(objectType, objectId, simplePublicObjectInput, idProperty);
            //Assert.IsType<SimplePublicObject>(response);
        }

        /// <summary>
        /// Test PostCrmV3ObjectsObjectTypeCreate
        /// </summary>
        [Fact]
        public void PostCrmV3ObjectsObjectTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //SimplePublicObjectInputForCreate simplePublicObjectInputForCreate = null;
            //var response = instance.PostCrmV3ObjectsObjectTypeCreate(objectType, simplePublicObjectInputForCreate);
            //Assert.IsType<SimplePublicObject>(response);
        }
    }
}
