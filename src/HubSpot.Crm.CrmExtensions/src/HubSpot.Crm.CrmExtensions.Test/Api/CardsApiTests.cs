/*
 * CRM cards
 *
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.Crm.CrmExtensions.Client;
using HubSpot.Crm.CrmExtensions.Api;
// uncomment below to import models
//using HubSpot.Crm.CrmExtensions.Model;

namespace HubSpot.Crm.CrmExtensions.Test.Api
{
    /// <summary>
    ///  Class for testing CardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CardsApiTests : IDisposable
    {
        private CardsApi instance;

        public CardsApiTests()
        {
            instance = new CardsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CardsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CardsApi
            //Assert.IsType<CardsApi>(instance);
        }

        /// <summary>
        /// Test DeleteCrmV3ExtensionsCardsAppIdCardIdArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //string cardId = null;
            //instance.DeleteCrmV3ExtensionsCardsAppIdCardIdArchive(appId, cardId);
        }

        /// <summary>
        /// Test GetCrmV3ExtensionsCardsAppIdCardIdGetById
        /// </summary>
        [Fact]
        public void GetCrmV3ExtensionsCardsAppIdCardIdGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //string cardId = null;
            //var response = instance.GetCrmV3ExtensionsCardsAppIdCardIdGetById(appId, cardId);
            //Assert.IsType<CardResponse>(response);
        }

        /// <summary>
        /// Test GetCrmV3ExtensionsCardsAppIdGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ExtensionsCardsAppIdGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //var response = instance.GetCrmV3ExtensionsCardsAppIdGetAll(appId);
            //Assert.IsType<CardListResponse>(response);
        }

        /// <summary>
        /// Test PatchCrmV3ExtensionsCardsAppIdCardIdUpdate
        /// </summary>
        [Fact]
        public void PatchCrmV3ExtensionsCardsAppIdCardIdUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //string cardId = null;
            //CardPatchRequest cardPatchRequest = null;
            //var response = instance.PatchCrmV3ExtensionsCardsAppIdCardIdUpdate(appId, cardId, cardPatchRequest);
            //Assert.IsType<CardResponse>(response);
        }

        /// <summary>
        /// Test PostCrmV3ExtensionsCardsAppIdCreate
        /// </summary>
        [Fact]
        public void PostCrmV3ExtensionsCardsAppIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //CardCreateRequest cardCreateRequest = null;
            //var response = instance.PostCrmV3ExtensionsCardsAppIdCreate(appId, cardCreateRequest);
            //Assert.IsType<CardResponse>(response);
        }
    }
}
