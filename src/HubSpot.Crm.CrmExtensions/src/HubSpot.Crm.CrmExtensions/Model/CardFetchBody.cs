/*
 * CRM cards
 *
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Crm.CrmExtensions.Client.OpenAPIDateConverter;

namespace HubSpot.Crm.CrmExtensions.Model
{
    /// <summary>
    /// Configuration for this card&#39;s data fetch request.
    /// </summary>
    [DataContract(Name = "CardFetchBody")]
    public partial class CardFetchBody : IEquatable<CardFetchBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardFetchBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardFetchBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardFetchBody" /> class.
        /// </summary>
        /// <param name="targetUrl">URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed. (required).</param>
        /// <param name="objectTypes">An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here. (required).</param>
        public CardFetchBody(string targetUrl = default(string), List<CardObjectTypeBody> objectTypes = default(List<CardObjectTypeBody>))
        {
            // to ensure "targetUrl" is required (not null)
            if (targetUrl == null)
            {
                throw new ArgumentNullException("targetUrl is a required property for CardFetchBody and cannot be null");
            }
            this.TargetUrl = targetUrl;
            // to ensure "objectTypes" is required (not null)
            if (objectTypes == null)
            {
                throw new ArgumentNullException("objectTypes is a required property for CardFetchBody and cannot be null");
            }
            this.ObjectTypes = objectTypes;
        }

        /// <summary>
        /// URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.
        /// </summary>
        /// <value>URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.</value>
        [DataMember(Name = "targetUrl", IsRequired = true, EmitDefaultValue = true)]
        public string TargetUrl { get; set; }

        /// <summary>
        /// An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here.
        /// </summary>
        /// <value>An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here.</value>
        [DataMember(Name = "objectTypes", IsRequired = true, EmitDefaultValue = true)]
        public List<CardObjectTypeBody> ObjectTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardFetchBody {\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  ObjectTypes: ").Append(ObjectTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardFetchBody);
        }

        /// <summary>
        /// Returns true if CardFetchBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CardFetchBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardFetchBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TargetUrl == input.TargetUrl ||
                    (this.TargetUrl != null &&
                    this.TargetUrl.Equals(input.TargetUrl))
                ) && 
                (
                    this.ObjectTypes == input.ObjectTypes ||
                    this.ObjectTypes != null &&
                    input.ObjectTypes != null &&
                    this.ObjectTypes.SequenceEqual(input.ObjectTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TargetUrl.GetHashCode();
                }
                if (this.ObjectTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
