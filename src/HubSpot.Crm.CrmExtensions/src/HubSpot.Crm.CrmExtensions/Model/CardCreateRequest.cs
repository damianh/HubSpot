/*
 * CRM cards
 *
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Crm.CrmExtensions.Client.OpenAPIDateConverter;

namespace HubSpot.Crm.CrmExtensions.Model
{
    /// <summary>
    /// State of card definition to be created
    /// </summary>
    [DataContract(Name = "CardCreateRequest")]
    public partial class CardCreateRequest : IEquatable<CardCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardCreateRequest" /> class.
        /// </summary>
        /// <param name="title">The top-level title for this card. Displayed to users in the CRM UI. (required).</param>
        /// <param name="fetch">fetch (required).</param>
        /// <param name="display">display (required).</param>
        /// <param name="actions">actions (required).</param>
        public CardCreateRequest(string title = default(string), CardFetchBody fetch = default(CardFetchBody), CardDisplayBody display = default(CardDisplayBody), CardActions actions = default(CardActions))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CardCreateRequest and cannot be null");
            }
            this.Title = title;
            // to ensure "fetch" is required (not null)
            if (fetch == null)
            {
                throw new ArgumentNullException("fetch is a required property for CardCreateRequest and cannot be null");
            }
            this.Fetch = fetch;
            // to ensure "display" is required (not null)
            if (display == null)
            {
                throw new ArgumentNullException("display is a required property for CardCreateRequest and cannot be null");
            }
            this.Display = display;
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new ArgumentNullException("actions is a required property for CardCreateRequest and cannot be null");
            }
            this.Actions = actions;
        }

        /// <summary>
        /// The top-level title for this card. Displayed to users in the CRM UI.
        /// </summary>
        /// <value>The top-level title for this card. Displayed to users in the CRM UI.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Fetch
        /// </summary>
        [DataMember(Name = "fetch", IsRequired = true, EmitDefaultValue = true)]
        public CardFetchBody Fetch { get; set; }

        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name = "display", IsRequired = true, EmitDefaultValue = true)]
        public CardDisplayBody Display { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = true)]
        public CardActions Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardCreateRequest {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Fetch: ").Append(Fetch).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardCreateRequest);
        }

        /// <summary>
        /// Returns true if CardCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CardCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Fetch == input.Fetch ||
                    (this.Fetch != null &&
                    this.Fetch.Equals(input.Fetch))
                ) && 
                (
                    this.Display == input.Display ||
                    (this.Display != null &&
                    this.Display.Equals(input.Display))
                ) && 
                (
                    this.Actions == input.Actions ||
                    (this.Actions != null &&
                    this.Actions.Equals(input.Actions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Fetch != null)
                {
                    hashCode = (hashCode * 59) + this.Fetch.GetHashCode();
                }
                if (this.Display != null)
                {
                    hashCode = (hashCode * 59) + this.Display.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
