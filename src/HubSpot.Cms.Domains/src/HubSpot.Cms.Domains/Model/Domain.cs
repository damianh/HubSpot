/*
 * Domains
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Cms.Domains.Client.OpenAPIDateConverter;

namespace HubSpot.Cms.Domains.Model
{
    /// <summary>
    /// Domain
    /// </summary>
    [DataContract(Name = "Domain")]
    public partial class Domain : IEquatable<Domain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Domain() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        /// <param name="id">The unique ID of this domain. (required).</param>
        /// <param name="domain">The actual domain or sub-domain. e.g. www.hubspot.com (required).</param>
        /// <param name="primaryLandingPage">primaryLandingPage.</param>
        /// <param name="primaryEmail">primaryEmail.</param>
        /// <param name="primaryBlogPost">primaryBlogPost.</param>
        /// <param name="primarySitePage">primarySitePage.</param>
        /// <param name="primaryKnowledge">primaryKnowledge.</param>
        /// <param name="secondaryToDomain">secondaryToDomain.</param>
        /// <param name="isResolving">Whether the DNS for this domain is optimally configured for use with HubSpot. (required).</param>
        /// <param name="manuallyMarkedAsResolving">manuallyMarkedAsResolving.</param>
        /// <param name="isSslEnabled">isSslEnabled.</param>
        /// <param name="isSslOnly">isSslOnly.</param>
        /// <param name="isUsedForBlogPost">Whether the domain is used for CMS blog posts. (required).</param>
        /// <param name="isUsedForSitePage">Whether the domain is used for CMS site pages. (required).</param>
        /// <param name="isUsedForLandingPage">Whether the domain is used for CMS landing pages. (required).</param>
        /// <param name="isUsedForEmail">Whether the domain is used for CMS email web pages. (required).</param>
        /// <param name="isUsedForKnowledge">Whether the domain is used for CMS knowledge pages. (required).</param>
        /// <param name="correctCname">correctCname.</param>
        /// <param name="created">created.</param>
        /// <param name="updated">updated.</param>
        public Domain(string id = default(string), string domain = default(string), bool primaryLandingPage = default(bool), bool primaryEmail = default(bool), bool primaryBlogPost = default(bool), bool primarySitePage = default(bool), bool primaryKnowledge = default(bool), string secondaryToDomain = default(string), bool isResolving = default(bool), bool manuallyMarkedAsResolving = default(bool), bool isSslEnabled = default(bool), bool isSslOnly = default(bool), bool isUsedForBlogPost = default(bool), bool isUsedForSitePage = default(bool), bool isUsedForLandingPage = default(bool), bool isUsedForEmail = default(bool), bool isUsedForKnowledge = default(bool), string correctCname = default(string), DateTime created = default(DateTime), DateTime updated = default(DateTime))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Domain and cannot be null");
            }
            this.Id = id;
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new ArgumentNullException("domain is a required property for Domain and cannot be null");
            }
            this._Domain = domain;
            this.IsResolving = isResolving;
            this.IsUsedForBlogPost = isUsedForBlogPost;
            this.IsUsedForSitePage = isUsedForSitePage;
            this.IsUsedForLandingPage = isUsedForLandingPage;
            this.IsUsedForEmail = isUsedForEmail;
            this.IsUsedForKnowledge = isUsedForKnowledge;
            this.PrimaryLandingPage = primaryLandingPage;
            this.PrimaryEmail = primaryEmail;
            this.PrimaryBlogPost = primaryBlogPost;
            this.PrimarySitePage = primarySitePage;
            this.PrimaryKnowledge = primaryKnowledge;
            this.SecondaryToDomain = secondaryToDomain;
            this.ManuallyMarkedAsResolving = manuallyMarkedAsResolving;
            this.IsSslEnabled = isSslEnabled;
            this.IsSslOnly = isSslOnly;
            this.CorrectCname = correctCname;
            this.Created = created;
            this.Updated = updated;
        }

        /// <summary>
        /// The unique ID of this domain.
        /// </summary>
        /// <value>The unique ID of this domain.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The actual domain or sub-domain. e.g. www.hubspot.com
        /// </summary>
        /// <value>The actual domain or sub-domain. e.g. www.hubspot.com</value>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = true)]
        public string _Domain { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryLandingPage
        /// </summary>
        [DataMember(Name = "primaryLandingPage", EmitDefaultValue = true)]
        public bool PrimaryLandingPage { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryEmail
        /// </summary>
        [DataMember(Name = "primaryEmail", EmitDefaultValue = true)]
        public bool PrimaryEmail { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryBlogPost
        /// </summary>
        [DataMember(Name = "primaryBlogPost", EmitDefaultValue = true)]
        public bool PrimaryBlogPost { get; set; }

        /// <summary>
        /// Gets or Sets PrimarySitePage
        /// </summary>
        [DataMember(Name = "primarySitePage", EmitDefaultValue = true)]
        public bool PrimarySitePage { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryKnowledge
        /// </summary>
        [DataMember(Name = "primaryKnowledge", EmitDefaultValue = true)]
        public bool PrimaryKnowledge { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryToDomain
        /// </summary>
        [DataMember(Name = "secondaryToDomain", EmitDefaultValue = false)]
        public string SecondaryToDomain { get; set; }

        /// <summary>
        /// Whether the DNS for this domain is optimally configured for use with HubSpot.
        /// </summary>
        /// <value>Whether the DNS for this domain is optimally configured for use with HubSpot.</value>
        [DataMember(Name = "isResolving", IsRequired = true, EmitDefaultValue = true)]
        public bool IsResolving { get; set; }

        /// <summary>
        /// Gets or Sets ManuallyMarkedAsResolving
        /// </summary>
        [DataMember(Name = "manuallyMarkedAsResolving", EmitDefaultValue = true)]
        public bool ManuallyMarkedAsResolving { get; set; }

        /// <summary>
        /// Gets or Sets IsSslEnabled
        /// </summary>
        [DataMember(Name = "isSslEnabled", EmitDefaultValue = true)]
        public bool IsSslEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsSslOnly
        /// </summary>
        [DataMember(Name = "isSslOnly", EmitDefaultValue = true)]
        public bool IsSslOnly { get; set; }

        /// <summary>
        /// Whether the domain is used for CMS blog posts.
        /// </summary>
        /// <value>Whether the domain is used for CMS blog posts.</value>
        [DataMember(Name = "isUsedForBlogPost", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForBlogPost { get; set; }

        /// <summary>
        /// Whether the domain is used for CMS site pages.
        /// </summary>
        /// <value>Whether the domain is used for CMS site pages.</value>
        [DataMember(Name = "isUsedForSitePage", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForSitePage { get; set; }

        /// <summary>
        /// Whether the domain is used for CMS landing pages.
        /// </summary>
        /// <value>Whether the domain is used for CMS landing pages.</value>
        [DataMember(Name = "isUsedForLandingPage", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForLandingPage { get; set; }

        /// <summary>
        /// Whether the domain is used for CMS email web pages.
        /// </summary>
        /// <value>Whether the domain is used for CMS email web pages.</value>
        [DataMember(Name = "isUsedForEmail", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForEmail { get; set; }

        /// <summary>
        /// Whether the domain is used for CMS knowledge pages.
        /// </summary>
        /// <value>Whether the domain is used for CMS knowledge pages.</value>
        [DataMember(Name = "isUsedForKnowledge", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForKnowledge { get; set; }

        /// <summary>
        /// Gets or Sets CorrectCname
        /// </summary>
        [DataMember(Name = "correctCname", EmitDefaultValue = false)]
        public string CorrectCname { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Domain {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Domain: ").Append(_Domain).Append("\n");
            sb.Append("  PrimaryLandingPage: ").Append(PrimaryLandingPage).Append("\n");
            sb.Append("  PrimaryEmail: ").Append(PrimaryEmail).Append("\n");
            sb.Append("  PrimaryBlogPost: ").Append(PrimaryBlogPost).Append("\n");
            sb.Append("  PrimarySitePage: ").Append(PrimarySitePage).Append("\n");
            sb.Append("  PrimaryKnowledge: ").Append(PrimaryKnowledge).Append("\n");
            sb.Append("  SecondaryToDomain: ").Append(SecondaryToDomain).Append("\n");
            sb.Append("  IsResolving: ").Append(IsResolving).Append("\n");
            sb.Append("  ManuallyMarkedAsResolving: ").Append(ManuallyMarkedAsResolving).Append("\n");
            sb.Append("  IsSslEnabled: ").Append(IsSslEnabled).Append("\n");
            sb.Append("  IsSslOnly: ").Append(IsSslOnly).Append("\n");
            sb.Append("  IsUsedForBlogPost: ").Append(IsUsedForBlogPost).Append("\n");
            sb.Append("  IsUsedForSitePage: ").Append(IsUsedForSitePage).Append("\n");
            sb.Append("  IsUsedForLandingPage: ").Append(IsUsedForLandingPage).Append("\n");
            sb.Append("  IsUsedForEmail: ").Append(IsUsedForEmail).Append("\n");
            sb.Append("  IsUsedForKnowledge: ").Append(IsUsedForKnowledge).Append("\n");
            sb.Append("  CorrectCname: ").Append(CorrectCname).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Domain);
        }

        /// <summary>
        /// Returns true if Domain instances are equal
        /// </summary>
        /// <param name="input">Instance of Domain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Domain input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this._Domain == input._Domain ||
                    (this._Domain != null &&
                    this._Domain.Equals(input._Domain))
                ) && 
                (
                    this.PrimaryLandingPage == input.PrimaryLandingPage ||
                    this.PrimaryLandingPage.Equals(input.PrimaryLandingPage)
                ) && 
                (
                    this.PrimaryEmail == input.PrimaryEmail ||
                    this.PrimaryEmail.Equals(input.PrimaryEmail)
                ) && 
                (
                    this.PrimaryBlogPost == input.PrimaryBlogPost ||
                    this.PrimaryBlogPost.Equals(input.PrimaryBlogPost)
                ) && 
                (
                    this.PrimarySitePage == input.PrimarySitePage ||
                    this.PrimarySitePage.Equals(input.PrimarySitePage)
                ) && 
                (
                    this.PrimaryKnowledge == input.PrimaryKnowledge ||
                    this.PrimaryKnowledge.Equals(input.PrimaryKnowledge)
                ) && 
                (
                    this.SecondaryToDomain == input.SecondaryToDomain ||
                    (this.SecondaryToDomain != null &&
                    this.SecondaryToDomain.Equals(input.SecondaryToDomain))
                ) && 
                (
                    this.IsResolving == input.IsResolving ||
                    this.IsResolving.Equals(input.IsResolving)
                ) && 
                (
                    this.ManuallyMarkedAsResolving == input.ManuallyMarkedAsResolving ||
                    this.ManuallyMarkedAsResolving.Equals(input.ManuallyMarkedAsResolving)
                ) && 
                (
                    this.IsSslEnabled == input.IsSslEnabled ||
                    this.IsSslEnabled.Equals(input.IsSslEnabled)
                ) && 
                (
                    this.IsSslOnly == input.IsSslOnly ||
                    this.IsSslOnly.Equals(input.IsSslOnly)
                ) && 
                (
                    this.IsUsedForBlogPost == input.IsUsedForBlogPost ||
                    this.IsUsedForBlogPost.Equals(input.IsUsedForBlogPost)
                ) && 
                (
                    this.IsUsedForSitePage == input.IsUsedForSitePage ||
                    this.IsUsedForSitePage.Equals(input.IsUsedForSitePage)
                ) && 
                (
                    this.IsUsedForLandingPage == input.IsUsedForLandingPage ||
                    this.IsUsedForLandingPage.Equals(input.IsUsedForLandingPage)
                ) && 
                (
                    this.IsUsedForEmail == input.IsUsedForEmail ||
                    this.IsUsedForEmail.Equals(input.IsUsedForEmail)
                ) && 
                (
                    this.IsUsedForKnowledge == input.IsUsedForKnowledge ||
                    this.IsUsedForKnowledge.Equals(input.IsUsedForKnowledge)
                ) && 
                (
                    this.CorrectCname == input.CorrectCname ||
                    (this.CorrectCname != null &&
                    this.CorrectCname.Equals(input.CorrectCname))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this._Domain != null)
                {
                    hashCode = (hashCode * 59) + this._Domain.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PrimaryLandingPage.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryBlogPost.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimarySitePage.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryKnowledge.GetHashCode();
                if (this.SecondaryToDomain != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryToDomain.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsResolving.GetHashCode();
                hashCode = (hashCode * 59) + this.ManuallyMarkedAsResolving.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSslEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSslOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForBlogPost.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForSitePage.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForLandingPage.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForKnowledge.GetHashCode();
                if (this.CorrectCname != null)
                {
                    hashCode = (hashCode * 59) + this.CorrectCname.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.Updated != null)
                {
                    hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
