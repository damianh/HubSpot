/*
 * Domains
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Cms.Domains.Client;
using HubSpot.Cms.Domains.Client.Auth;
using HubSpot.Cms.Domains.Model;

namespace HubSpot.Cms.Domains.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a single domain
        /// </summary>
        /// <remarks>
        /// Returns a single domains with the id specified.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainId">The unique ID of the domain.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Domain</returns>
        Domain GetCmsV3DomainsDomainIdGetById(string domainId, int operationIndex = 0);

        /// <summary>
        /// Get a single domain
        /// </summary>
        /// <remarks>
        /// Returns a single domains with the id specified.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainId">The unique ID of the domain.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Domain</returns>
        ApiResponse<Domain> GetCmsV3DomainsDomainIdGetByIdWithHttpInfo(string domainId, int operationIndex = 0);
        /// <summary>
        /// Get current domains
        /// </summary>
        /// <remarks>
        /// Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return domains created at this date. (optional)</param>
        /// <param name="createdAfter">Only return domains created after this date. (optional)</param>
        /// <param name="createdBefore">Only return domains created before this date. (optional)</param>
        /// <param name="updatedAt">Only return domains updated at this date. (optional)</param>
        /// <param name="updatedAfter">Only return domains updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return domains updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseWithTotalDomainForwardPaging</returns>
        CollectionResponseWithTotalDomainForwardPaging GetCmsV3DomainsGetPage(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get current domains
        /// </summary>
        /// <remarks>
        /// Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return domains created at this date. (optional)</param>
        /// <param name="createdAfter">Only return domains created after this date. (optional)</param>
        /// <param name="createdBefore">Only return domains created before this date. (optional)</param>
        /// <param name="updatedAt">Only return domains updated at this date. (optional)</param>
        /// <param name="updatedAfter">Only return domains updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return domains updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalDomainForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalDomainForwardPaging> GetCmsV3DomainsGetPageWithHttpInfo(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a single domain
        /// </summary>
        /// <remarks>
        /// Returns a single domains with the id specified.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainId">The unique ID of the domain.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Domain</returns>
        System.Threading.Tasks.Task<Domain> GetCmsV3DomainsDomainIdGetByIdAsync(string domainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a single domain
        /// </summary>
        /// <remarks>
        /// Returns a single domains with the id specified.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainId">The unique ID of the domain.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Domain)</returns>
        System.Threading.Tasks.Task<ApiResponse<Domain>> GetCmsV3DomainsDomainIdGetByIdWithHttpInfoAsync(string domainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get current domains
        /// </summary>
        /// <remarks>
        /// Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return domains created at this date. (optional)</param>
        /// <param name="createdAfter">Only return domains created after this date. (optional)</param>
        /// <param name="createdBefore">Only return domains created before this date. (optional)</param>
        /// <param name="updatedAt">Only return domains updated at this date. (optional)</param>
        /// <param name="updatedAfter">Only return domains updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return domains updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalDomainForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalDomainForwardPaging> GetCmsV3DomainsGetPageAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get current domains
        /// </summary>
        /// <remarks>
        /// Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return domains created at this date. (optional)</param>
        /// <param name="createdAfter">Only return domains created after this date. (optional)</param>
        /// <param name="createdBefore">Only return domains created before this date. (optional)</param>
        /// <param name="updatedAt">Only return domains updated at this date. (optional)</param>
        /// <param name="updatedAfter">Only return domains updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return domains updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalDomainForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalDomainForwardPaging>> GetCmsV3DomainsGetPageWithHttpInfoAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApi : IDomainsApiSync, IDomainsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DomainsApi : IDomainsApi
    {
        private HubSpot.Cms.Domains.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainsApi(string basePath)
        {
            this.Configuration = HubSpot.Cms.Domains.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.Domains.Client.GlobalConfiguration.Instance,
                new HubSpot.Cms.Domains.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Cms.Domains.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.Domains.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Cms.Domains.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DomainsApi(HubSpot.Cms.Domains.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Cms.Domains.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.Domains.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Cms.Domains.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.Domains.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Cms.Domains.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DomainsApi(HubSpot.Cms.Domains.Client.ISynchronousClient client, HubSpot.Cms.Domains.Client.IAsynchronousClient asyncClient, HubSpot.Cms.Domains.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Cms.Domains.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Cms.Domains.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Cms.Domains.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Cms.Domains.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Cms.Domains.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a single domain Returns a single domains with the id specified.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainId">The unique ID of the domain.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Domain</returns>
        public Domain GetCmsV3DomainsDomainIdGetById(string domainId, int operationIndex = 0)
        {
            HubSpot.Cms.Domains.Client.ApiResponse<Domain> localVarResponse = GetCmsV3DomainsDomainIdGetByIdWithHttpInfo(domainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single domain Returns a single domains with the id specified.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainId">The unique ID of the domain.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Domain</returns>
        public HubSpot.Cms.Domains.Client.ApiResponse<Domain> GetCmsV3DomainsDomainIdGetByIdWithHttpInfo(string domainId, int operationIndex = 0)
        {
            // verify the required parameter 'domainId' is set
            if (domainId == null)
            {
                throw new HubSpot.Cms.Domains.Client.ApiException(400, "Missing required parameter 'domainId' when calling DomainsApi->GetCmsV3DomainsDomainIdGetById");
            }

            HubSpot.Cms.Domains.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domainId", HubSpot.Cms.Domains.Client.ClientUtils.ParameterToString(domainId)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.GetCmsV3DomainsDomainIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Domain>("/cms/v3/domains/{domainId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3DomainsDomainIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single domain Returns a single domains with the id specified.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainId">The unique ID of the domain.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Domain</returns>
        public async System.Threading.Tasks.Task<Domain> GetCmsV3DomainsDomainIdGetByIdAsync(string domainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Domains.Client.ApiResponse<Domain> localVarResponse = await GetCmsV3DomainsDomainIdGetByIdWithHttpInfoAsync(domainId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single domain Returns a single domains with the id specified.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainId">The unique ID of the domain.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Domain)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Domains.Client.ApiResponse<Domain>> GetCmsV3DomainsDomainIdGetByIdWithHttpInfoAsync(string domainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainId' is set
            if (domainId == null)
            {
                throw new HubSpot.Cms.Domains.Client.ApiException(400, "Missing required parameter 'domainId' when calling DomainsApi->GetCmsV3DomainsDomainIdGetById");
            }


            HubSpot.Cms.Domains.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domainId", HubSpot.Cms.Domains.Client.ClientUtils.ParameterToString(domainId)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.GetCmsV3DomainsDomainIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Domain>("/cms/v3/domains/{domainId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3DomainsDomainIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current domains Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return domains created at this date. (optional)</param>
        /// <param name="createdAfter">Only return domains created after this date. (optional)</param>
        /// <param name="createdBefore">Only return domains created before this date. (optional)</param>
        /// <param name="updatedAt">Only return domains updated at this date. (optional)</param>
        /// <param name="updatedAfter">Only return domains updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return domains updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseWithTotalDomainForwardPaging</returns>
        public CollectionResponseWithTotalDomainForwardPaging GetCmsV3DomainsGetPage(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.Domains.Client.ApiResponse<CollectionResponseWithTotalDomainForwardPaging> localVarResponse = GetCmsV3DomainsGetPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current domains Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return domains created at this date. (optional)</param>
        /// <param name="createdAfter">Only return domains created after this date. (optional)</param>
        /// <param name="createdBefore">Only return domains created before this date. (optional)</param>
        /// <param name="updatedAt">Only return domains updated at this date. (optional)</param>
        /// <param name="updatedAfter">Only return domains updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return domains updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalDomainForwardPaging</returns>
        public HubSpot.Cms.Domains.Client.ApiResponse<CollectionResponseWithTotalDomainForwardPaging> GetCmsV3DomainsGetPageWithHttpInfo(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.Domains.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "DomainsApi.GetCmsV3DomainsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalDomainForwardPaging>("/cms/v3/domains/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3DomainsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current domains Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return domains created at this date. (optional)</param>
        /// <param name="createdAfter">Only return domains created after this date. (optional)</param>
        /// <param name="createdBefore">Only return domains created before this date. (optional)</param>
        /// <param name="updatedAt">Only return domains updated at this date. (optional)</param>
        /// <param name="updatedAfter">Only return domains updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return domains updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalDomainForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalDomainForwardPaging> GetCmsV3DomainsGetPageAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Domains.Client.ApiResponse<CollectionResponseWithTotalDomainForwardPaging> localVarResponse = await GetCmsV3DomainsGetPageWithHttpInfoAsync(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current domains Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return domains created at this date. (optional)</param>
        /// <param name="createdAfter">Only return domains created after this date. (optional)</param>
        /// <param name="createdBefore">Only return domains created before this date. (optional)</param>
        /// <param name="updatedAt">Only return domains updated at this date. (optional)</param>
        /// <param name="updatedAfter">Only return domains updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return domains updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalDomainForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Domains.Client.ApiResponse<CollectionResponseWithTotalDomainForwardPaging>> GetCmsV3DomainsGetPageWithHttpInfoAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Cms.Domains.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "DomainsApi.GetCmsV3DomainsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Domains.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app", this.Configuration.GetApiKeyWithPrefix("private-app"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalDomainForwardPaging>("/cms/v3/domains/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3DomainsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
