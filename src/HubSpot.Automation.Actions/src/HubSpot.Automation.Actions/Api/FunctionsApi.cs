/*
 * Custom Workflow Actions
 *
 * Create custom workflow actions
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Automation.Actions.Client;
using HubSpot.Automation.Actions.Client.Auth;
using HubSpot.Automation.Actions.Model;

namespace HubSpot.Automation.Actions.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFunctionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a custom action function
        /// </summary>
        /// <remarks>
        /// Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType(string definitionId, string functionType, int appId, int operationIndex = 0);

        /// <summary>
        /// Delete a custom action function
        /// </summary>
        /// <remarks>
        /// Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeWithHttpInfo(string definitionId, string functionType, int appId, int operationIndex = 0);
        /// <summary>
        /// Delete a custom action function
        /// </summary>
        /// <remarks>
        /// Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0);

        /// <summary>
        /// Delete a custom action function
        /// </summary>
        /// <remarks>
        /// Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveWithHttpInfo(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0);
        /// <summary>
        /// Get a custom action function
        /// </summary>
        /// <remarks>
        /// Returns the given function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionFunction</returns>
        ActionFunction GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0);

        /// <summary>
        /// Get a custom action function
        /// </summary>
        /// <remarks>
        /// Returns the given function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionFunction</returns>
        ApiResponse<ActionFunction> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdWithHttpInfo(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0);
        /// <summary>
        /// Get a custom action function
        /// </summary>
        /// <remarks>
        /// Returns the given function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionFunction</returns>
        ActionFunction GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType(string definitionId, string functionType, int appId, int operationIndex = 0);

        /// <summary>
        /// Get a custom action function
        /// </summary>
        /// <remarks>
        /// Returns the given function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionFunction</returns>
        ApiResponse<ActionFunction> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeWithHttpInfo(string definitionId, string functionType, int appId, int operationIndex = 0);
        /// <summary>
        /// Get all custom action functions
        /// </summary>
        /// <remarks>
        /// Returns a list of all functions that are associated with the given custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseActionFunctionIdentifierNoPaging</returns>
        CollectionResponseActionFunctionIdentifierNoPaging GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage(string definitionId, int appId, int operationIndex = 0);

        /// <summary>
        /// Get all custom action functions
        /// </summary>
        /// <remarks>
        /// Returns a list of all functions that are associated with the given custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseActionFunctionIdentifierNoPaging</returns>
        ApiResponse<CollectionResponseActionFunctionIdentifierNoPaging> GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageWithHttpInfo(string definitionId, int appId, int operationIndex = 0);
        /// <summary>
        /// Create or replace a custom action function
        /// </summary>
        /// <remarks>
        /// Creates or replaces a function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionFunctionIdentifier</returns>
        ActionFunctionIdentifier PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType(string definitionId, string functionType, int appId, string body, int operationIndex = 0);

        /// <summary>
        /// Create or replace a custom action function
        /// </summary>
        /// <remarks>
        /// Creates or replaces a function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionFunctionIdentifier</returns>
        ApiResponse<ActionFunctionIdentifier> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithHttpInfo(string definitionId, string functionType, int appId, string body, int operationIndex = 0);
        /// <summary>
        /// Create or replace a custom action function
        /// </summary>
        /// <remarks>
        /// Creates or replaces a function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionFunctionIdentifier</returns>
        ActionFunctionIdentifier PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(string definitionId, string functionType, string functionId, int appId, string body, int operationIndex = 0);

        /// <summary>
        /// Create or replace a custom action function
        /// </summary>
        /// <remarks>
        /// Creates or replaces a function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionFunctionIdentifier</returns>
        ApiResponse<ActionFunctionIdentifier> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceWithHttpInfo(string definitionId, string functionType, string functionId, int appId, string body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFunctionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a custom action function
        /// </summary>
        /// <remarks>
        /// Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeAsync(string definitionId, string functionType, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a custom action function
        /// </summary>
        /// <remarks>
        /// Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeWithHttpInfoAsync(string definitionId, string functionType, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a custom action function
        /// </summary>
        /// <remarks>
        /// Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveAsync(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a custom action function
        /// </summary>
        /// <remarks>
        /// Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveWithHttpInfoAsync(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a custom action function
        /// </summary>
        /// <remarks>
        /// Returns the given function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionFunction</returns>
        System.Threading.Tasks.Task<ActionFunction> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdAsync(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a custom action function
        /// </summary>
        /// <remarks>
        /// Returns the given function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionFunction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionFunction>> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdWithHttpInfoAsync(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a custom action function
        /// </summary>
        /// <remarks>
        /// Returns the given function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionFunction</returns>
        System.Threading.Tasks.Task<ActionFunction> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeAsync(string definitionId, string functionType, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a custom action function
        /// </summary>
        /// <remarks>
        /// Returns the given function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionFunction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionFunction>> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeWithHttpInfoAsync(string definitionId, string functionType, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all custom action functions
        /// </summary>
        /// <remarks>
        /// Returns a list of all functions that are associated with the given custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseActionFunctionIdentifierNoPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseActionFunctionIdentifierNoPaging> GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageAsync(string definitionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all custom action functions
        /// </summary>
        /// <remarks>
        /// Returns a list of all functions that are associated with the given custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseActionFunctionIdentifierNoPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseActionFunctionIdentifierNoPaging>> GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageWithHttpInfoAsync(string definitionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or replace a custom action function
        /// </summary>
        /// <remarks>
        /// Creates or replaces a function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionFunctionIdentifier</returns>
        System.Threading.Tasks.Task<ActionFunctionIdentifier> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeAsync(string definitionId, string functionType, int appId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or replace a custom action function
        /// </summary>
        /// <remarks>
        /// Creates or replaces a function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionFunctionIdentifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionFunctionIdentifier>> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithHttpInfoAsync(string definitionId, string functionType, int appId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or replace a custom action function
        /// </summary>
        /// <remarks>
        /// Creates or replaces a function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionFunctionIdentifier</returns>
        System.Threading.Tasks.Task<ActionFunctionIdentifier> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceAsync(string definitionId, string functionType, string functionId, int appId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or replace a custom action function
        /// </summary>
        /// <remarks>
        /// Creates or replaces a function for a custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionFunctionIdentifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionFunctionIdentifier>> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceWithHttpInfoAsync(string definitionId, string functionType, string functionId, int appId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFunctionsApi : IFunctionsApiSync, IFunctionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FunctionsApi : IFunctionsApi
    {
        private HubSpot.Automation.Actions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FunctionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FunctionsApi(string basePath)
        {
            this.Configuration = HubSpot.Automation.Actions.Client.Configuration.MergeConfigurations(
                HubSpot.Automation.Actions.Client.GlobalConfiguration.Instance,
                new HubSpot.Automation.Actions.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Automation.Actions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Automation.Actions.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Automation.Actions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FunctionsApi(HubSpot.Automation.Actions.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Automation.Actions.Client.Configuration.MergeConfigurations(
                HubSpot.Automation.Actions.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Automation.Actions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Automation.Actions.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Automation.Actions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FunctionsApi(HubSpot.Automation.Actions.Client.ISynchronousClient client, HubSpot.Automation.Actions.Client.IAsynchronousClient asyncClient, HubSpot.Automation.Actions.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Automation.Actions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Automation.Actions.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Automation.Actions.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Automation.Actions.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Automation.Actions.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a custom action function Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType(string definitionId, string functionType, int appId, int operationIndex = 0)
        {
            DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeWithHttpInfo(definitionId, functionType, appId);
        }

        /// <summary>
        /// Delete a custom action function Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Automation.Actions.Client.ApiResponse<Object> DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeWithHttpInfo(string definitionId, string functionType, int appId, int operationIndex = 0)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType");
            }

            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom action function Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeAsync(string definitionId, string functionType, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeWithHttpInfoAsync(definitionId, functionType, appId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a custom action function Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Automation.Actions.Client.ApiResponse<Object>> DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeWithHttpInfoAsync(string definitionId, string functionType, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType");
            }


            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom action function Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0)
        {
            DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveWithHttpInfo(definitionId, functionType, functionId, appId);
        }

        /// <summary>
        /// Delete a custom action function Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Automation.Actions.Client.ApiResponse<Object> DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveWithHttpInfo(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
            }

            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
            }

            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom action function Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveAsync(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveWithHttpInfoAsync(definitionId, functionType, functionId, appId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a custom action function Delete a function for a custom workflow action. This will remove the function itself as well as removing the association between the function and the custom action. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Automation.Actions.Client.ApiResponse<Object>> DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveWithHttpInfoAsync(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
            }

            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
            }


            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a custom action function Returns the given function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionFunction</returns>
        public ActionFunction GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0)
        {
            HubSpot.Automation.Actions.Client.ApiResponse<ActionFunction> localVarResponse = GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdWithHttpInfo(definitionId, functionType, functionId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom action function Returns the given function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionFunction</returns>
        public HubSpot.Automation.Actions.Client.ApiResponse<ActionFunction> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdWithHttpInfo(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
            }

            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
            }

            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ActionFunction>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a custom action function Returns the given function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionFunction</returns>
        public async System.Threading.Tasks.Task<ActionFunction> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdAsync(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Automation.Actions.Client.ApiResponse<ActionFunction> localVarResponse = await GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdWithHttpInfoAsync(definitionId, functionType, functionId, appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom action function Returns the given function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionFunction)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Automation.Actions.Client.ApiResponse<ActionFunction>> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdWithHttpInfoAsync(string definitionId, string functionType, string functionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
            }

            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
            }


            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ActionFunction>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a custom action function Returns the given function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionFunction</returns>
        public ActionFunction GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType(string definitionId, string functionType, int appId, int operationIndex = 0)
        {
            HubSpot.Automation.Actions.Client.ApiResponse<ActionFunction> localVarResponse = GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeWithHttpInfo(definitionId, functionType, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom action function Returns the given function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionFunction</returns>
        public HubSpot.Automation.Actions.Client.ApiResponse<ActionFunction> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeWithHttpInfo(string definitionId, string functionType, int appId, int operationIndex = 0)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType");
            }

            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ActionFunction>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a custom action function Returns the given function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionFunction</returns>
        public async System.Threading.Tasks.Task<ActionFunction> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeAsync(string definitionId, string functionType, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Automation.Actions.Client.ApiResponse<ActionFunction> localVarResponse = await GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeWithHttpInfoAsync(definitionId, functionType, appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom action function Returns the given function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionFunction)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Automation.Actions.Client.ApiResponse<ActionFunction>> GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeWithHttpInfoAsync(string definitionId, string functionType, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType");
            }


            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ActionFunction>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all custom action functions Returns a list of all functions that are associated with the given custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseActionFunctionIdentifierNoPaging</returns>
        public CollectionResponseActionFunctionIdentifierNoPaging GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage(string definitionId, int appId, int operationIndex = 0)
        {
            HubSpot.Automation.Actions.Client.ApiResponse<CollectionResponseActionFunctionIdentifierNoPaging> localVarResponse = GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageWithHttpInfo(definitionId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom action functions Returns a list of all functions that are associated with the given custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseActionFunctionIdentifierNoPaging</returns>
        public HubSpot.Automation.Actions.Client.ApiResponse<CollectionResponseActionFunctionIdentifierNoPaging> GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageWithHttpInfo(string definitionId, int appId, int operationIndex = 0)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage");
            }

            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseActionFunctionIdentifierNoPaging>("/automation/v4/actions/{appId}/{definitionId}/functions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all custom action functions Returns a list of all functions that are associated with the given custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseActionFunctionIdentifierNoPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseActionFunctionIdentifierNoPaging> GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageAsync(string definitionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Automation.Actions.Client.ApiResponse<CollectionResponseActionFunctionIdentifierNoPaging> localVarResponse = await GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageWithHttpInfoAsync(definitionId, appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom action functions Returns a list of all functions that are associated with the given custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseActionFunctionIdentifierNoPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Automation.Actions.Client.ApiResponse<CollectionResponseActionFunctionIdentifierNoPaging>> GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageWithHttpInfoAsync(string definitionId, int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage");
            }


            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseActionFunctionIdentifierNoPaging>("/automation/v4/actions/{appId}/{definitionId}/functions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or replace a custom action function Creates or replaces a function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionFunctionIdentifier</returns>
        public ActionFunctionIdentifier PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType(string definitionId, string functionType, int appId, string body, int operationIndex = 0)
        {
            HubSpot.Automation.Actions.Client.ApiResponse<ActionFunctionIdentifier> localVarResponse = PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithHttpInfo(definitionId, functionType, appId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or replace a custom action function Creates or replaces a function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionFunctionIdentifier</returns>
        public HubSpot.Automation.Actions.Client.ApiResponse<ActionFunctionIdentifier> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithHttpInfo(string definitionId, string functionType, int appId, string body, int operationIndex = 0)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'body' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
            }

            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FunctionsApi.PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ActionFunctionIdentifier>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or replace a custom action function Creates or replaces a function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionFunctionIdentifier</returns>
        public async System.Threading.Tasks.Task<ActionFunctionIdentifier> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeAsync(string definitionId, string functionType, int appId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Automation.Actions.Client.ApiResponse<ActionFunctionIdentifier> localVarResponse = await PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithHttpInfoAsync(definitionId, functionType, appId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or replace a custom action function Creates or replaces a function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionFunctionIdentifier)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Automation.Actions.Client.ApiResponse<ActionFunctionIdentifier>> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithHttpInfoAsync(string definitionId, string functionType, int appId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'body' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
            }


            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FunctionsApi.PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ActionFunctionIdentifier>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or replace a custom action function Creates or replaces a function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionFunctionIdentifier</returns>
        public ActionFunctionIdentifier PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(string definitionId, string functionType, string functionId, int appId, string body, int operationIndex = 0)
        {
            HubSpot.Automation.Actions.Client.ApiResponse<ActionFunctionIdentifier> localVarResponse = PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceWithHttpInfo(definitionId, functionType, functionId, appId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or replace a custom action function Creates or replaces a function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionFunctionIdentifier</returns>
        public HubSpot.Automation.Actions.Client.ApiResponse<ActionFunctionIdentifier> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceWithHttpInfo(string definitionId, string functionType, string functionId, int appId, string body, int operationIndex = 0)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
            }

            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'body' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
            }

            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FunctionsApi.PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ActionFunctionIdentifier>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or replace a custom action function Creates or replaces a function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionFunctionIdentifier</returns>
        public async System.Threading.Tasks.Task<ActionFunctionIdentifier> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceAsync(string definitionId, string functionType, string functionId, int appId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Automation.Actions.Client.ApiResponse<ActionFunctionIdentifier> localVarResponse = await PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceWithHttpInfoAsync(definitionId, functionType, functionId, appId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or replace a custom action function Creates or replaces a function for a custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.Automation.Actions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="functionType">The type of function. This determines when the function will be called.</param>
        /// <param name="functionId">The ID qualifier for the function. This is used to specify which input field a function is associated with for &#x60;PRE_FETCH_OPTIONS&#x60; and &#x60;POST_FETCH_OPTIONS&#x60; function types.</param>
        /// <param name="appId"></param>
        /// <param name="body">The function source code. Must be valid JavaScript code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionFunctionIdentifier)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Automation.Actions.Client.ApiResponse<ActionFunctionIdentifier>> PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceWithHttpInfoAsync(string definitionId, string functionType, string functionId, int appId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'definitionId' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
            }

            // verify the required parameter 'functionType' is set
            if (functionType == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionType' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
            }

            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new HubSpot.Automation.Actions.Client.ApiException(400, "Missing required parameter 'body' when calling FunctionsApi->PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
            }


            HubSpot.Automation.Actions.Client.RequestOptions localVarRequestOptions = new HubSpot.Automation.Actions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Automation.Actions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionType", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionType)); // path parameter
            localVarRequestOptions.PathParameters.Add("functionId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Automation.Actions.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FunctionsApi.PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Automation.Actions.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ActionFunctionIdentifier>("/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
