// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>

using Refit;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace HubSpot.Marketing.Transactional
{
    public interface ITransactionalEmail
    {

        /// <summary>
        /// Asynchronously send a transactional email. Returns the status of the email send with a statusId that can be used to continuously query for the status using the Email Send Status API.
        /// </summary>
        [Post("/marketing/v3/transactional/single-email/send")]
        Task<EmailSendStatusView> SendEmail([Body] PublicSingleSendRequestEgg body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </summary>
        [Get("/marketing/v3/transactional/smtp-tokens")]
        Task<CollectionResponseSmtpApiTokenViewForwardPaging> GetTokensPage([Query(CollectionFormat.Multi)] string campaignName, [Query(CollectionFormat.Multi)] string emailCampaignId, [Query(CollectionFormat.Multi)] string after, [Query(CollectionFormat.Multi)] int? limit, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a SMTP API token.
        /// </summary>
        [Post("/marketing/v3/transactional/smtp-tokens")]
        Task CreateToken([Body] SmtpApiTokenRequestEgg body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Query a single token by ID.
        /// </summary>
        [Get("/marketing/v3/transactional/smtp-tokens/{tokenId}")]
        Task<SmtpApiTokenView> GetTokenById(string tokenId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a single token by ID.
        /// </summary>
        [Delete("/marketing/v3/transactional/smtp-tokens/{tokenId}")]
        Task ArchiveToken(string tokenId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </summary>
        [Post("/marketing/v3/transactional/smtp-tokens/{tokenId}/password-reset")]
        Task<SmtpApiTokenView> ResetPassword(string tokenId, CancellationToken cancellationToken = default);

    }


}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace HubSpot.Marketing.Transactional
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CollectionResponseSmtpApiTokenViewForwardPaging
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SmtpApiTokenView> Results { get; set; } = new System.Collections.ObjectModel.Collection<SmtpApiTokenView>();

        [System.Text.Json.Serialization.JsonPropertyName("paging")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ForwardPaging Paging { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes the status of an email send request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EmailSendStatusView
    {
        /// <summary>
        /// Identifier used to query the status of the send.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusId { get; set; }

        /// <summary>
        /// Result of the send.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sendResult")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EmailSendStatusViewSendResult SendResult { get; set; }

        /// <summary>
        /// Time when the send was requested.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requestedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset RequestedAt { get; set; }

        /// <summary>
        /// Time when the send began processing.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset StartedAt { get; set; }

        /// <summary>
        /// Time when the send was completed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset CompletedAt { get; set; }

        /// <summary>
        /// Status of the send request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EmailSendStatusViewStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public EventIdView EventId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ErrorDetail
    {
        /// <summary>
        /// A human readable message describing the error along with remediation steps where appropriate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// The name of the field or parameter in which the error was found.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("in")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string In { get; set; }

        /// <summary>
        /// The status code associated with the error detail
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

        /// <summary>
        /// A specific category that contains more specific detail about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SubCategory { get; set; }

        /// <summary>
        /// Context about the error condition
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("context")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Context { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A request object to create a SMTP API token
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SmtpApiTokenRequestEgg
    {
        /// <summary>
        /// Indicates whether a contact should be created for email recipients.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createContact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CreateContact { get; set; }

        /// <summary>
        /// A name for the campaign tied to the SMTP API token.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("campaignName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CampaignName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ForwardPaging
    {

        [System.Text.Json.Serialization.JsonPropertyName("next")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public NextPage Next { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A request to send a single transactional email asynchronously.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PublicSingleSendRequestEgg
    {
        /// <summary>
        /// The content ID for the transactional email, which can be found in email tool UI.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int EmailId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public PublicSingleSendEmail Message { get; set; } = new PublicSingleSendEmail();

        /// <summary>
        /// The contactProperties field is a map of contact property values. Each contact property value contains a name and value property. Each property will get set on the contact record and will be visible in the template under {{ contact.NAME }}. Use these properties when you want to set a contact property while you’re sending the email. For example, when sending a reciept you may want to set a last_paid_date property, as the sending of the receipt will have information about the last payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactProperties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, string> ContactProperties { get; set; }

        /// <summary>
        /// The customProperties field is a map of property values. Each property value contains a name and value property. Each property will be visible in the template under {{ custom.NAME }}.
        /// <br/>Note: Custom properties do not currently support arrays. To provide a listing in an email, one workaround is to build an HTML list (either with tables or ul) and specify it as a custom property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customProperties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, object> CustomProperties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The ID of a send event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EventIdView
    {
        /// <summary>
        /// Time of event creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Identifier of event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// A human readable message describing the error along with remediation steps where appropriate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// A unique identifier for the request. Include this value with any error reports or support tickets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid CorrelationId { get; set; }

        /// <summary>
        /// The error category
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }

        /// <summary>
        /// A specific category that contains more specific detail about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SubCategory { get; set; }

        /// <summary>
        /// further information about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("errors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ErrorDetail> Errors { get; set; }

        /// <summary>
        /// Context about the error condition
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("context")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Context { get; set; }

        /// <summary>
        /// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, string> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A SMTP API token provides both an ID and password that can be used to send email through the HubSpot SMTP API.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SmtpApiTokenView
    {
        /// <summary>
        /// User name to log into the HubSpot SMTP server.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Email address of the user that sent the token creation request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Password used to log into the HubSpot SMTP server.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("password")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Password { get; set; }

        /// <summary>
        /// Identifier assigned to the campaign provided in the token creation request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailCampaignId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmailCampaignId { get; set; }

        /// <summary>
        /// Timestamp generated when a token is created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Indicates whether a contact should be created for email recipients.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createContact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CreateContact { get; set; }

        /// <summary>
        /// A name for the campaign tied to the token.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("campaignName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CampaignName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class NextPage
    {

        [System.Text.Json.Serialization.JsonPropertyName("after")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string After { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("link")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Link { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A JSON object containing anything you want to override.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PublicSingleSendEmail
    {
        /// <summary>
        /// The From header for the email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string From { get; set; }

        /// <summary>
        /// The recipient of the email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("to")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }

        /// <summary>
        /// ID for a particular send. No more than one email will be sent per sendId.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sendId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SendId { get; set; }

        /// <summary>
        /// List of Reply-To header values for the email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("replyTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> ReplyTo { get; set; }

        /// <summary>
        /// List of email addresses to send as Cc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> Cc { get; set; }

        /// <summary>
        /// List of email addresses to send as Bcc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bcc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> Bcc { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum EmailSendStatusViewSendResult
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENT")]
        SENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IDEMPOTENT_IGNORE")]
        IDEMPOTENT_IGNORE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"QUEUED")]
        QUEUED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IDEMPOTENT_FAIL")]
        IDEMPOTENT_FAIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THROTTLED")]
        THROTTLED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_DISABLED")]
        EMAIL_DISABLED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PORTAL_SUSPENDED")]
        PORTAL_SUSPENDED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_TO_ADDRESS")]
        INVALID_TO_ADDRESS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_DOMAIN")]
        BLOCKED_DOMAIN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PREVIOUSLY_BOUNCED")]
        PREVIOUSLY_BOUNCED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_UNCONFIRMED")]
        EMAIL_UNCONFIRMED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PREVIOUS_SPAM")]
        PREVIOUS_SPAM = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PREVIOUSLY_UNSUBSCRIBED_MESSAGE")]
        PREVIOUSLY_UNSUBSCRIBED_MESSAGE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PREVIOUSLY_UNSUBSCRIBED_PORTAL")]
        PREVIOUSLY_UNSUBSCRIBED_PORTAL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_FROM_ADDRESS")]
        INVALID_FROM_ADDRESS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CAMPAIGN_CANCELLED")]
        CAMPAIGN_CANCELLED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILED")]
        VALIDATION_FAILED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MTA_IGNORE")]
        MTA_IGNORE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_ADDRESS")]
        BLOCKED_ADDRESS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PORTAL_OVER_LIMIT")]
        PORTAL_OVER_LIMIT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PORTAL_EXPIRED")]
        PORTAL_EXPIRED = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PORTAL_MISSING_MARKETING_SCOPE")]
        PORTAL_MISSING_MARKETING_SCOPE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_TEMPLATE_PROPERTIES")]
        MISSING_TEMPLATE_PROPERTIES = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_REQUIRED_PARAMETER")]
        MISSING_REQUIRED_PARAMETER = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PORTAL_AUTHENTICATION_FAILURE")]
        PORTAL_AUTHENTICATION_FAILURE = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_CONTENT")]
        MISSING_CONTENT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"CORRUPT_INPUT")]
        CORRUPT_INPUT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPLATE_RENDER_EXCEPTION")]
        TEMPLATE_RENDER_EXCEPTION = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"GRAYMAIL_SUPPRESSED")]
        GRAYMAIL_SUPPRESSED = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"UNCONFIGURED_SENDING_DOMAIN")]
        UNCONFIGURED_SENDING_DOMAIN = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"UNDELIVERABLE")]
        UNDELIVERABLE = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED_ABUSE")]
        CANCELLED_ABUSE = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"QUARANTINED_ADDRESS")]
        QUARANTINED_ADDRESS = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDRESS_ONLY_ACCEPTED_ON_PROD")]
        ADDRESS_ONLY_ACCEPTED_ON_PROD = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"PORTAL_NOT_AUTHORIZED_FOR_APPLICATION")]
        PORTAL_NOT_AUTHORIZED_FOR_APPLICATION = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDRESS_LIST_BOMBED")]
        ADDRESS_LIST_BOMBED = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDRESS_OPTED_OUT")]
        ADDRESS_OPTED_OUT = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT_FATIGUE_SUPPRESSED")]
        RECIPIENT_FATIGUE_SUPPRESSED = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_RECIPIENTS")]
        TOO_MANY_RECIPIENTS = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"PREVIOUSLY_UNSUBSCRIBED_BRAND")]
        PREVIOUSLY_UNSUBSCRIBED_BRAND = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_MARKETABLE_CONTACT")]
        NON_MARKETABLE_CONTACT = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"PREVIOUSLY_UNSUBSCRIBED_BUSINESS_UNIT")]
        PREVIOUSLY_UNSUBSCRIBED_BUSINESS_UNIT = 41,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum EmailSendStatusViewStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 3,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
