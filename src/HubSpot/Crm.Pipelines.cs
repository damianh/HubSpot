// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>

using Refit;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace HubSpot.Crm.Pipelines
{
    public interface ICRMPipelines
    {

        /// <summary>
        /// Return all pipelines for the object type specified by `{objectType}`.
        /// </summary>
        [Get("/crm/v3/pipelines/{objectType}")]
        Task<CollectionResponsePipelineNoPaging> GetAll(string objectType, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </summary>
        [Post("/crm/v3/pipelines/{objectType}")]
        Task Create(string objectType, [Body] PipelineInput body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Return a single pipeline object identified by its unique `{pipelineId}`.
        /// </summary>
        [Get("/crm/v3/pipelines/{objectType}/{pipelineId}")]
        Task<Pipeline> GetById(string objectType, string pipelineId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </summary>
        [Put("/crm/v3/pipelines/{objectType}/{pipelineId}")]
        Task<Pipeline> Replace(string objectType, string pipelineId, [Query(CollectionFormat.Multi)] bool? validateReferencesBeforeDelete, [Body] PipelineInput body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete the pipeline identified by `{pipelineId}`.
        /// </summary>
        [Delete("/crm/v3/pipelines/{objectType}/{pipelineId}")]
        Task Archive(string objectType, string pipelineId, [Query(CollectionFormat.Multi)] bool? validateReferencesBeforeDelete, CancellationToken cancellationToken = default);

        /// <summary>
        /// Perform a partial update of the pipeline identified by `{pipelineId}`. The updated pipeline will be returned in the response.
        /// </summary>
        [Patch("/crm/v3/pipelines/{objectType}/{pipelineId}")]
        Task<Pipeline> Update(string objectType, string pipelineId, [Query(CollectionFormat.Multi)] bool? validateReferencesBeforeDelete, [Body] PipelinePatchInput body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Return a reverse chronological list of all mutations that have occurred on the pipeline identified by `{pipelineId}`.
        /// </summary>
        [Get("/crm/v3/pipelines/{objectType}/{pipelineId}/audit")]
        Task<CollectionResponsePublicAuditInfoNoPaging> GetAudit(string objectType, string pipelineId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Return all the stages associated with the pipeline identified by `{pipelineId}`.
        /// </summary>
        [Get("/crm/v3/pipelines/{objectType}/{pipelineId}/stages")]
        Task<CollectionResponsePipelineStageNoPaging> GetAll(string objectType, string pipelineId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new stage associated with the pipeline identified by `{pipelineId}`. The entire stage object, including its unique ID, will be returned in the response.
        /// </summary>
        [Post("/crm/v3/pipelines/{objectType}/{pipelineId}/stages")]
        Task Create(string objectType, string pipelineId, [Body] PipelineStageInput body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Return the stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`.
        /// </summary>
        [Get("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}")]
        Task<PipelineStage> GetById(string objectType, string pipelineId, string stageId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </summary>
        [Put("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}")]
        Task<PipelineStage> Replace(string objectType, string pipelineId, string stageId, [Body] PipelineStageInput body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete the pipeline stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`.
        /// </summary>
        [Delete("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}")]
        Task Archive(string objectType, string pipelineId, string stageId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Perform a partial update of the pipeline stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </summary>
        [Patch("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}")]
        Task<PipelineStage> Update(string objectType, string pipelineId, string stageId, [Body] PipelineStagePatchInput body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Return a reverse chronological list of all mutations that have occurred on the pipeline stage identified by `{stageId}`.
        /// </summary>
        [Get("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}/audit")]
        Task<CollectionResponsePublicAuditInfoNoPaging> GetAudit(string objectType, string stageId, CancellationToken cancellationToken = default);

    }


}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace HubSpot.Crm.Pipelines
{
    using System = global::System;

    

    /// <summary>
    /// An input used to update some properties on a pipeline definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PipelineStagePatchInput
    {
        /// <summary>
        /// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Label { get; set; }

        /// <summary>
        /// Whether the pipeline is archived.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archived")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Archived { get; set; }

        /// <summary>
        /// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DisplayOrder { get; set; }

        /// <summary>
        /// A JSON object containing properties that are not present on all object pipelines.
        /// <br/>
        /// <br/>For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
        /// <br/>
        /// <br/>For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An input used to update some properties on a pipeline definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PipelinePatchInput
    {
        /// <summary>
        /// A unique label used to organize pipelines in HubSpot's UI
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Label { get; set; }

        /// <summary>
        /// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Whether the pipeline is archived. This property should only be provided when restoring an archived pipeline. If it's provided in any other call, the request will fail and a `400 Bad Request` will be returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archived")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Archived { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A pipeline stage definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PipelineStage
    {
        /// <summary>
        /// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int DisplayOrder { get; set; }

        /// <summary>
        /// A JSON object containing properties that are not present on all object pipelines.
        /// <br/>
        /// <br/>For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
        /// <br/>
        /// <br/>For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        /// <summary>
        /// A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline stage.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The date the pipeline stage was created. The stages on default pipelines will have createdAt = 0.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The date the pipeline was archived. `archivedAt` will only be present if the pipeline is archived.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archivedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset ArchivedAt { get; set; }

        /// <summary>
        /// The date the pipeline stage was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Whether the pipeline is archived.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archived")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Archived { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CollectionResponsePipelineStageNoPaging
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PipelineStage> Results { get; set; } = new System.Collections.ObjectModel.Collection<PipelineStage>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PublicAuditInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("portalId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int PortalId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identifier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Identifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("action")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Action { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rawObject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object RawObject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromUserId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int FromUserId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// A human readable message describing the error along with remediation steps where appropriate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// A unique identifier for the request. Include this value with any error reports or support tickets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid CorrelationId { get; set; }

        /// <summary>
        /// The error category
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }

        /// <summary>
        /// A specific category that contains more specific detail about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SubCategory { get; set; }

        /// <summary>
        /// further information about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("errors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ErrorDetail> Errors { get; set; }

        /// <summary>
        /// Context about the error condition
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("context")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Context { get; set; }

        /// <summary>
        /// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, string> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CollectionResponsePublicAuditInfoNoPaging
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PublicAuditInfo> Results { get; set; } = new System.Collections.ObjectModel.Collection<PublicAuditInfo>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A pipeline definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Pipeline
    {
        /// <summary>
        /// A unique label used to organize pipelines in HubSpot's UI
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int DisplayOrder { get; set; }

        /// <summary>
        /// A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The stages associated with the pipeline. They can be retrieved and updated via the pipeline stages endpoints.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PipelineStage> Stages { get; set; } = new System.Collections.ObjectModel.Collection<PipelineStage>();

        /// <summary>
        /// The date the pipeline was created. The default pipelines will have createdAt = 0.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The date the pipeline was archived. `archivedAt` will only be present if the pipeline is archived.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archivedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset ArchivedAt { get; set; }

        /// <summary>
        /// The date the pipeline was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Whether the pipeline is archived.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archived")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Archived { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ErrorDetail
    {
        /// <summary>
        /// A human readable message describing the error along with remediation steps where appropriate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// The name of the field or parameter in which the error was found.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("in")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string In { get; set; }

        /// <summary>
        /// The status code associated with the error detail
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

        /// <summary>
        /// A specific category that contains more specific detail about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SubCategory { get; set; }

        /// <summary>
        /// Context about the error condition
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("context")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Context { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An input used to create or replace a pipeline stage's definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PipelineStageInput
    {
        /// <summary>
        /// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int DisplayOrder { get; set; }

        /// <summary>
        /// A JSON object containing properties that are not present on all object pipelines.
        /// <br/>
        /// <br/>For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
        /// <br/>
        /// <br/>For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CollectionResponsePipelineNoPaging
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Pipeline> Results { get; set; } = new System.Collections.ObjectModel.Collection<Pipeline>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An input used to create or replace a pipeline's definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PipelineInput
    {
        /// <summary>
        /// A unique label used to organize pipelines in HubSpot's UI
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Pipeline stage inputs used to create the new or replacement pipeline.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PipelineStageInput> Stages { get; set; } = new System.Collections.ObjectModel.Collection<PipelineStageInput>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
