// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>

using Refit;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace HubSpot.Cms.Hubdb
{
    public interface IHubDBendpoints
    {

        /// <summary>
        /// Returns the details for the `published` version of each table defined in an account, including column definitions.
        /// </summary>
        [Get("/cms/v3/hubdb/tables")]
        Task<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetAllTables([Query(CollectionFormat.Multi)] IEnumerable<string> sort, [Query(CollectionFormat.Multi)] string after, [Query(CollectionFormat.Multi)] int? limit, [Query(CollectionFormat.Multi)] System.DateTimeOffset? createdAt, [Query(CollectionFormat.Multi)] System.DateTimeOffset? createdAfter, [Query(CollectionFormat.Multi)] System.DateTimeOffset? createdBefore, [Query(CollectionFormat.Multi)] System.DateTimeOffset? updatedAt, [Query(CollectionFormat.Multi)] System.DateTimeOffset? updatedAfter, [Query(CollectionFormat.Multi)] System.DateTimeOffset? updatedBefore, [Query(CollectionFormat.Multi)] bool? archived, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </summary>
        [Post("/cms/v3/hubdb/tables")]
        Task CreateTable([Body] HubDbTableV3Request body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the details for each draft table defined in the specified account, including column definitions.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/draft")]
        Task<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetAllDraftTables([Query(CollectionFormat.Multi)] IEnumerable<string> sort, [Query(CollectionFormat.Multi)] string after, [Query(CollectionFormat.Multi)] int? limit, [Query(CollectionFormat.Multi)] System.DateTimeOffset? createdAt, [Query(CollectionFormat.Multi)] System.DateTimeOffset? createdAfter, [Query(CollectionFormat.Multi)] System.DateTimeOffset? createdBefore, [Query(CollectionFormat.Multi)] System.DateTimeOffset? updatedAt, [Query(CollectionFormat.Multi)] System.DateTimeOffset? updatedAfter, [Query(CollectionFormat.Multi)] System.DateTimeOffset? updatedBefore, [Query(CollectionFormat.Multi)] bool? archived, CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the details for the `published` version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// 
        /// **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/{tableIdOrName}")]
        Task<HubDbTableV3> GetTableDetails(string tableIdOrName, [Query(CollectionFormat.Multi)] bool? includeForeignIds, [Query(CollectionFormat.Multi)] bool? archived, CancellationToken cancellationToken = default);

        /// <summary>
        /// Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </summary>
        [Delete("/cms/v3/hubdb/tables/{tableIdOrName}")]
        Task ArchiveTable(string tableIdOrName, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the details for the `draft` version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/{tableIdOrName}/draft")]
        Task<HubDbTableV3> GetDraftTableDetailsById(string tableIdOrName, [Query(CollectionFormat.Multi)] bool? includeForeignIds, [Query(CollectionFormat.Multi)] bool? archived, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the `draft` verion of the table. Use `publish` endpoint to push all the changes to the `published` version. To restore a table, include the query parameter `archived=true` and `"archived": false` in the json body.
        /// **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </summary>
        [Patch("/cms/v3/hubdb/tables/{tableIdOrName}/draft")]
        Task<HubDbTableV3> UpdateDraftTable(string tableIdOrName, [Query(CollectionFormat.Multi)] bool? includeForeignIds, [Query(CollectionFormat.Multi)] bool? archived, [Body] HubDbTableV3Request body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Clone an existing HubDB table. The `newName` and `newLabel` of the new table can be sent as JSON in the `body` parameter. This will create the cloned table as a `draft`.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/draft/clone")]
        Task<HubDbTableV3> CloneDraftTable(string tableIdOrName, [Body] HubDbTableCloneRequest body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Exports the `draft` version of a table to CSV / EXCEL format.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/{tableIdOrName}/draft/export")]
        Task<FileResponse> ExportDraftTable(string tableIdOrName, [Query(CollectionFormat.Multi)] string format, CancellationToken cancellationToken = default);

        /// <summary>
        /// Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the `draft` version of the table. Use `/publish` endpoint to push these changes to `published` version.
        /// This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as `config`.  The second part will be the CSV file you want to import and you can specify this with the name as `file`. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/draft/import")]
        Task<ImportResult> ImportDraftTable(string tableIdOrName, CancellationToken cancellationToken = default);

        /// <summary>
        /// Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/draft/publish")]
        Task<HubDbTableV3> PublishDraftTable(string tableIdOrName, [Query(CollectionFormat.Multi)] bool? includeForeignIds, CancellationToken cancellationToken = default);

        /// <summary>
        /// Replaces the data in the `draft` version of the table with values from the `published` version. Any unpublished changes in the `draft` will be lost after this call is made.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/draft/reset")]
        Task<HubDbTableV3> ResetDraftTable(string tableIdOrName, [Query(CollectionFormat.Multi)] bool? includeForeignIds, CancellationToken cancellationToken = default);

        /// <summary>
        /// Exports the `published` version of a table to CSV / EXCEL format.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/{tableIdOrName}/export")]
        Task<FileResponse> ExportTable(string tableIdOrName, [Query(CollectionFormat.Multi)] string format, CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a set of rows in the `published` version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters `column1__gt=5&sort=-column1`, API returns the rows with values for column `column1` greater than 5 and in the descending order of `column1` values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/{tableIdOrName}/rows")]
        Task<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetTableRows(string tableIdOrName, [Query(CollectionFormat.Multi)] IEnumerable<string> sort, [Query(CollectionFormat.Multi)] string after, [Query(CollectionFormat.Multi)] int? limit, [Query(CollectionFormat.Multi)] IEnumerable<string> properties, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a new row to a HubDB table. New rows will be added to the `draft` version of the table. Use `publish` endpoint to push these changes to published version.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows")]
        Task CreateTableRow(string tableIdOrName, [Body] HubDbTableRowV3Request body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns rows in the `published` version of the specified table, given a set of row ids.
        /// **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read")]
        Task<BatchResponseHubDbTableRowV3> ReadTableRows(string tableIdOrName, [Body] BatchInputString body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns rows in the `draft` version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters `column1__gt=5&sort=-column1`, API returns the rows with values for column `column1` greater than 5 and in the descending order of `column1` values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft")]
        Task<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> ReadDraftTableRows(string tableIdOrName, [Query(CollectionFormat.Multi)] IEnumerable<string> sort, [Query(CollectionFormat.Multi)] string after, [Query(CollectionFormat.Multi)] int? limit, [Query(CollectionFormat.Multi)] IEnumerable<string> properties, CancellationToken cancellationToken = default);

        /// <summary>
        /// Clones rows in the `draft` version of the specified table, given a set of row ids.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone")]
        Task<BatchResponseHubDbTableRowV3> CloneDraftTableRows(string tableIdOrName, [Body] BatchInputString body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates rows in the `draft` version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create")]
        Task CreateDraftTableRows(string tableIdOrName, [Body] BatchInputHubDbTableRowV3Request body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Permanently deletes rows from the `draft` version of the table, given a set of row ids.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge")]
        Task PurgeDraftTableRows(string tableIdOrName, [Body] BatchInputString body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns rows in the `draft` version of the specified table, given a set of row ids.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read")]
        Task<BatchResponseHubDbTableRowV3> ReadDraftTableRows(string tableIdOrName, [Body] BatchInputString body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Replaces multiple rows as a batch in the `draft` version of the table. See the endpoint `PUT /tables/{tableIdOrName}/rows/{rowId}/draft` for details on updating a single row.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace")]
        Task<BatchResponseHubDbTableRowV3> ReplaceDraftTableRows(string tableIdOrName, [Body] BatchInputHubDbTableRowV3BatchUpdateRequest body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates multiple rows as a batch in the `draft` version of the table. See the endpoint `PATCH /tables/{tableIdOrName}/rows/{rowId}/draft` for details on updating a single row.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update")]
        Task<BatchResponseHubDbTableRowV3> UpdateDraftTableRows(string tableIdOrName, [Body] BatchInputHubDbTableRowV3BatchUpdateRequest body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a single row by ID from a table's `published` version.
        /// **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}")]
        Task<HubDbTableRowV3> GetTableRow(string tableIdOrName, string rowId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a single row by ID from a table's `draft` version.
        /// </summary>
        [Get("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft")]
        Task<HubDbTableRowV3> GetDraftTableRowById(string tableIdOrName, string rowId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace a single row in the table's `draft` version.
        /// All the column values must be specified. If a column has a value in the target table and this request doesn't define that value, it will be deleted.
        /// See the `Create a row` endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        [Put("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft")]
        Task<HubDbTableRowV3> ReplaceDraftTableRow(string tableIdOrName, string rowId, [Body] HubDbTableRowV3Request body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Permanently deletes a row from a table's `draft` version.
        /// </summary>
        [Delete("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft")]
        Task PurgeDraftTableRow(string tableIdOrName, string rowId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Sparse updates a single row in the table's `draft` version.
        /// All the column values need not be specified. Only the columns or fields that needs to be modified can be specified.
        /// See the `Create a row` endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        [Patch("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft")]
        Task<HubDbTableRowV3> UpdateDraftTableRow(string tableIdOrName, string rowId, [Body] HubDbTableRowV3Request body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Clones a single row in the `draft` version of the table.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft/clone")]
        Task<HubDbTableRowV3> CloneDraftTableRow(string tableIdOrName, string rowId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </summary>
        [Post("/cms/v3/hubdb/tables/{tableIdOrName}/unpublish")]
        Task<HubDbTableV3> UnpublishTable(string tableIdOrName, [Query(CollectionFormat.Multi)] bool? includeForeignIds, CancellationToken cancellationToken = default);

    }


}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace HubSpot.Cms.Hubdb
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BatchInputString
    {

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class StandardError
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("category")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public ErrorCategory Category { get; set; } = new ErrorCategory();

        [System.Text.Json.Serialization.JsonPropertyName("subCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object SubCategory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ErrorDetail> Errors { get; set; } = new System.Collections.ObjectModel.Collection<ErrorDetail>();

        [System.Text.Json.Serialization.JsonPropertyName("context")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Context { get; set; } = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.ICollection<string>>();

        [System.Text.Json.Serialization.JsonPropertyName("links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Links { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class HubDbTableCloneRequest
    {
        /// <summary>
        /// The new name for the cloned table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("newName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NewName { get; set; }

        /// <summary>
        /// The new label for the cloned table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("newLabel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NewLabel { get; set; }

        /// <summary>
        /// Specifies whether to copy the rows during clone
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("copyRows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CopyRows { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SimpleUser
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CollectionResponseWithTotalHubDbTableV3ForwardPaging
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("results")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HubDbTableV3> Results { get; set; } = new System.Collections.ObjectModel.Collection<HubDbTableV3>();

        [System.Text.Json.Serialization.JsonPropertyName("paging")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ForwardPaging Paging { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BatchInputHubDbTableRowV3Request
    {

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HubDbTableRowV3Request> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<HubDbTableRowV3Request>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ErrorDetail
    {
        /// <summary>
        /// A human readable message describing the error along with remediation steps where appropriate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// The name of the field or parameter in which the error was found.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("in")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string In { get; set; }

        /// <summary>
        /// The status code associated with the error detail
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

        /// <summary>
        /// A specific category that contains more specific detail about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SubCategory { get; set; }

        /// <summary>
        /// Context about the error condition
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("context")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Context { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ForwardPaging
    {

        [System.Text.Json.Serialization.JsonPropertyName("next")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public NextPage Next { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CollectionResponseWithTotalHubDbTableRowV3ForwardPaging
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("results")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HubDbTableRowV3> Results { get; set; } = new System.Collections.ObjectModel.Collection<HubDbTableRowV3>();

        [System.Text.Json.Serialization.JsonPropertyName("paging")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ForwardPaging Paging { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Column
    {
        /// <summary>
        /// Name of the column
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Label of the column
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// Column Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Deleted { get; set; }

        /// <summary>
        /// Options to choose for select and multi-select columns
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("options")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Option> Options { get; set; }

        /// <summary>
        /// Column width for HubDB UI
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("width")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Width { get; set; }

        /// <summary>
        /// Foreign table id referenced
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignTableId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long ForeignTableId { get; set; }

        /// <summary>
        /// Foreign Column id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignColumnId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ForeignColumnId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        /// <summary>
        /// Foreign Ids
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ForeignId> ForeignIds { get; set; }

        /// <summary>
        /// Type of the column
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ColumnType Type { get; set; }

        /// <summary>
        /// Foreign ids by name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignIdsByName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, ForeignId> ForeignIdsByName { get; set; }

        /// <summary>
        /// Foreign ids
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignIdsById")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, ForeignId> ForeignIdsById { get; set; }

        /// <summary>
        /// Number of options available
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("optionCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int OptionCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Model for HubDB table
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class HubDbTableV3
    {
        /// <summary>
        /// Id of the table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        /// <summary>
        /// Name of the table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Label of the table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// List of columns in the table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("columns")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Column> Columns { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("published")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Published { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Deleted { get; set; }

        /// <summary>
        /// Number of columns including deleted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("columnCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ColumnCount { get; set; }

        /// <summary>
        /// Number of rows in the table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rowCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int RowCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SimpleUser CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updatedBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SimpleUser UpdatedBy { get; set; }

        /// <summary>
        /// Specifies whether the table can be used for creation of dynamic pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("useForPages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UseForPages { get; set; }

        /// <summary>
        /// Specifies whether child tables can be created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("allowChildTables")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AllowChildTables { get; set; }

        /// <summary>
        /// Specifies creation of multi-level dynamic pages using child tables
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enableChildTablePages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool EnableChildTablePages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isOrderedManually")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsOrderedManually { get; set; }

        /// <summary>
        /// Specifies the key value pairs of the metadata fields with the associated column ids
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dynamicMetaTags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, int> DynamicMetaTags { get; set; }

        /// <summary>
        /// Specifies whether the table can be read by public without authorization
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("allowPublicApiAccess")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AllowPublicApiAccess { get; set; }

        /// <summary>
        /// Timestamp at which the table is created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Timestamp at which the table is published recently
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("publishedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset PublishedAt { get; set; }

        /// <summary>
        /// Timestamp at which the table is updated recently
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset UpdatedAt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BatchResponseHubDbTableRowV3
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BatchResponseHubDbTableRowV3Status Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("results")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<HubDbTableRowV3> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset RequestedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset StartedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("completedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset CompletedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, string> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ForeignId
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The result of import operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ImportResult
    {
        /// <summary>
        /// List of errors during import
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("errors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Error>();

        /// <summary>
        /// Specifies number of rows imported
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rowsImported")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int RowsImported { get; set; }

        /// <summary>
        /// Specifies number of duplicate rows
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duplicateRows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int DuplicateRows { get; set; }

        /// <summary>
        /// Specifies whether row limit exceeded during import
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rowLimitExceeded")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool RowLimitExceeded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class HubDbTableV3Request
    {
        /// <summary>
        /// Name of the table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Label of the table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// Specifies whether the table can be used for creation of dynamic pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("useForPages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool UseForPages { get; set; }

        /// <summary>
        /// Specifies whether the table can be read by public without authorization
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("allowPublicApiAccess")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AllowPublicApiAccess { get; set; }

        /// <summary>
        /// Specifies whether child tables can be created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("allowChildTables")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool AllowChildTables { get; set; }

        /// <summary>
        /// Specifies creation of multi-level dynamic pages using child tables
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enableChildTablePages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool EnableChildTablePages { get; set; }

        /// <summary>
        /// List of columns in the table
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("columns")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ColumnRequest> Columns { get; set; }

        /// <summary>
        /// Specifies the key value pairs of the metadata fields with the associated column ids
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dynamicMetaTags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, int> DynamicMetaTags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// A human readable message describing the error along with remediation steps where appropriate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// A unique identifier for the request. Include this value with any error reports or support tickets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid CorrelationId { get; set; }

        /// <summary>
        /// The error category
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }

        /// <summary>
        /// A specific category that contains more specific detail about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SubCategory { get; set; }

        /// <summary>
        /// further information about the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("errors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ErrorDetail> Errors { get; set; }

        /// <summary>
        /// Context about the error condition
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("context")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Context { get; set; }

        /// <summary>
        /// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, string> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BatchResponseHubDbTableRowV3WithErrors
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BatchResponseHubDbTableRowV3WithErrorsStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("results")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HubDbTableRowV3> Results { get; set; } = new System.Collections.ObjectModel.Collection<HubDbTableRowV3>();

        [System.Text.Json.Serialization.JsonPropertyName("numErrors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int NumErrors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<StandardError> Errors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset RequestedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("completedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CompletedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, string> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ColumnRequest
    {
        /// <summary>
        /// Column Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Id { get; set; }

        /// <summary>
        /// Name of the column
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Label of the column
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>
        /// Type of the column
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ColumnRequestType Type { get; set; }

        /// <summary>
        /// Options to choose for select and multi-select columns
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("options")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Option> Options { get; set; } = new System.Collections.ObjectModel.Collection<Option>();

        /// <summary>
        /// The id of another table to which the column refers/points to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignTableId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long ForeignTableId { get; set; }

        /// <summary>
        /// The id of the column from another table to which the column refers/points to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignColumnId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ForeignColumnId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Variant
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class HubDbTableRowV3BatchUpdateRequest
    {
        /// <summary>
        /// Specifies the value for `hs_path` column, which will be used as slug in the dynamic pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Path { get; set; }

        /// <summary>
        /// Specifies the value for `hs_name` column, which will be used as title in the dynamic pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        /// <summary>
        /// Specifies the value for the column child table id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("childTableId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ChildTableId { get; set; }

        /// <summary>
        /// List of key value pairs with the column name and column value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("values")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Variant> Values { get; set; } = new System.Collections.Generic.Dictionary<string, Variant>();

        [System.Text.Json.Serialization.JsonPropertyName("displayIndex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DisplayIndex { get; set; }

        /// <summary>
        /// The id of the table row
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ErrorCategory
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class HubDbTableRowV3
    {
        /// <summary>
        /// The id of the table row
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        /// <summary>
        /// List of key value pairs with the column name and column value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("values")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Values { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>
        /// Specifies the value for `hs_path` column, which will be used as slug in the dynamic pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Path { get; set; }

        /// <summary>
        /// Specifies the value for `hs_name` column, which will be used as title in the dynamic pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        /// <summary>
        /// Specifies the value for the column child table id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("childTableId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ChildTableId { get; set; }

        /// <summary>
        /// Timestamp at which the row is created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Timestamp at which the row is updated last time
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset UpdatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("publishedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset PublishedAt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class HubDbTableRowV3Request
    {
        /// <summary>
        /// Specifies the value for `hs_path` column, which will be used as slug in the dynamic pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Path { get; set; }

        /// <summary>
        /// Specifies the value for `hs_name` column, which will be used as title in the dynamic pages
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        /// <summary>
        /// Specifies the value for the column child table id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("childTableId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ChildTableId { get; set; }

        /// <summary>
        /// List of key value pairs with the column name and column value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("values")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Variant> Values { get; set; } = new System.Collections.Generic.Dictionary<string, Variant>();

        [System.Text.Json.Serialization.JsonPropertyName("displayIndex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DisplayIndex { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Option
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Order { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class NextPage
    {

        [System.Text.Json.Serialization.JsonPropertyName("after")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string After { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("link")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Link { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BatchInputHubDbTableRowV3BatchUpdateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HubDbTableRowV3BatchUpdateRequest> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<HubDbTableRowV3BatchUpdateRequest>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum ColumnType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NULL")]
        NULL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER")]
        NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"URL")]
        URL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE")]
        IMAGE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SELECT")]
        SELECT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTISELECT")]
        MULTISELECT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BOOLEAN")]
        BOOLEAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
        LOCATION = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
        DATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DATETIME")]
        DATETIME = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENCY")]
        CURRENCY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"RICHTEXT")]
        RICHTEXT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FOREIGN_ID")]
        FOREIGN_ID = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CTA")]
        CTA = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FILE")]
        FILE = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum BatchResponseHubDbTableRowV3Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum BatchResponseHubDbTableRowV3WithErrorsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum ColumnRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NULL")]
        NULL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER")]
        NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"URL")]
        URL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE")]
        IMAGE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SELECT")]
        SELECT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTISELECT")]
        MULTISELECT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BOOLEAN")]
        BOOLEAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
        LOCATION = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
        DATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DATETIME")]
        DATETIME = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENCY")]
        CURRENCY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"RICHTEXT")]
        RICHTEXT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FOREIGN_ID")]
        FOREIGN_ID = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CTA")]
        CTA = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FILE")]
        FILE = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
