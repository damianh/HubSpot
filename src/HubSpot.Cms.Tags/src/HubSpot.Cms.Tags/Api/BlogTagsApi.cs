/*
 * Blog Post endpoints
 *
 * Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Cms.Tags.Client;
using HubSpot.Cms.Tags.Client.Auth;
using HubSpot.Cms.Tags.Model;

namespace HubSpot.Cms.Tags.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogTagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Blog Tag
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCmsV3BlogsTagsObjectIdArchive(string objectId, bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete a Blog Tag
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfo(string objectId, bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get all Blog Tags
        /// </summary>
        /// <remarks>
        /// Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseWithTotalTagForwardPaging</returns>
        CollectionResponseWithTotalTagForwardPaging GetCmsV3BlogsTagsGetPage(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get all Blog Tags
        /// </summary>
        /// <remarks>
        /// Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalTagForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalTagForwardPaging> GetCmsV3BlogsTagsGetPageWithHttpInfo(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a Blog Tag
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tag</returns>
        Tag GetCmsV3BlogsTagsObjectIdGetById(string objectId, bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a Blog Tag
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfo(string objectId, bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Update a Blog Tag
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tag</returns>
        Tag PatchCmsV3BlogsTagsObjectIdUpdate(string objectId, Tag tag, bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Update a Blog Tag
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfo(string objectId, Tag tag, bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Delete a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostCmsV3BlogsTagsBatchArchiveArchiveBatch(BatchInputString batchInputString, int operationIndex = 0);

        /// <summary>
        /// Delete a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfo(BatchInputString batchInputString, int operationIndex = 0);
        /// <summary>
        /// Create a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Create the Blog Tag objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseTag</returns>
        BatchResponseTag PostCmsV3BlogsTagsBatchCreateCreateBatch(BatchInputTag batchInputTag, int operationIndex = 0);

        /// <summary>
        /// Create a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Create the Blog Tag objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfo(BatchInputTag batchInputTag, int operationIndex = 0);
        /// <summary>
        /// Retrieve a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseTag</returns>
        BatchResponseTag PostCmsV3BlogsTagsBatchReadReadBatch(BatchInputString batchInputString, bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfo(BatchInputString batchInputString, bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Update a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Update the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseTag</returns>
        BatchResponseTag PostCmsV3BlogsTagsBatchUpdateUpdateBatch(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Update a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Update the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfo(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Create a new Blog Tag
        /// </summary>
        /// <remarks>
        /// Create a new Blog Tag.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tag</returns>
        Tag PostCmsV3BlogsTagsCreate(Tag tag, int operationIndex = 0);

        /// <summary>
        /// Create a new Blog Tag
        /// </summary>
        /// <remarks>
        /// Create a new Blog Tag.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PostCmsV3BlogsTagsCreateWithHttpInfo(Tag tag, int operationIndex = 0);
        /// <summary>
        /// Attach a Blog Tag to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Tag to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroup(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, int operationIndex = 0);

        /// <summary>
        /// Attach a Blog Tag to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Tag to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroupWithHttpInfo(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, int operationIndex = 0);
        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Tag
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tag</returns>
        Tag PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariation(TagCloneRequestVNext tagCloneRequestVNext, int operationIndex = 0);

        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Tag
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariationWithHttpInfo(TagCloneRequestVNext tagCloneRequestVNext, int operationIndex = 0);
        /// <summary>
        /// Detach a Blog Tag from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Tag from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroup(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, int operationIndex = 0);

        /// <summary>
        /// Detach a Blog Tag from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Tag from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroupWithHttpInfo(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, int operationIndex = 0);
        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangs(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, int operationIndex = 0);

        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangsWithHttpInfo(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, int operationIndex = 0);
        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Tag as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimary(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, int operationIndex = 0);

        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Tag as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimaryWithHttpInfo(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogTagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Blog Tag
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCmsV3BlogsTagsObjectIdArchiveAsync(string objectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Blog Tag
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfoAsync(string objectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Blog Tags
        /// </summary>
        /// <remarks>
        /// Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalTagForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalTagForwardPaging> GetCmsV3BlogsTagsGetPageAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Blog Tags
        /// </summary>
        /// <remarks>
        /// Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalTagForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalTagForwardPaging>> GetCmsV3BlogsTagsGetPageWithHttpInfoAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Blog Tag
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> GetCmsV3BlogsTagsObjectIdGetByIdAsync(string objectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Blog Tag
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfoAsync(string objectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Blog Tag
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PatchCmsV3BlogsTagsObjectIdUpdateAsync(string objectId, Tag tag, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Blog Tag
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfoAsync(string objectId, Tag tag, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3BlogsTagsBatchArchiveArchiveBatchAsync(BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfoAsync(BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Create the Blog Tag objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchCreateCreateBatchAsync(BatchInputTag batchInputTag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Create the Blog Tag objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputTag batchInputTag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchReadReadBatchAsync(BatchInputString batchInputString, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfoAsync(BatchInputString batchInputString, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Update the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchUpdateUpdateBatchAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Update the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfoAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Blog Tag
        /// </summary>
        /// <remarks>
        /// Create a new Blog Tag.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PostCmsV3BlogsTagsCreateAsync(Tag tag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Blog Tag
        /// </summary>
        /// <remarks>
        /// Create a new Blog Tag.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PostCmsV3BlogsTagsCreateWithHttpInfoAsync(Tag tag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach a Blog Tag to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Tag to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroupAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach a Blog Tag to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Tag to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroupWithHttpInfoAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Tag
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariationAsync(TagCloneRequestVNext tagCloneRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Tag
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariationWithHttpInfoAsync(TagCloneRequestVNext tagCloneRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detach a Blog Tag from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Tag from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroupAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detach a Blog Tag from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Tag from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroupWithHttpInfoAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangsAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangsWithHttpInfoAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Tag as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimaryAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Tag as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimaryWithHttpInfoAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogTagsApi : IBlogTagsApiSync, IBlogTagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlogTagsApi : IBlogTagsApi
    {
        private HubSpot.Cms.Tags.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlogTagsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlogTagsApi(string basePath)
        {
            this.Configuration = HubSpot.Cms.Tags.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.Tags.Client.GlobalConfiguration.Instance,
                new HubSpot.Cms.Tags.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Cms.Tags.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.Tags.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Cms.Tags.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogTagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlogTagsApi(HubSpot.Cms.Tags.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Cms.Tags.Client.Configuration.MergeConfigurations(
                HubSpot.Cms.Tags.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Cms.Tags.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Cms.Tags.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Cms.Tags.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogTagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BlogTagsApi(HubSpot.Cms.Tags.Client.ISynchronousClient client, HubSpot.Cms.Tags.Client.IAsynchronousClient asyncClient, HubSpot.Cms.Tags.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Cms.Tags.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Cms.Tags.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Cms.Tags.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Cms.Tags.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Cms.Tags.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a Blog Tag Delete the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCmsV3BlogsTagsObjectIdArchive(string objectId, bool? archived = default(bool?), int operationIndex = 0)
        {
            DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfo(objectId, archived);
        }

        /// <summary>
        /// Delete a Blog Tag Delete the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Object> DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfo(string objectId, bool? archived = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->DeleteCmsV3BlogsTagsObjectIdArchive");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.Cms.Tags.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "BlogTagsApi.DeleteCmsV3BlogsTagsObjectIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3BlogsTagsObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Blog Tag Delete the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCmsV3BlogsTagsObjectIdArchiveAsync(string objectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfoAsync(objectId, archived, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Blog Tag Delete the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Object>> DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfoAsync(string objectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->DeleteCmsV3BlogsTagsObjectIdArchive");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.Cms.Tags.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "BlogTagsApi.DeleteCmsV3BlogsTagsObjectIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3BlogsTagsObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Blog Tags Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionResponseWithTotalTagForwardPaging</returns>
        public CollectionResponseWithTotalTagForwardPaging GetCmsV3BlogsTagsGetPage(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<CollectionResponseWithTotalTagForwardPaging> localVarResponse = GetCmsV3BlogsTagsGetPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Blog Tags Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalTagForwardPaging</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<CollectionResponseWithTotalTagForwardPaging> GetCmsV3BlogsTagsGetPageWithHttpInfo(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "BlogTagsApi.GetCmsV3BlogsTagsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalTagForwardPaging>("/cms/v3/blogs/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsTagsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Blog Tags Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalTagForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalTagForwardPaging> GetCmsV3BlogsTagsGetPageAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<CollectionResponseWithTotalTagForwardPaging> localVarResponse = await GetCmsV3BlogsTagsGetPageWithHttpInfoAsync(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Blog Tags Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalTagForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<CollectionResponseWithTotalTagForwardPaging>> GetCmsV3BlogsTagsGetPageWithHttpInfoAsync(DateTime? createdAt = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "BlogTagsApi.GetCmsV3BlogsTagsGetPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalTagForwardPaging>("/cms/v3/blogs/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsTagsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Blog Tag Retrieve the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tag</returns>
        public Tag GetCmsV3BlogsTagsObjectIdGetById(string objectId, bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Tag> localVarResponse = GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfo(objectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Blog Tag Retrieve the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tag</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Tag> GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfo(string objectId, bool? archived = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->GetCmsV3BlogsTagsObjectIdGetById");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.Cms.Tags.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "BlogTagsApi.GetCmsV3BlogsTagsObjectIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Tag>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsTagsObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Blog Tag Retrieve the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> GetCmsV3BlogsTagsObjectIdGetByIdAsync(string objectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Tag> localVarResponse = await GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfoAsync(objectId, archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Blog Tag Retrieve the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Tag>> GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfoAsync(string objectId, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->GetCmsV3BlogsTagsObjectIdGetById");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.Cms.Tags.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            localVarRequestOptions.Operation = "BlogTagsApi.GetCmsV3BlogsTagsObjectIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Tag>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsTagsObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Tag Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tag</returns>
        public Tag PatchCmsV3BlogsTagsObjectIdUpdate(string objectId, Tag tag, bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Tag> localVarResponse = PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfo(objectId, tag, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Tag Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tag</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Tag> PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfo(string objectId, Tag tag, bool? archived = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->PatchCmsV3BlogsTagsObjectIdUpdate");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'tag' when calling BlogTagsApi->PatchCmsV3BlogsTagsObjectIdUpdate");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.Cms.Tags.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = tag;

            localVarRequestOptions.Operation = "BlogTagsApi.PatchCmsV3BlogsTagsObjectIdUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Tag>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsTagsObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Tag Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PatchCmsV3BlogsTagsObjectIdUpdateAsync(string objectId, Tag tag, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Tag> localVarResponse = await PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfoAsync(objectId, tag, archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Tag Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Tag>> PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfoAsync(string objectId, Tag tag, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->PatchCmsV3BlogsTagsObjectIdUpdate");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'tag' when calling BlogTagsApi->PatchCmsV3BlogsTagsObjectIdUpdate");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.Cms.Tags.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = tag;

            localVarRequestOptions.Operation = "BlogTagsApi.PatchCmsV3BlogsTagsObjectIdUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Tag>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsTagsObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a batch of Blog Tags Delete the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostCmsV3BlogsTagsBatchArchiveArchiveBatch(BatchInputString batchInputString, int operationIndex = 0)
        {
            PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfo(batchInputString);
        }

        /// <summary>
        /// Delete a batch of Blog Tags Delete the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Object> PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfo(BatchInputString batchInputString, int operationIndex = 0)
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchArchiveArchiveBatch");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsBatchArchiveArchiveBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/blogs/tags/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchArchiveArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a batch of Blog Tags Delete the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3BlogsTagsBatchArchiveArchiveBatchAsync(BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfoAsync(batchInputString, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a batch of Blog Tags Delete the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Object>> PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfoAsync(BatchInputString batchInputString, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchArchiveArchiveBatch");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsBatchArchiveArchiveBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/blogs/tags/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchArchiveArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of Blog Tags Create the Blog Tag objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseTag</returns>
        public BatchResponseTag PostCmsV3BlogsTagsBatchCreateCreateBatch(BatchInputTag batchInputTag, int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> localVarResponse = PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfo(batchInputTag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of Blog Tags Create the Blog Tag objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfo(BatchInputTag batchInputTag, int operationIndex = 0)
        {
            // verify the required parameter 'batchInputTag' is set
            if (batchInputTag == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'batchInputTag' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchCreateCreateBatch");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputTag;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsBatchCreateCreateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseTag>("/cms/v3/blogs/tags/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of Blog Tags Create the Blog Tag objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        public async System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchCreateCreateBatchAsync(BatchInputTag batchInputTag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> localVarResponse = await PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfoAsync(batchInputTag, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of Blog Tags Create the Blog Tag objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputTag batchInputTag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputTag' is set
            if (batchInputTag == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'batchInputTag' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchCreateCreateBatch");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputTag;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsBatchCreateCreateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseTag>("/cms/v3/blogs/tags/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a batch of Blog Tags Retrieve the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseTag</returns>
        public BatchResponseTag PostCmsV3BlogsTagsBatchReadReadBatch(BatchInputString batchInputString, bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> localVarResponse = PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfo(batchInputString, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a batch of Blog Tags Retrieve the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfo(BatchInputString batchInputString, bool? archived = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchReadReadBatch");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsBatchReadReadBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseTag>("/cms/v3/blogs/tags/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a batch of Blog Tags Retrieve the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        public async System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchReadReadBatchAsync(BatchInputString batchInputString, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> localVarResponse = await PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfoAsync(batchInputString, archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a batch of Blog Tags Retrieve the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfoAsync(BatchInputString batchInputString, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchReadReadBatch");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputString;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsBatchReadReadBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseTag>("/cms/v3/blogs/tags/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of Blog Tags Update the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseTag</returns>
        public BatchResponseTag PostCmsV3BlogsTagsBatchUpdateUpdateBatch(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> localVarResponse = PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfo(batchInputJsonNode, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of Blog Tags Update the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfo(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'batchInputJsonNode' is set
            if (batchInputJsonNode == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'batchInputJsonNode' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchUpdateUpdateBatch");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputJsonNode;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsBatchUpdateUpdateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseTag>("/cms/v3/blogs/tags/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchUpdateUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of Blog Tags Update the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        public async System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchUpdateUpdateBatchAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag> localVarResponse = await PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfoAsync(batchInputJsonNode, archived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of Blog Tags Update the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfoAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputJsonNode' is set
            if (batchInputJsonNode == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'batchInputJsonNode' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchUpdateUpdateBatch");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputJsonNode;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsBatchUpdateUpdateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseTag>("/cms/v3/blogs/tags/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchUpdateUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Blog Tag Create a new Blog Tag.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tag</returns>
        public Tag PostCmsV3BlogsTagsCreate(Tag tag, int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Tag> localVarResponse = PostCmsV3BlogsTagsCreateWithHttpInfo(tag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Blog Tag Create a new Blog Tag.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tag</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Tag> PostCmsV3BlogsTagsCreateWithHttpInfo(Tag tag, int operationIndex = 0)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'tag' when calling BlogTagsApi->PostCmsV3BlogsTagsCreate");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tag;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Tag>("/cms/v3/blogs/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Blog Tag Create a new Blog Tag.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PostCmsV3BlogsTagsCreateAsync(Tag tag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Tag> localVarResponse = await PostCmsV3BlogsTagsCreateWithHttpInfoAsync(tag, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Blog Tag Create a new Blog Tag.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Tag>> PostCmsV3BlogsTagsCreateWithHttpInfoAsync(Tag tag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'tag' when calling BlogTagsApi->PostCmsV3BlogsTagsCreate");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tag;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Tag>("/cms/v3/blogs/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a Blog Tag to a multi-language group Attach a Blog Tag to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroup(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Blog Tag to a multi-language group Attach a Blog Tag to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroupWithHttpInfo(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, int operationIndex = 0)
        {
            // verify the required parameter 'attachToLangPrimaryRequestVNext' is set
            if (attachToLangPrimaryRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'attachToLangPrimaryRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroup");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = attachToLangPrimaryRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/tags/multi-language/attach-to-lang-group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a Blog Tag to a multi-language group Attach a Blog Tag to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroupAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroupWithHttpInfoAsync(attachToLangPrimaryRequestVNext, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Blog Tag to a multi-language group Attach a Blog Tag to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroupWithHttpInfoAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'attachToLangPrimaryRequestVNext' is set
            if (attachToLangPrimaryRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'attachToLangPrimaryRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroup");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = attachToLangPrimaryRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/tags/multi-language/attach-to-lang-group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAttachToLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Tag
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tag</returns>
        public Tag PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariation(TagCloneRequestVNext tagCloneRequestVNext, int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Tag> localVarResponse = PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariationWithHttpInfo(tagCloneRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Tag
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tag</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Tag> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariationWithHttpInfo(TagCloneRequestVNext tagCloneRequestVNext, int operationIndex = 0)
        {
            // verify the required parameter 'tagCloneRequestVNext' is set
            if (tagCloneRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'tagCloneRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariation");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagCloneRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Tag>("/cms/v3/blogs/tags/multi-language/create-language-variation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Tag
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariationAsync(TagCloneRequestVNext tagCloneRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Tag> localVarResponse = await PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariationWithHttpInfoAsync(tagCloneRequestVNext, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Tag
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Tag>> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariationWithHttpInfoAsync(TagCloneRequestVNext tagCloneRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagCloneRequestVNext' is set
            if (tagCloneRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'tagCloneRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariation");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagCloneRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Tag>("/cms/v3/blogs/tags/multi-language/create-language-variation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationCreateLangVariation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detach a Blog Tag from a multi-language group Detach a Blog Tag from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroup(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a Blog Tag from a multi-language group Detach a Blog Tag from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroupWithHttpInfo(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, int operationIndex = 0)
        {
            // verify the required parameter 'detachFromLangGroupRequestVNext' is set
            if (detachFromLangGroupRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'detachFromLangGroupRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroup");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachFromLangGroupRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/tags/multi-language/detach-from-lang-group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detach a Blog Tag from a multi-language group Detach a Blog Tag from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroupAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroupWithHttpInfoAsync(detachFromLangGroupRequestVNext, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a Blog Tag from a multi-language group Detach a Blog Tag from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroupWithHttpInfoAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'detachFromLangGroupRequestVNext' is set
            if (detachFromLangGroupRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'detachFromLangGroupRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroup");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachFromLangGroupRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/tags/multi-language/detach-from-lang-group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupDetachFromLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangs(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, int operationIndex = 0)
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangsWithHttpInfo(updateLanguagesRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangsWithHttpInfo(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, int operationIndex = 0)
        {
            // verify the required parameter 'updateLanguagesRequestVNext' is set
            if (updateLanguagesRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'updateLanguagesRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangs");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLanguagesRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/tags/multi-language/update-languages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangsAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Cms.Tags.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangsWithHttpInfoAsync(updateLanguagesRequestVNext, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangsWithHttpInfoAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateLanguagesRequestVNext' is set
            if (updateLanguagesRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'updateLanguagesRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangs");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLanguagesRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/tags/multi-language/update-languages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesUpdateLangs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary language Set a Blog Tag as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimary(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, int operationIndex = 0)
        {
            PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext);
        }

        /// <summary>
        /// Set a new primary language Set a Blog Tag as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Cms.Tags.Client.ApiResponse<Object> PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimaryWithHttpInfo(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, int operationIndex = 0)
        {
            // verify the required parameter 'setNewLanguagePrimaryRequestVNext' is set
            if (setNewLanguagePrimaryRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'setNewLanguagePrimaryRequestVNext' when calling BlogTagsApi->PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimary");
            }

            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setNewLanguagePrimaryRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/cms/v3/blogs/tags/multi-language/set-new-lang-primary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary language Set a Blog Tag as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimaryAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimaryWithHttpInfoAsync(setNewLanguagePrimaryRequestVNext, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set a new primary language Set a Blog Tag as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.Cms.Tags.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Cms.Tags.Client.ApiResponse<Object>> PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimaryWithHttpInfoAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setNewLanguagePrimaryRequestVNext' is set
            if (setNewLanguagePrimaryRequestVNext == null)
            {
                throw new HubSpot.Cms.Tags.Client.ApiException(400, "Missing required parameter 'setNewLanguagePrimaryRequestVNext' when calling BlogTagsApi->PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimary");
            }


            HubSpot.Cms.Tags.Client.RequestOptions localVarRequestOptions = new HubSpot.Cms.Tags.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Cms.Tags.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setNewLanguagePrimaryRequestVNext;

            localVarRequestOptions.Operation = "BlogTagsApi.PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Cms.Tags.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/cms/v3/blogs/tags/multi-language/set-new-lang-primary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimarySetLangPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
