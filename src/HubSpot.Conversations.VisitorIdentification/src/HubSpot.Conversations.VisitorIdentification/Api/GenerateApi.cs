/*
 * Visitor Identification
 *
 * The Visitor Identification API allows you to pass identification information to the HubSpot chat widget for otherwise unknown visitors that were verified by your own authentication system.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Conversations.VisitorIdentification.Client;
using HubSpot.Conversations.VisitorIdentification.Client.Auth;
using HubSpot.Conversations.VisitorIdentification.Model;

namespace HubSpot.Conversations.VisitorIdentification.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGenerateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate a token
        /// </summary>
        /// <remarks>
        /// Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
        /// </remarks>
        /// <exception cref="HubSpot.Conversations.VisitorIdentification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificationTokenGenerationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentificationTokenResponse</returns>
        IdentificationTokenResponse PostVisitorIdentificationV3TokensCreateGenerateToken(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, int operationIndex = 0);

        /// <summary>
        /// Generate a token
        /// </summary>
        /// <remarks>
        /// Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
        /// </remarks>
        /// <exception cref="HubSpot.Conversations.VisitorIdentification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificationTokenGenerationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentificationTokenResponse</returns>
        ApiResponse<IdentificationTokenResponse> PostVisitorIdentificationV3TokensCreateGenerateTokenWithHttpInfo(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGenerateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Generate a token
        /// </summary>
        /// <remarks>
        /// Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
        /// </remarks>
        /// <exception cref="HubSpot.Conversations.VisitorIdentification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificationTokenGenerationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentificationTokenResponse</returns>
        System.Threading.Tasks.Task<IdentificationTokenResponse> PostVisitorIdentificationV3TokensCreateGenerateTokenAsync(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate a token
        /// </summary>
        /// <remarks>
        /// Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
        /// </remarks>
        /// <exception cref="HubSpot.Conversations.VisitorIdentification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificationTokenGenerationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentificationTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentificationTokenResponse>> PostVisitorIdentificationV3TokensCreateGenerateTokenWithHttpInfoAsync(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGenerateApi : IGenerateApiSync, IGenerateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GenerateApi : IGenerateApi
    {
        private HubSpot.Conversations.VisitorIdentification.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GenerateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GenerateApi(string basePath)
        {
            this.Configuration = HubSpot.Conversations.VisitorIdentification.Client.Configuration.MergeConfigurations(
                HubSpot.Conversations.VisitorIdentification.Client.GlobalConfiguration.Instance,
                new HubSpot.Conversations.VisitorIdentification.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Conversations.VisitorIdentification.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Conversations.VisitorIdentification.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Conversations.VisitorIdentification.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GenerateApi(HubSpot.Conversations.VisitorIdentification.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Conversations.VisitorIdentification.Client.Configuration.MergeConfigurations(
                HubSpot.Conversations.VisitorIdentification.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Conversations.VisitorIdentification.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Conversations.VisitorIdentification.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Conversations.VisitorIdentification.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GenerateApi(HubSpot.Conversations.VisitorIdentification.Client.ISynchronousClient client, HubSpot.Conversations.VisitorIdentification.Client.IAsynchronousClient asyncClient, HubSpot.Conversations.VisitorIdentification.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Conversations.VisitorIdentification.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Conversations.VisitorIdentification.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Conversations.VisitorIdentification.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Conversations.VisitorIdentification.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Conversations.VisitorIdentification.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Generate a token Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
        /// </summary>
        /// <exception cref="HubSpot.Conversations.VisitorIdentification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificationTokenGenerationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentificationTokenResponse</returns>
        public IdentificationTokenResponse PostVisitorIdentificationV3TokensCreateGenerateToken(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, int operationIndex = 0)
        {
            HubSpot.Conversations.VisitorIdentification.Client.ApiResponse<IdentificationTokenResponse> localVarResponse = PostVisitorIdentificationV3TokensCreateGenerateTokenWithHttpInfo(identificationTokenGenerationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a token Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
        /// </summary>
        /// <exception cref="HubSpot.Conversations.VisitorIdentification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificationTokenGenerationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentificationTokenResponse</returns>
        public HubSpot.Conversations.VisitorIdentification.Client.ApiResponse<IdentificationTokenResponse> PostVisitorIdentificationV3TokensCreateGenerateTokenWithHttpInfo(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'identificationTokenGenerationRequest' is set
            if (identificationTokenGenerationRequest == null)
            {
                throw new HubSpot.Conversations.VisitorIdentification.Client.ApiException(400, "Missing required parameter 'identificationTokenGenerationRequest' when calling GenerateApi->PostVisitorIdentificationV3TokensCreateGenerateToken");
            }

            HubSpot.Conversations.VisitorIdentification.Client.RequestOptions localVarRequestOptions = new HubSpot.Conversations.VisitorIdentification.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Conversations.VisitorIdentification.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Conversations.VisitorIdentification.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identificationTokenGenerationRequest;

            localVarRequestOptions.Operation = "GenerateApi.PostVisitorIdentificationV3TokensCreateGenerateToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Conversations.VisitorIdentification.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentificationTokenResponse>("/conversations/v3/visitor-identification/tokens/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVisitorIdentificationV3TokensCreateGenerateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a token Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
        /// </summary>
        /// <exception cref="HubSpot.Conversations.VisitorIdentification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificationTokenGenerationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentificationTokenResponse</returns>
        public async System.Threading.Tasks.Task<IdentificationTokenResponse> PostVisitorIdentificationV3TokensCreateGenerateTokenAsync(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Conversations.VisitorIdentification.Client.ApiResponse<IdentificationTokenResponse> localVarResponse = await PostVisitorIdentificationV3TokensCreateGenerateTokenWithHttpInfoAsync(identificationTokenGenerationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a token Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
        /// </summary>
        /// <exception cref="HubSpot.Conversations.VisitorIdentification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identificationTokenGenerationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentificationTokenResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Conversations.VisitorIdentification.Client.ApiResponse<IdentificationTokenResponse>> PostVisitorIdentificationV3TokensCreateGenerateTokenWithHttpInfoAsync(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identificationTokenGenerationRequest' is set
            if (identificationTokenGenerationRequest == null)
            {
                throw new HubSpot.Conversations.VisitorIdentification.Client.ApiException(400, "Missing required parameter 'identificationTokenGenerationRequest' when calling GenerateApi->PostVisitorIdentificationV3TokensCreateGenerateToken");
            }


            HubSpot.Conversations.VisitorIdentification.Client.RequestOptions localVarRequestOptions = new HubSpot.Conversations.VisitorIdentification.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Conversations.VisitorIdentification.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Conversations.VisitorIdentification.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identificationTokenGenerationRequest;

            localVarRequestOptions.Operation = "GenerateApi.PostVisitorIdentificationV3TokensCreateGenerateToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Conversations.VisitorIdentification.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentificationTokenResponse>("/conversations/v3/visitor-identification/tokens/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVisitorIdentificationV3TokensCreateGenerateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
