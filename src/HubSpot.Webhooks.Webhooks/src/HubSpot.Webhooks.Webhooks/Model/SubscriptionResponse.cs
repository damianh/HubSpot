/*
 * Webhooks API
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.Webhooks.Webhooks.Client.OpenAPIDateConverter;

namespace HubSpot.Webhooks.Webhooks.Model
{
    /// <summary>
    /// Complete details for an event subscription.
    /// </summary>
    [DataContract(Name = "SubscriptionResponse")]
    public partial class SubscriptionResponse : IEquatable<SubscriptionResponse>, IValidatableObject
    {
        /// <summary>
        /// Type of event to listen for. Can be one of &#x60;create&#x60;, &#x60;delete&#x60;, &#x60;deletedForPrivacy&#x60;, or &#x60;propertyChange&#x60;.
        /// </summary>
        /// <value>Type of event to listen for. Can be one of &#x60;create&#x60;, &#x60;delete&#x60;, &#x60;deletedForPrivacy&#x60;, or &#x60;propertyChange&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum ContactPropertyChange for value: contact.propertyChange
            /// </summary>
            [EnumMember(Value = "contact.propertyChange")]
            ContactPropertyChange = 1,

            /// <summary>
            /// Enum CompanyPropertyChange for value: company.propertyChange
            /// </summary>
            [EnumMember(Value = "company.propertyChange")]
            CompanyPropertyChange = 2,

            /// <summary>
            /// Enum DealPropertyChange for value: deal.propertyChange
            /// </summary>
            [EnumMember(Value = "deal.propertyChange")]
            DealPropertyChange = 3,

            /// <summary>
            /// Enum TicketPropertyChange for value: ticket.propertyChange
            /// </summary>
            [EnumMember(Value = "ticket.propertyChange")]
            TicketPropertyChange = 4,

            /// <summary>
            /// Enum ProductPropertyChange for value: product.propertyChange
            /// </summary>
            [EnumMember(Value = "product.propertyChange")]
            ProductPropertyChange = 5,

            /// <summary>
            /// Enum LineItemPropertyChange for value: line_item.propertyChange
            /// </summary>
            [EnumMember(Value = "line_item.propertyChange")]
            LineItemPropertyChange = 6,

            /// <summary>
            /// Enum ContactCreation for value: contact.creation
            /// </summary>
            [EnumMember(Value = "contact.creation")]
            ContactCreation = 7,

            /// <summary>
            /// Enum ContactDeletion for value: contact.deletion
            /// </summary>
            [EnumMember(Value = "contact.deletion")]
            ContactDeletion = 8,

            /// <summary>
            /// Enum ContactPrivacyDeletion for value: contact.privacyDeletion
            /// </summary>
            [EnumMember(Value = "contact.privacyDeletion")]
            ContactPrivacyDeletion = 9,

            /// <summary>
            /// Enum CompanyCreation for value: company.creation
            /// </summary>
            [EnumMember(Value = "company.creation")]
            CompanyCreation = 10,

            /// <summary>
            /// Enum CompanyDeletion for value: company.deletion
            /// </summary>
            [EnumMember(Value = "company.deletion")]
            CompanyDeletion = 11,

            /// <summary>
            /// Enum DealCreation for value: deal.creation
            /// </summary>
            [EnumMember(Value = "deal.creation")]
            DealCreation = 12,

            /// <summary>
            /// Enum DealDeletion for value: deal.deletion
            /// </summary>
            [EnumMember(Value = "deal.deletion")]
            DealDeletion = 13,

            /// <summary>
            /// Enum TicketCreation for value: ticket.creation
            /// </summary>
            [EnumMember(Value = "ticket.creation")]
            TicketCreation = 14,

            /// <summary>
            /// Enum TicketDeletion for value: ticket.deletion
            /// </summary>
            [EnumMember(Value = "ticket.deletion")]
            TicketDeletion = 15,

            /// <summary>
            /// Enum ProductCreation for value: product.creation
            /// </summary>
            [EnumMember(Value = "product.creation")]
            ProductCreation = 16,

            /// <summary>
            /// Enum ProductDeletion for value: product.deletion
            /// </summary>
            [EnumMember(Value = "product.deletion")]
            ProductDeletion = 17,

            /// <summary>
            /// Enum LineItemCreation for value: line_item.creation
            /// </summary>
            [EnumMember(Value = "line_item.creation")]
            LineItemCreation = 18,

            /// <summary>
            /// Enum LineItemDeletion for value: line_item.deletion
            /// </summary>
            [EnumMember(Value = "line_item.deletion")]
            LineItemDeletion = 19,

            /// <summary>
            /// Enum ConversationCreation for value: conversation.creation
            /// </summary>
            [EnumMember(Value = "conversation.creation")]
            ConversationCreation = 20,

            /// <summary>
            /// Enum ConversationDeletion for value: conversation.deletion
            /// </summary>
            [EnumMember(Value = "conversation.deletion")]
            ConversationDeletion = 21,

            /// <summary>
            /// Enum ConversationNewMessage for value: conversation.newMessage
            /// </summary>
            [EnumMember(Value = "conversation.newMessage")]
            ConversationNewMessage = 22,

            /// <summary>
            /// Enum ConversationPrivacyDeletion for value: conversation.privacyDeletion
            /// </summary>
            [EnumMember(Value = "conversation.privacyDeletion")]
            ConversationPrivacyDeletion = 23,

            /// <summary>
            /// Enum ConversationPropertyChange for value: conversation.propertyChange
            /// </summary>
            [EnumMember(Value = "conversation.propertyChange")]
            ConversationPropertyChange = 24,

            /// <summary>
            /// Enum ContactMerge for value: contact.merge
            /// </summary>
            [EnumMember(Value = "contact.merge")]
            ContactMerge = 25,

            /// <summary>
            /// Enum CompanyMerge for value: company.merge
            /// </summary>
            [EnumMember(Value = "company.merge")]
            CompanyMerge = 26,

            /// <summary>
            /// Enum DealMerge for value: deal.merge
            /// </summary>
            [EnumMember(Value = "deal.merge")]
            DealMerge = 27,

            /// <summary>
            /// Enum TicketMerge for value: ticket.merge
            /// </summary>
            [EnumMember(Value = "ticket.merge")]
            TicketMerge = 28,

            /// <summary>
            /// Enum ProductMerge for value: product.merge
            /// </summary>
            [EnumMember(Value = "product.merge")]
            ProductMerge = 29,

            /// <summary>
            /// Enum LineItemMerge for value: line_item.merge
            /// </summary>
            [EnumMember(Value = "line_item.merge")]
            LineItemMerge = 30,

            /// <summary>
            /// Enum ContactRestore for value: contact.restore
            /// </summary>
            [EnumMember(Value = "contact.restore")]
            ContactRestore = 31,

            /// <summary>
            /// Enum CompanyRestore for value: company.restore
            /// </summary>
            [EnumMember(Value = "company.restore")]
            CompanyRestore = 32,

            /// <summary>
            /// Enum DealRestore for value: deal.restore
            /// </summary>
            [EnumMember(Value = "deal.restore")]
            DealRestore = 33,

            /// <summary>
            /// Enum TicketRestore for value: ticket.restore
            /// </summary>
            [EnumMember(Value = "ticket.restore")]
            TicketRestore = 34,

            /// <summary>
            /// Enum ProductRestore for value: product.restore
            /// </summary>
            [EnumMember(Value = "product.restore")]
            ProductRestore = 35,

            /// <summary>
            /// Enum LineItemRestore for value: line_item.restore
            /// </summary>
            [EnumMember(Value = "line_item.restore")]
            LineItemRestore = 36,

            /// <summary>
            /// Enum ContactAssociationChange for value: contact.associationChange
            /// </summary>
            [EnumMember(Value = "contact.associationChange")]
            ContactAssociationChange = 37,

            /// <summary>
            /// Enum CompanyAssociationChange for value: company.associationChange
            /// </summary>
            [EnumMember(Value = "company.associationChange")]
            CompanyAssociationChange = 38,

            /// <summary>
            /// Enum DealAssociationChange for value: deal.associationChange
            /// </summary>
            [EnumMember(Value = "deal.associationChange")]
            DealAssociationChange = 39,

            /// <summary>
            /// Enum TicketAssociationChange for value: ticket.associationChange
            /// </summary>
            [EnumMember(Value = "ticket.associationChange")]
            TicketAssociationChange = 40,

            /// <summary>
            /// Enum LineItemAssociationChange for value: line_item.associationChange
            /// </summary>
            [EnumMember(Value = "line_item.associationChange")]
            LineItemAssociationChange = 41
        }


        /// <summary>
        /// Type of event to listen for. Can be one of &#x60;create&#x60;, &#x60;delete&#x60;, &#x60;deletedForPrivacy&#x60;, or &#x60;propertyChange&#x60;.
        /// </summary>
        /// <value>Type of event to listen for. Can be one of &#x60;create&#x60;, &#x60;delete&#x60;, &#x60;deletedForPrivacy&#x60;, or &#x60;propertyChange&#x60;.</value>
        [DataMember(Name = "eventType", IsRequired = true, EmitDefaultValue = true)]
        public EventTypeEnum EventType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionResponse" /> class.
        /// </summary>
        /// <param name="eventType">Type of event to listen for. Can be one of &#x60;create&#x60;, &#x60;delete&#x60;, &#x60;deletedForPrivacy&#x60;, or &#x60;propertyChange&#x60;. (required).</param>
        /// <param name="propertyName">The internal name of the property being monitored for changes. Only applies when &#x60;eventType&#x60; is &#x60;propertyChange&#x60;..</param>
        /// <param name="active">Determines if the subscription is active or paused. (required).</param>
        /// <param name="id">The unique ID of the subscription. (required).</param>
        /// <param name="createdAt">When this subscription was created. Formatted as milliseconds from the [Unix epoch](#). (required).</param>
        /// <param name="updatedAt">When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#)..</param>
        public SubscriptionResponse(EventTypeEnum eventType = default(EventTypeEnum), string propertyName = default(string), bool active = default(bool), string id = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            this.EventType = eventType;
            this.Active = active;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SubscriptionResponse and cannot be null");
            }
            this.Id = id;
            this.CreatedAt = createdAt;
            this.PropertyName = propertyName;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The internal name of the property being monitored for changes. Only applies when &#x60;eventType&#x60; is &#x60;propertyChange&#x60;.
        /// </summary>
        /// <value>The internal name of the property being monitored for changes. Only applies when &#x60;eventType&#x60; is &#x60;propertyChange&#x60;.</value>
        [DataMember(Name = "propertyName", EmitDefaultValue = false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Determines if the subscription is active or paused.
        /// </summary>
        /// <value>Determines if the subscription is active or paused.</value>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// The unique ID of the subscription.
        /// </summary>
        /// <value>The unique ID of the subscription.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
        /// </summary>
        /// <value>When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
        /// </summary>
        /// <value>When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionResponse {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventType == input.EventType ||
                    this.EventType.Equals(input.EventType)
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                if (this.PropertyName != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
