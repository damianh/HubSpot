/*
 * Webhooks API
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Webhooks.Webhooks.Client;
using HubSpot.Webhooks.Webhooks.Model;

namespace HubSpot.Webhooks.Webhooks.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhooksV3AppIdSettingsClear(int appId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhooksV3AppIdSettingsClearWithHttpInfo(int appId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        SettingsResponse GetWebhooksV3AppIdSettingsGetAll(int appId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        ApiResponse<SettingsResponse> GetWebhooksV3AppIdSettingsGetAllWithHttpInfo(int appId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        SettingsResponse PutWebhooksV3AppIdSettingsConfigure(int appId, SettingsChangeRequest settingsChangeRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        ApiResponse<SettingsResponse> PutWebhooksV3AppIdSettingsConfigureWithHttpInfo(int appId, SettingsChangeRequest settingsChangeRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhooksV3AppIdSettingsClearAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhooksV3AppIdSettingsClearWithHttpInfoAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        System.Threading.Tasks.Task<SettingsResponse> GetWebhooksV3AppIdSettingsGetAllAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsResponse>> GetWebhooksV3AppIdSettingsGetAllWithHttpInfoAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        System.Threading.Tasks.Task<SettingsResponse> PutWebhooksV3AppIdSettingsConfigureAsync(int appId, SettingsChangeRequest settingsChangeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsResponse>> PutWebhooksV3AppIdSettingsConfigureWithHttpInfoAsync(int appId, SettingsChangeRequest settingsChangeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private HubSpot.Webhooks.Webhooks.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(string basePath)
        {
            this.Configuration = HubSpot.Webhooks.Webhooks.Client.Configuration.MergeConfigurations(
                HubSpot.Webhooks.Webhooks.Client.GlobalConfiguration.Instance,
                new HubSpot.Webhooks.Webhooks.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Webhooks.Webhooks.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Webhooks.Webhooks.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Webhooks.Webhooks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(HubSpot.Webhooks.Webhooks.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Webhooks.Webhooks.Client.Configuration.MergeConfigurations(
                HubSpot.Webhooks.Webhooks.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Webhooks.Webhooks.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Webhooks.Webhooks.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Webhooks.Webhooks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(HubSpot.Webhooks.Webhooks.Client.ISynchronousClient client, HubSpot.Webhooks.Webhooks.Client.IAsynchronousClient asyncClient, HubSpot.Webhooks.Webhooks.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Webhooks.Webhooks.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Webhooks.Webhooks.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Webhooks.Webhooks.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Webhooks.Webhooks.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Webhooks.Webhooks.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhooksV3AppIdSettingsClear(int appId, int operationIndex = 0)
        {
            DeleteWebhooksV3AppIdSettingsClearWithHttpInfo(appId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Webhooks.Webhooks.Client.ApiResponse<Object> DeleteWebhooksV3AppIdSettingsClearWithHttpInfo(int appId, int operationIndex = 0)
        {
            HubSpot.Webhooks.Webhooks.Client.RequestOptions localVarRequestOptions = new HubSpot.Webhooks.Webhooks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "SettingsApi.DeleteWebhooksV3AppIdSettingsClear";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksV3AppIdSettingsClear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhooksV3AppIdSettingsClearAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWebhooksV3AppIdSettingsClearWithHttpInfoAsync(appId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Webhooks.Webhooks.Client.ApiResponse<Object>> DeleteWebhooksV3AppIdSettingsClearWithHttpInfoAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Webhooks.Webhooks.Client.RequestOptions localVarRequestOptions = new HubSpot.Webhooks.Webhooks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "SettingsApi.DeleteWebhooksV3AppIdSettingsClear";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksV3AppIdSettingsClear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        public SettingsResponse GetWebhooksV3AppIdSettingsGetAll(int appId, int operationIndex = 0)
        {
            HubSpot.Webhooks.Webhooks.Client.ApiResponse<SettingsResponse> localVarResponse = GetWebhooksV3AppIdSettingsGetAllWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        public HubSpot.Webhooks.Webhooks.Client.ApiResponse<SettingsResponse> GetWebhooksV3AppIdSettingsGetAllWithHttpInfo(int appId, int operationIndex = 0)
        {
            HubSpot.Webhooks.Webhooks.Client.RequestOptions localVarRequestOptions = new HubSpot.Webhooks.Webhooks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "SettingsApi.GetWebhooksV3AppIdSettingsGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SettingsResponse>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksV3AppIdSettingsGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        public async System.Threading.Tasks.Task<SettingsResponse> GetWebhooksV3AppIdSettingsGetAllAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Webhooks.Webhooks.Client.ApiResponse<SettingsResponse> localVarResponse = await GetWebhooksV3AppIdSettingsGetAllWithHttpInfoAsync(appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Webhooks.Webhooks.Client.ApiResponse<SettingsResponse>> GetWebhooksV3AppIdSettingsGetAllWithHttpInfoAsync(int appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.Webhooks.Webhooks.Client.RequestOptions localVarRequestOptions = new HubSpot.Webhooks.Webhooks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "SettingsApi.GetWebhooksV3AppIdSettingsGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SettingsResponse>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksV3AppIdSettingsGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        public SettingsResponse PutWebhooksV3AppIdSettingsConfigure(int appId, SettingsChangeRequest settingsChangeRequest, int operationIndex = 0)
        {
            HubSpot.Webhooks.Webhooks.Client.ApiResponse<SettingsResponse> localVarResponse = PutWebhooksV3AppIdSettingsConfigureWithHttpInfo(appId, settingsChangeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        public HubSpot.Webhooks.Webhooks.Client.ApiResponse<SettingsResponse> PutWebhooksV3AppIdSettingsConfigureWithHttpInfo(int appId, SettingsChangeRequest settingsChangeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'settingsChangeRequest' is set
            if (settingsChangeRequest == null)
            {
                throw new HubSpot.Webhooks.Webhooks.Client.ApiException(400, "Missing required parameter 'settingsChangeRequest' when calling SettingsApi->PutWebhooksV3AppIdSettingsConfigure");
            }

            HubSpot.Webhooks.Webhooks.Client.RequestOptions localVarRequestOptions = new HubSpot.Webhooks.Webhooks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = settingsChangeRequest;

            localVarRequestOptions.Operation = "SettingsApi.PutWebhooksV3AppIdSettingsConfigure";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SettingsResponse>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksV3AppIdSettingsConfigure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        public async System.Threading.Tasks.Task<SettingsResponse> PutWebhooksV3AppIdSettingsConfigureAsync(int appId, SettingsChangeRequest settingsChangeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Webhooks.Webhooks.Client.ApiResponse<SettingsResponse> localVarResponse = await PutWebhooksV3AppIdSettingsConfigureWithHttpInfoAsync(appId, settingsChangeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Webhooks.Webhooks.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Webhooks.Webhooks.Client.ApiResponse<SettingsResponse>> PutWebhooksV3AppIdSettingsConfigureWithHttpInfoAsync(int appId, SettingsChangeRequest settingsChangeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingsChangeRequest' is set
            if (settingsChangeRequest == null)
            {
                throw new HubSpot.Webhooks.Webhooks.Client.ApiException(400, "Missing required parameter 'settingsChangeRequest' when calling SettingsApi->PutWebhooksV3AppIdSettingsConfigure");
            }


            HubSpot.Webhooks.Webhooks.Client.RequestOptions localVarRequestOptions = new HubSpot.Webhooks.Webhooks.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Webhooks.Webhooks.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = settingsChangeRequest;

            localVarRequestOptions.Operation = "SettingsApi.PutWebhooksV3AppIdSettingsConfigure";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Webhooks.Webhooks.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SettingsResponse>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksV3AppIdSettingsConfigure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
