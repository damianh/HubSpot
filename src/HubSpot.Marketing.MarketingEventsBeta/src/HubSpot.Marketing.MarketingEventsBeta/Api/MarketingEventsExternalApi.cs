/*
 * Marketing Events Extension
 *
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Marketing.MarketingEventsBeta.Client;
using HubSpot.Marketing.MarketingEventsBeta.Client.Auth;
using HubSpot.Marketing.MarketingEventsBeta.Model;

namespace HubSpot.Marketing.MarketingEventsBeta.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketingEventsExternalApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive(string externalEventId, string externalAccountId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveWithHttpInfo(string externalEventId, string externalAccountId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventPublicReadResponse</returns>
        MarketingEventPublicReadResponse GetMarketingV3MarketingEventsEventsExternalEventIdGetById(string externalEventId, string externalAccountId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventPublicReadResponse</returns>
        ApiResponse<MarketingEventPublicReadResponse> GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdWithHttpInfo(string externalEventId, string externalAccountId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventUpdateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventPublicDefaultResponse</returns>
        MarketingEventPublicDefaultResponse PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventUpdateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventPublicDefaultResponse</returns>
        ApiResponse<MarketingEventPublicDefaultResponse> PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateWithHttpInfo(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        MarketingEventDefaultResponse PostMarketingV3MarketingEventsEventsCreate(MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsCreateWithHttpInfo(MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error PostMarketingV3MarketingEventsEventsDeleteArchiveBatch(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostMarketingV3MarketingEventsEventsDeleteArchiveBatchWithHttpInfo(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        MarketingEventDefaultResponse PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(string externalEventId, string externalAccountId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelWithHttpInfo(string externalEventId, string externalAccountId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventCompleteRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        MarketingEventDefaultResponse PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams marketingEventCompleteRequestParams, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventCompleteRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteWithHttpInfo(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams marketingEventCompleteRequestParams, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventEmailSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventEmailSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdWithHttpInfo(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdWithHttpInfo(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseMarketingEventPublicDefaultResponse</returns>
        BatchResponseMarketingEventPublicDefaultResponse PostMarketingV3MarketingEventsEventsUpsertDoUpsert(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseMarketingEventPublicDefaultResponse</returns>
        ApiResponse<BatchResponseMarketingEventPublicDefaultResponse> PostMarketingV3MarketingEventsEventsUpsertDoUpsertWithHttpInfo(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventPublicDefaultResponse</returns>
        MarketingEventPublicDefaultResponse PutMarketingV3MarketingEventsEventsExternalEventIdReplace(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventPublicDefaultResponse</returns>
        ApiResponse<MarketingEventPublicDefaultResponse> PutMarketingV3MarketingEventsEventsExternalEventIdReplaceWithHttpInfo(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketingEventsExternalApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveWithHttpInfoAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicReadResponse</returns>
        System.Threading.Tasks.Task<MarketingEventPublicReadResponse> GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventPublicReadResponse>> GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdWithHttpInfoAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventUpdateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventPublicDefaultResponse> PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventUpdateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventPublicDefaultResponse>> PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateWithHttpInfoAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsCreateAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsCreateWithHttpInfoAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostMarketingV3MarketingEventsEventsDeleteArchiveBatchAsync(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostMarketingV3MarketingEventsEventsDeleteArchiveBatchWithHttpInfoAsync(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelWithHttpInfoAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventCompleteRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteAsync(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams marketingEventCompleteRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventCompleteRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteWithHttpInfoAsync(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams marketingEventCompleteRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventEmailSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventEmailSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdWithHttpInfoAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdWithHttpInfoAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseMarketingEventPublicDefaultResponse</returns>
        System.Threading.Tasks.Task<BatchResponseMarketingEventPublicDefaultResponse> PostMarketingV3MarketingEventsEventsUpsertDoUpsertAsync(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseMarketingEventPublicDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseMarketingEventPublicDefaultResponse>> PostMarketingV3MarketingEventsEventsUpsertDoUpsertWithHttpInfoAsync(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventPublicDefaultResponse> PutMarketingV3MarketingEventsEventsExternalEventIdReplaceAsync(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventPublicDefaultResponse>> PutMarketingV3MarketingEventsEventsExternalEventIdReplaceWithHttpInfoAsync(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketingEventsExternalApi : IMarketingEventsExternalApiSync, IMarketingEventsExternalApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketingEventsExternalApi : IMarketingEventsExternalApi
    {
        private HubSpot.Marketing.MarketingEventsBeta.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketingEventsExternalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketingEventsExternalApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketingEventsExternalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketingEventsExternalApi(string basePath)
        {
            this.Configuration = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.MergeConfigurations(
                HubSpot.Marketing.MarketingEventsBeta.Client.GlobalConfiguration.Instance,
                new HubSpot.Marketing.MarketingEventsBeta.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Marketing.MarketingEventsBeta.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Marketing.MarketingEventsBeta.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketingEventsExternalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketingEventsExternalApi(HubSpot.Marketing.MarketingEventsBeta.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.MergeConfigurations(
                HubSpot.Marketing.MarketingEventsBeta.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Marketing.MarketingEventsBeta.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Marketing.MarketingEventsBeta.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketingEventsExternalApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarketingEventsExternalApi(HubSpot.Marketing.MarketingEventsBeta.Client.ISynchronousClient client, HubSpot.Marketing.MarketingEventsBeta.Client.IAsynchronousClient asyncClient, HubSpot.Marketing.MarketingEventsBeta.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Marketing.MarketingEventsBeta.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Marketing.MarketingEventsBeta.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive(string externalEventId, string externalAccountId, int operationIndex = 0)
        {
            DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveWithHttpInfo(externalEventId, externalAccountId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Object> DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveWithHttpInfo(string externalEventId, string externalAccountId, int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveWithHttpInfoAsync(externalEventId, externalAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Object>> DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveWithHttpInfoAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventPublicReadResponse</returns>
        public MarketingEventPublicReadResponse GetMarketingV3MarketingEventsEventsExternalEventIdGetById(string externalEventId, string externalAccountId, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicReadResponse> localVarResponse = GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdWithHttpInfo(externalEventId, externalAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventPublicReadResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicReadResponse> GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdWithHttpInfo(string externalEventId, string externalAccountId, int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->GetMarketingV3MarketingEventsEventsExternalEventIdGetById");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->GetMarketingV3MarketingEventsEventsExternalEventIdGetById");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.GetMarketingV3MarketingEventsEventsExternalEventIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MarketingEventPublicReadResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3MarketingEventsEventsExternalEventIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicReadResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventPublicReadResponse> GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicReadResponse> localVarResponse = await GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdWithHttpInfoAsync(externalEventId, externalAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicReadResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicReadResponse>> GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdWithHttpInfoAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->GetMarketingV3MarketingEventsEventsExternalEventIdGetById");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->GetMarketingV3MarketingEventsEventsExternalEventIdGetById");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.GetMarketingV3MarketingEventsEventsExternalEventIdGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MarketingEventPublicReadResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3MarketingEventsEventsExternalEventIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventUpdateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventPublicDefaultResponse</returns>
        public MarketingEventPublicDefaultResponse PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicDefaultResponse> localVarResponse = PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateWithHttpInfo(externalEventId, externalAccountId, marketingEventUpdateRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventUpdateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventPublicDefaultResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicDefaultResponse> PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateWithHttpInfo(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
            }

            // verify the required parameter 'marketingEventUpdateRequestParams' is set
            if (marketingEventUpdateRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'marketingEventUpdateRequestParams' when calling MarketingEventsExternalApi->PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = marketingEventUpdateRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<MarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventUpdateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventPublicDefaultResponse> PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicDefaultResponse> localVarResponse = await PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateWithHttpInfoAsync(externalEventId, externalAccountId, marketingEventUpdateRequestParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventUpdateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicDefaultResponse>> PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateWithHttpInfoAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
            }

            // verify the required parameter 'marketingEventUpdateRequestParams' is set
            if (marketingEventUpdateRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'marketingEventUpdateRequestParams' when calling MarketingEventsExternalApi->PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = marketingEventUpdateRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<MarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        public MarketingEventDefaultResponse PostMarketingV3MarketingEventsEventsCreate(MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = PostMarketingV3MarketingEventsEventsCreateWithHttpInfo(marketingEventCreateRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsCreateWithHttpInfo(MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0)
        {
            // verify the required parameter 'marketingEventCreateRequestParams' is set
            if (marketingEventCreateRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'marketingEventCreateRequestParams' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsCreate");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = marketingEventCreateRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsCreateAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = await PostMarketingV3MarketingEventsEventsCreateWithHttpInfoAsync(marketingEventCreateRequestParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsCreateWithHttpInfoAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'marketingEventCreateRequestParams' is set
            if (marketingEventCreateRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'marketingEventCreateRequestParams' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsCreate");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = marketingEventCreateRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error PostMarketingV3MarketingEventsEventsDeleteArchiveBatch(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> localVarResponse = PostMarketingV3MarketingEventsEventsDeleteArchiveBatchWithHttpInfo(batchInputMarketingEventExternalUniqueIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> PostMarketingV3MarketingEventsEventsDeleteArchiveBatchWithHttpInfo(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, int operationIndex = 0)
        {
            // verify the required parameter 'batchInputMarketingEventExternalUniqueIdentifier' is set
            if (batchInputMarketingEventExternalUniqueIdentifier == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventExternalUniqueIdentifier' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsDeleteArchiveBatch");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputMarketingEventExternalUniqueIdentifier;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsDeleteArchiveBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/marketing/v3/marketing-events/events/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsDeleteArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostMarketingV3MarketingEventsEventsDeleteArchiveBatchAsync(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> localVarResponse = await PostMarketingV3MarketingEventsEventsDeleteArchiveBatchWithHttpInfoAsync(batchInputMarketingEventExternalUniqueIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error>> PostMarketingV3MarketingEventsEventsDeleteArchiveBatchWithHttpInfoAsync(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputMarketingEventExternalUniqueIdentifier' is set
            if (batchInputMarketingEventExternalUniqueIdentifier == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventExternalUniqueIdentifier' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsDeleteArchiveBatch");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputMarketingEventExternalUniqueIdentifier;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsDeleteArchiveBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/marketing/v3/marketing-events/events/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsDeleteArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        public MarketingEventDefaultResponse PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(string externalEventId, string externalAccountId, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelWithHttpInfo(externalEventId, externalAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelWithHttpInfo(string externalEventId, string externalAccountId, int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = await PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelWithHttpInfoAsync(externalEventId, externalAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelWithHttpInfoAsync(string externalEventId, string externalAccountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventCompleteRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        public MarketingEventDefaultResponse PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams marketingEventCompleteRequestParams, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteWithHttpInfo(externalEventId, externalAccountId, marketingEventCompleteRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventCompleteRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteWithHttpInfo(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams marketingEventCompleteRequestParams, int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete");
            }

            // verify the required parameter 'marketingEventCompleteRequestParams' is set
            if (marketingEventCompleteRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'marketingEventCompleteRequestParams' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = marketingEventCompleteRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}/complete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventCompleteRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteAsync(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams marketingEventCompleteRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = await PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteWithHttpInfoAsync(externalEventId, externalAccountId, marketingEventCompleteRequestParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="marketingEventCompleteRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteWithHttpInfoAsync(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams marketingEventCompleteRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete");
            }

            // verify the required parameter 'marketingEventCompleteRequestParams' is set
            if (marketingEventCompleteRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'marketingEventCompleteRequestParams' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = marketingEventCompleteRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventEmailSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> localVarResponse = PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdWithHttpInfo(externalEventId, subscriberState, externalAccountId, batchInputMarketingEventEmailSubscriber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventEmailSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdWithHttpInfo(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById");
            }

            // verify the required parameter 'subscriberState' is set
            if (subscriberState == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'subscriberState' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById");
            }

            // verify the required parameter 'batchInputMarketingEventEmailSubscriber' is set
            if (batchInputMarketingEventEmailSubscriber == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventEmailSubscriber' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberState", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(subscriberState)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = batchInputMarketingEventEmailSubscriber;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/email-upsert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventEmailSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> localVarResponse = await PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdWithHttpInfoAsync(externalEventId, subscriberState, externalAccountId, batchInputMarketingEventEmailSubscriber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventEmailSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error>> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdWithHttpInfoAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById");
            }

            // verify the required parameter 'subscriberState' is set
            if (subscriberState == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'subscriberState' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById");
            }

            // verify the required parameter 'batchInputMarketingEventEmailSubscriber' is set
            if (batchInputMarketingEventEmailSubscriber == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventEmailSubscriber' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberState", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(subscriberState)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = batchInputMarketingEventEmailSubscriber;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/email-upsert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> localVarResponse = PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdWithHttpInfo(externalEventId, subscriberState, externalAccountId, batchInputMarketingEventSubscriber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdWithHttpInfo(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById");
            }

            // verify the required parameter 'subscriberState' is set
            if (subscriberState == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'subscriberState' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById");
            }

            // verify the required parameter 'batchInputMarketingEventSubscriber' is set
            if (batchInputMarketingEventSubscriber == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventSubscriber' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberState", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(subscriberState)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = batchInputMarketingEventSubscriber;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/upsert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error> localVarResponse = await PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdWithHttpInfoAsync(externalEventId, subscriberState, externalAccountId, batchInputMarketingEventSubscriber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="subscriberState"></param>
        /// <param name="externalAccountId"></param>
        /// <param name="batchInputMarketingEventSubscriber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<Error>> PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdWithHttpInfoAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById");
            }

            // verify the required parameter 'subscriberState' is set
            if (subscriberState == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'subscriberState' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById");
            }

            // verify the required parameter 'batchInputMarketingEventSubscriber' is set
            if (batchInputMarketingEventSubscriber == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventSubscriber' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberState", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(subscriberState)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = batchInputMarketingEventSubscriber;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/upsert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseMarketingEventPublicDefaultResponse</returns>
        public BatchResponseMarketingEventPublicDefaultResponse PostMarketingV3MarketingEventsEventsUpsertDoUpsert(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseMarketingEventPublicDefaultResponse> localVarResponse = PostMarketingV3MarketingEventsEventsUpsertDoUpsertWithHttpInfo(batchInputMarketingEventCreateRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseMarketingEventPublicDefaultResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseMarketingEventPublicDefaultResponse> PostMarketingV3MarketingEventsEventsUpsertDoUpsertWithHttpInfo(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, int operationIndex = 0)
        {
            // verify the required parameter 'batchInputMarketingEventCreateRequestParams' is set
            if (batchInputMarketingEventCreateRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventCreateRequestParams' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsUpsertDoUpsert");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputMarketingEventCreateRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsUpsertDoUpsert";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseMarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/upsert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsUpsertDoUpsert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseMarketingEventPublicDefaultResponse</returns>
        public async System.Threading.Tasks.Task<BatchResponseMarketingEventPublicDefaultResponse> PostMarketingV3MarketingEventsEventsUpsertDoUpsertAsync(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseMarketingEventPublicDefaultResponse> localVarResponse = await PostMarketingV3MarketingEventsEventsUpsertDoUpsertWithHttpInfoAsync(batchInputMarketingEventCreateRequestParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseMarketingEventPublicDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseMarketingEventPublicDefaultResponse>> PostMarketingV3MarketingEventsEventsUpsertDoUpsertWithHttpInfoAsync(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputMarketingEventCreateRequestParams' is set
            if (batchInputMarketingEventCreateRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventCreateRequestParams' when calling MarketingEventsExternalApi->PostMarketingV3MarketingEventsEventsUpsertDoUpsert");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputMarketingEventCreateRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PostMarketingV3MarketingEventsEventsUpsertDoUpsert";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseMarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/upsert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsUpsertDoUpsert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MarketingEventPublicDefaultResponse</returns>
        public MarketingEventPublicDefaultResponse PutMarketingV3MarketingEventsEventsExternalEventIdReplace(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicDefaultResponse> localVarResponse = PutMarketingV3MarketingEventsEventsExternalEventIdReplaceWithHttpInfo(externalEventId, marketingEventCreateRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MarketingEventPublicDefaultResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicDefaultResponse> PutMarketingV3MarketingEventsEventsExternalEventIdReplaceWithHttpInfo(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PutMarketingV3MarketingEventsEventsExternalEventIdReplace");
            }

            // verify the required parameter 'marketingEventCreateRequestParams' is set
            if (marketingEventCreateRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'marketingEventCreateRequestParams' when calling MarketingEventsExternalApi->PutMarketingV3MarketingEventsEventsExternalEventIdReplace");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.Data = marketingEventCreateRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PutMarketingV3MarketingEventsEventsExternalEventIdReplace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutMarketingV3MarketingEventsEventsExternalEventIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventPublicDefaultResponse> PutMarketingV3MarketingEventsEventsExternalEventIdReplaceAsync(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicDefaultResponse> localVarResponse = await PutMarketingV3MarketingEventsEventsExternalEventIdReplaceWithHttpInfoAsync(externalEventId, marketingEventCreateRequestParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId"></param>
        /// <param name="marketingEventCreateRequestParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<MarketingEventPublicDefaultResponse>> PutMarketingV3MarketingEventsEventsExternalEventIdReplaceWithHttpInfoAsync(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling MarketingEventsExternalApi->PutMarketingV3MarketingEventsEventsExternalEventIdReplace");
            }

            // verify the required parameter 'marketingEventCreateRequestParams' is set
            if (marketingEventCreateRequestParams == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'marketingEventCreateRequestParams' when calling MarketingEventsExternalApi->PutMarketingV3MarketingEventsEventsExternalEventIdReplace");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.Data = marketingEventCreateRequestParams;

            localVarRequestOptions.Operation = "MarketingEventsExternalApi.PutMarketingV3MarketingEventsEventsExternalEventIdReplace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutMarketingV3MarketingEventsEventsExternalEventIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
