/*
 * Marketing Events Extension
 *
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.Marketing.MarketingEventsBeta.Client;
using HubSpot.Marketing.MarketingEventsBeta.Client.Auth;
using HubSpot.Marketing.MarketingEventsBeta.Model;

namespace HubSpot.Marketing.MarketingEventsBeta.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttendanceSubscriberStateChangesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Record
        /// </summary>
        /// <remarks>
        /// Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSubscriberVidResponse</returns>
        BatchResponseSubscriberVidResponse PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate(string externalEventId, string subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, string externalAccountId = default(string), int operationIndex = 0);

        /// <summary>
        /// Record
        /// </summary>
        /// <remarks>
        /// Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSubscriberVidResponse</returns>
        ApiResponse<BatchResponseSubscriberVidResponse> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateWithHttpInfo(string externalEventId, string subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, string externalAccountId = default(string), int operationIndex = 0);
        /// <summary>
        /// Record
        /// </summary>
        /// <remarks>
        /// Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created. If you set params 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventEmailSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSubscriberEmailResponse</returns>
        BatchResponseSubscriberEmailResponse PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail(string externalEventId, string subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, string externalAccountId = default(string), int operationIndex = 0);

        /// <summary>
        /// Record
        /// </summary>
        /// <remarks>
        /// Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created. If you set params 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventEmailSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSubscriberEmailResponse</returns>
        ApiResponse<BatchResponseSubscriberEmailResponse> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailWithHttpInfo(string externalEventId, string subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, string externalAccountId = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttendanceSubscriberStateChangesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Record
        /// </summary>
        /// <remarks>
        /// Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSubscriberVidResponse</returns>
        System.Threading.Tasks.Task<BatchResponseSubscriberVidResponse> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateAsync(string externalEventId, string subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, string externalAccountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Record
        /// </summary>
        /// <remarks>
        /// Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSubscriberVidResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseSubscriberVidResponse>> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateWithHttpInfoAsync(string externalEventId, string subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, string externalAccountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Record
        /// </summary>
        /// <remarks>
        /// Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created. If you set params 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventEmailSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSubscriberEmailResponse</returns>
        System.Threading.Tasks.Task<BatchResponseSubscriberEmailResponse> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailAsync(string externalEventId, string subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, string externalAccountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Record
        /// </summary>
        /// <remarks>
        /// Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created. If you set params 
        /// </remarks>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventEmailSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSubscriberEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseSubscriberEmailResponse>> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailWithHttpInfoAsync(string externalEventId, string subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, string externalAccountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttendanceSubscriberStateChangesApi : IAttendanceSubscriberStateChangesApiSync, IAttendanceSubscriberStateChangesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttendanceSubscriberStateChangesApi : IAttendanceSubscriberStateChangesApi
    {
        private HubSpot.Marketing.MarketingEventsBeta.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttendanceSubscriberStateChangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttendanceSubscriberStateChangesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttendanceSubscriberStateChangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttendanceSubscriberStateChangesApi(string basePath)
        {
            this.Configuration = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.MergeConfigurations(
                HubSpot.Marketing.MarketingEventsBeta.Client.GlobalConfiguration.Instance,
                new HubSpot.Marketing.MarketingEventsBeta.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.Marketing.MarketingEventsBeta.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Marketing.MarketingEventsBeta.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttendanceSubscriberStateChangesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttendanceSubscriberStateChangesApi(HubSpot.Marketing.MarketingEventsBeta.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.MergeConfigurations(
                HubSpot.Marketing.MarketingEventsBeta.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.Marketing.MarketingEventsBeta.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.Marketing.MarketingEventsBeta.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttendanceSubscriberStateChangesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AttendanceSubscriberStateChangesApi(HubSpot.Marketing.MarketingEventsBeta.Client.ISynchronousClient client, HubSpot.Marketing.MarketingEventsBeta.Client.IAsynchronousClient asyncClient, HubSpot.Marketing.MarketingEventsBeta.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.Marketing.MarketingEventsBeta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.Marketing.MarketingEventsBeta.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.Marketing.MarketingEventsBeta.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Record Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSubscriberVidResponse</returns>
        public BatchResponseSubscriberVidResponse PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate(string externalEventId, string subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, string externalAccountId = default(string), int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseSubscriberVidResponse> localVarResponse = PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateWithHttpInfo(externalEventId, subscriberState, batchInputMarketingEventSubscriber, externalAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Record Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSubscriberVidResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseSubscriberVidResponse> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateWithHttpInfo(string externalEventId, string subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, string externalAccountId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
            }

            // verify the required parameter 'subscriberState' is set
            if (subscriberState == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'subscriberState' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
            }

            // verify the required parameter 'batchInputMarketingEventSubscriber' is set
            if (batchInputMarketingEventSubscriber == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventSubscriber' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberState", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(subscriberState)); // path parameter
            if (externalAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            }
            localVarRequestOptions.Data = batchInputMarketingEventSubscriber;

            localVarRequestOptions.Operation = "AttendanceSubscriberStateChangesApi.PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseSubscriberVidResponse>("/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Record Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSubscriberVidResponse</returns>
        public async System.Threading.Tasks.Task<BatchResponseSubscriberVidResponse> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateAsync(string externalEventId, string subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, string externalAccountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseSubscriberVidResponse> localVarResponse = await PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateWithHttpInfoAsync(externalEventId, subscriberState, batchInputMarketingEventSubscriber, externalAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Record Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSubscriberVidResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseSubscriberVidResponse>> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateWithHttpInfoAsync(string externalEventId, string subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, string externalAccountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
            }

            // verify the required parameter 'subscriberState' is set
            if (subscriberState == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'subscriberState' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
            }

            // verify the required parameter 'batchInputMarketingEventSubscriber' is set
            if (batchInputMarketingEventSubscriber == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventSubscriber' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberState", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(subscriberState)); // path parameter
            if (externalAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            }
            localVarRequestOptions.Data = batchInputMarketingEventSubscriber;

            localVarRequestOptions.Operation = "AttendanceSubscriberStateChangesApi.PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseSubscriberVidResponse>("/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Record Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created. If you set params 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventEmailSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchResponseSubscriberEmailResponse</returns>
        public BatchResponseSubscriberEmailResponse PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail(string externalEventId, string subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, string externalAccountId = default(string), int operationIndex = 0)
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseSubscriberEmailResponse> localVarResponse = PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailWithHttpInfo(externalEventId, subscriberState, batchInputMarketingEventEmailSubscriber, externalAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Record Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created. If you set params 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventEmailSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchResponseSubscriberEmailResponse</returns>
        public HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseSubscriberEmailResponse> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailWithHttpInfo(string externalEventId, string subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, string externalAccountId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
            }

            // verify the required parameter 'subscriberState' is set
            if (subscriberState == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'subscriberState' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
            }

            // verify the required parameter 'batchInputMarketingEventEmailSubscriber' is set
            if (batchInputMarketingEventEmailSubscriber == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventEmailSubscriber' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
            }

            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberState", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(subscriberState)); // path parameter
            if (externalAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            }
            localVarRequestOptions.Data = batchInputMarketingEventEmailSubscriber;

            localVarRequestOptions.Operation = "AttendanceSubscriberStateChangesApi.PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseSubscriberEmailResponse>("/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/email-create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Record Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created. If you set params 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventEmailSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSubscriberEmailResponse</returns>
        public async System.Threading.Tasks.Task<BatchResponseSubscriberEmailResponse> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailAsync(string externalEventId, string subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, string externalAccountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseSubscriberEmailResponse> localVarResponse = await PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailWithHttpInfoAsync(externalEventId, subscriberState, batchInputMarketingEventEmailSubscriber, externalAccountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Record Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created. If you set params 
        /// </summary>
        /// <exception cref="HubSpot.Marketing.MarketingEventsBeta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event</param>
        /// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;.</param>
        /// <param name="batchInputMarketingEventEmailSubscriber">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
        /// <param name="externalAccountId">The account id associated with the marketing event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSubscriberEmailResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.Marketing.MarketingEventsBeta.Client.ApiResponse<BatchResponseSubscriberEmailResponse>> PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailWithHttpInfoAsync(string externalEventId, string subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, string externalAccountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
            }

            // verify the required parameter 'subscriberState' is set
            if (subscriberState == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'subscriberState' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
            }

            // verify the required parameter 'batchInputMarketingEventEmailSubscriber' is set
            if (batchInputMarketingEventEmailSubscriber == null)
            {
                throw new HubSpot.Marketing.MarketingEventsBeta.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventEmailSubscriber' when calling AttendanceSubscriberStateChangesApi->PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
            }


            HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions localVarRequestOptions = new HubSpot.Marketing.MarketingEventsBeta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberState", HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToString(subscriberState)); // path parameter
            if (externalAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.Marketing.MarketingEventsBeta.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            }
            localVarRequestOptions.Data = batchInputMarketingEventEmailSubscriber;

            localVarRequestOptions.Operation = "AttendanceSubscriberStateChangesApi.PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_legacy) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (private_apps_legacy) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("private-app-legacy")))
            {
                localVarRequestOptions.HeaderParameters.Add("private-app-legacy", this.Configuration.GetApiKeyWithPrefix("private-app-legacy"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseSubscriberEmailResponse>("/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/email-create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
