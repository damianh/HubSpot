/*
 * Marketing Events Extension
 *
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.Marketing.MarketingEventsBeta.Client;
using HubSpot.Marketing.MarketingEventsBeta.Api;
// uncomment below to import models
//using HubSpot.Marketing.MarketingEventsBeta.Model;

namespace HubSpot.Marketing.MarketingEventsBeta.Test.Api
{
    /// <summary>
    ///  Class for testing MarketingEventsExternalApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MarketingEventsExternalApiTests : IDisposable
    {
        private MarketingEventsExternalApi instance;

        public MarketingEventsExternalApiTests()
        {
            instance = new MarketingEventsExternalApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MarketingEventsExternalApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MarketingEventsExternalApi
            //Assert.IsType<MarketingEventsExternalApi>(instance);
        }

        /// <summary>
        /// Test DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive
        /// </summary>
        [Fact]
        public void DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalEventId = null;
            //string externalAccountId = null;
            //instance.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive(externalEventId, externalAccountId);
        }

        /// <summary>
        /// Test GetMarketingV3MarketingEventsEventsExternalEventIdGetById
        /// </summary>
        [Fact]
        public void GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalEventId = null;
            //string externalAccountId = null;
            //var response = instance.GetMarketingV3MarketingEventsEventsExternalEventIdGetById(externalEventId, externalAccountId);
            //Assert.IsType<MarketingEventPublicReadResponse>(response);
        }

        /// <summary>
        /// Test PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate
        /// </summary>
        [Fact]
        public void PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalEventId = null;
            //string externalAccountId = null;
            //MarketingEventUpdateRequestParams marketingEventUpdateRequestParams = null;
            //var response = instance.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate(externalEventId, externalAccountId, marketingEventUpdateRequestParams);
            //Assert.IsType<MarketingEventPublicDefaultResponse>(response);
        }

        /// <summary>
        /// Test PostMarketingV3MarketingEventsEventsCreate
        /// </summary>
        [Fact]
        public void PostMarketingV3MarketingEventsEventsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarketingEventCreateRequestParams marketingEventCreateRequestParams = null;
            //var response = instance.PostMarketingV3MarketingEventsEventsCreate(marketingEventCreateRequestParams);
            //Assert.IsType<MarketingEventDefaultResponse>(response);
        }

        /// <summary>
        /// Test PostMarketingV3MarketingEventsEventsDeleteArchiveBatch
        /// </summary>
        [Fact]
        public void PostMarketingV3MarketingEventsEventsDeleteArchiveBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier = null;
            //var response = instance.PostMarketingV3MarketingEventsEventsDeleteArchiveBatch(batchInputMarketingEventExternalUniqueIdentifier);
            //Assert.IsType<Error>(response);
        }

        /// <summary>
        /// Test PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel
        /// </summary>
        [Fact]
        public void PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalEventId = null;
            //string externalAccountId = null;
            //var response = instance.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(externalEventId, externalAccountId);
            //Assert.IsType<MarketingEventDefaultResponse>(response);
        }

        /// <summary>
        /// Test PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete
        /// </summary>
        [Fact]
        public void PostMarketingV3MarketingEventsEventsExternalEventIdCompleteCompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalEventId = null;
            //string externalAccountId = null;
            //MarketingEventCompleteRequestParams marketingEventCompleteRequestParams = null;
            //var response = instance.PostMarketingV3MarketingEventsEventsExternalEventIdCompleteComplete(externalEventId, externalAccountId, marketingEventCompleteRequestParams);
            //Assert.IsType<MarketingEventDefaultResponse>(response);
        }

        /// <summary>
        /// Test PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById
        /// </summary>
        [Fact]
        public void PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalEventId = null;
            //string subscriberState = null;
            //string externalAccountId = null;
            //BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber = null;
            //var response = instance.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateEmailUpsertDoEmailUpsertById(externalEventId, subscriberState, externalAccountId, batchInputMarketingEventEmailSubscriber);
            //Assert.IsType<Error>(response);
        }

        /// <summary>
        /// Test PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById
        /// </summary>
        [Fact]
        public void PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalEventId = null;
            //string subscriberState = null;
            //string externalAccountId = null;
            //BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber = null;
            //var response = instance.PostMarketingV3MarketingEventsEventsExternalEventIdSubscriberStateUpsertDoUpsertById(externalEventId, subscriberState, externalAccountId, batchInputMarketingEventSubscriber);
            //Assert.IsType<Error>(response);
        }

        /// <summary>
        /// Test PostMarketingV3MarketingEventsEventsUpsertDoUpsert
        /// </summary>
        [Fact]
        public void PostMarketingV3MarketingEventsEventsUpsertDoUpsertTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams = null;
            //var response = instance.PostMarketingV3MarketingEventsEventsUpsertDoUpsert(batchInputMarketingEventCreateRequestParams);
            //Assert.IsType<BatchResponseMarketingEventPublicDefaultResponse>(response);
        }

        /// <summary>
        /// Test PutMarketingV3MarketingEventsEventsExternalEventIdReplace
        /// </summary>
        [Fact]
        public void PutMarketingV3MarketingEventsEventsExternalEventIdReplaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalEventId = null;
            //MarketingEventCreateRequestParams marketingEventCreateRequestParams = null;
            //var response = instance.PutMarketingV3MarketingEventsEventsExternalEventIdReplace(externalEventId, marketingEventCreateRequestParams);
            //Assert.IsType<MarketingEventPublicDefaultResponse>(response);
        }
    }
}
