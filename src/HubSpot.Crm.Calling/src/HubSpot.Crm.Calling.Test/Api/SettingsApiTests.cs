/*
 * Calling Extensions API
 *
 * Provides a way for apps to add custom calling options to a contact record. This works in conjunction with the [Calling SDK](#), which is used to build your phone/calling UI. The endpoints here allow your service to appear as an option to HubSpot users when they access the *Call* action on a contact record. Once accessed, your custom phone/calling UI will be displayed in an iframe at the specified URL with the specified dimensions on that record.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.Crm.Calling.Client;
using HubSpot.Crm.Calling.Api;
// uncomment below to import models
//using HubSpot.Crm.Calling.Model;

namespace HubSpot.Crm.Calling.Test.Api
{
    /// <summary>
    ///  Class for testing SettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SettingsApiTests : IDisposable
    {
        private SettingsApi instance;

        public SettingsApiTests()
        {
            instance = new SettingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SettingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SettingsApi
            //Assert.IsType<SettingsApi>(instance);
        }

        /// <summary>
        /// Test DeleteCrmV3ExtensionsCallingAppIdSettingsArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //instance.DeleteCrmV3ExtensionsCallingAppIdSettingsArchive(appId);
        }

        /// <summary>
        /// Test GetCrmV3ExtensionsCallingAppIdSettingsGetById
        /// </summary>
        [Fact]
        public void GetCrmV3ExtensionsCallingAppIdSettingsGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //var response = instance.GetCrmV3ExtensionsCallingAppIdSettingsGetById(appId);
            //Assert.IsType<SettingsResponse>(response);
        }

        /// <summary>
        /// Test PatchCrmV3ExtensionsCallingAppIdSettingsUpdate
        /// </summary>
        [Fact]
        public void PatchCrmV3ExtensionsCallingAppIdSettingsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //SettingsPatchRequest settingsPatchRequest = null;
            //var response = instance.PatchCrmV3ExtensionsCallingAppIdSettingsUpdate(appId, settingsPatchRequest);
            //Assert.IsType<SettingsResponse>(response);
        }

        /// <summary>
        /// Test PostCrmV3ExtensionsCallingAppIdSettingsCreate
        /// </summary>
        [Fact]
        public void PostCrmV3ExtensionsCallingAppIdSettingsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //SettingsRequest settingsRequest = null;
            //var response = instance.PostCrmV3ExtensionsCallingAppIdSettingsCreate(appId, settingsRequest);
            //Assert.IsType<SettingsResponse>(response);
        }
    }
}
